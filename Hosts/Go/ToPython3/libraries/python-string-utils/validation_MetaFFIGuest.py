
# Code generated by MetaFFI. Modify only in marked places.
# Guest code for validation.py

import traceback
import sys
import platform
import os
from typing import Any
from ctypes import *


import validation



python_plugin_handle = None
def load_python_plugin():
	global python_plugin_handle
	
	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))
		python_plugin_handle.set_entrypoint.argstype = [c_char_p, c_void_p]
		python_plugin_handle.xcall_params_ret.argstype = [py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_params_no_ret.argstype = [py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_no_params_ret.argstype = [py_object, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong)]
		python_plugin_handle.xcall_no_params_no_ret.argstype = [py_object, POINTER(c_char_p), POINTER(c_ulonglong)]

def get_filename_to_load(fname):
	osname = platform.system()
	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so

load_python_plugin()





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetAny(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetAny), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetAny'.encode(), CEntryPoint_GetAny)

def EntryPoint_GetAny():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.Any)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetAny(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetAny), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetAny'.encode(), CEntryPoint_SetAny)

def EntryPoint_SetAny(val):
	ret_val_types = ()
	validation.Any = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetCAMEL_CASE_REPLACE_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetCAMEL_CASE_REPLACE_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetCAMEL_CASE_REPLACE_RE'.encode(), CEntryPoint_GetCAMEL_CASE_REPLACE_RE)

def EntryPoint_GetCAMEL_CASE_REPLACE_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.CAMEL_CASE_REPLACE_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetCAMEL_CASE_REPLACE_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetCAMEL_CASE_REPLACE_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetCAMEL_CASE_REPLACE_RE'.encode(), CEntryPoint_SetCAMEL_CASE_REPLACE_RE)

def EntryPoint_SetCAMEL_CASE_REPLACE_RE(val):
	ret_val_types = ()
	validation.CAMEL_CASE_REPLACE_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetCAMEL_CASE_TEST_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetCAMEL_CASE_TEST_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetCAMEL_CASE_TEST_RE'.encode(), CEntryPoint_GetCAMEL_CASE_TEST_RE)

def EntryPoint_GetCAMEL_CASE_TEST_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.CAMEL_CASE_TEST_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetCAMEL_CASE_TEST_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetCAMEL_CASE_TEST_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetCAMEL_CASE_TEST_RE'.encode(), CEntryPoint_SetCAMEL_CASE_TEST_RE)

def EntryPoint_SetCAMEL_CASE_TEST_RE(val):
	ret_val_types = ()
	validation.CAMEL_CASE_TEST_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetCREDIT_CARDS(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetCREDIT_CARDS), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetCREDIT_CARDS'.encode(), CEntryPoint_GetCREDIT_CARDS)

def EntryPoint_GetCREDIT_CARDS():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.CREDIT_CARDS)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetCREDIT_CARDS(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetCREDIT_CARDS), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetCREDIT_CARDS'.encode(), CEntryPoint_SetCREDIT_CARDS)

def EntryPoint_SetCREDIT_CARDS(val):
	ret_val_types = ()
	validation.CREDIT_CARDS = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetEMAILS_RAW_STRING(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetEMAILS_RAW_STRING), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetEMAILS_RAW_STRING'.encode(), CEntryPoint_GetEMAILS_RAW_STRING)

def EntryPoint_GetEMAILS_RAW_STRING():
	ret_val_types = (4096,)
	return (None, ret_val_types, validation.EMAILS_RAW_STRING)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetEMAILS_RAW_STRING(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetEMAILS_RAW_STRING), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetEMAILS_RAW_STRING'.encode(), CEntryPoint_SetEMAILS_RAW_STRING)

def EntryPoint_SetEMAILS_RAW_STRING(val):
	ret_val_types = ()
	validation.EMAILS_RAW_STRING = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetEMAILS_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetEMAILS_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetEMAILS_RE'.encode(), CEntryPoint_GetEMAILS_RE)

def EntryPoint_GetEMAILS_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.EMAILS_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetEMAILS_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetEMAILS_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetEMAILS_RE'.encode(), CEntryPoint_SetEMAILS_RE)

def EntryPoint_SetEMAILS_RE(val):
	ret_val_types = ()
	validation.EMAILS_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetEMAIL_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetEMAIL_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetEMAIL_RE'.encode(), CEntryPoint_GetEMAIL_RE)

def EntryPoint_GetEMAIL_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.EMAIL_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetEMAIL_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetEMAIL_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetEMAIL_RE'.encode(), CEntryPoint_SetEMAIL_RE)

def EntryPoint_SetEMAIL_RE(val):
	ret_val_types = ()
	validation.EMAIL_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetESCAPED_AT_SIGN(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetESCAPED_AT_SIGN), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetESCAPED_AT_SIGN'.encode(), CEntryPoint_GetESCAPED_AT_SIGN)

def EntryPoint_GetESCAPED_AT_SIGN():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.ESCAPED_AT_SIGN)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetESCAPED_AT_SIGN(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetESCAPED_AT_SIGN), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetESCAPED_AT_SIGN'.encode(), CEntryPoint_SetESCAPED_AT_SIGN)

def EntryPoint_SetESCAPED_AT_SIGN(val):
	ret_val_types = ()
	validation.ESCAPED_AT_SIGN = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetHTML_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetHTML_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetHTML_RE'.encode(), CEntryPoint_GetHTML_RE)

def EntryPoint_GetHTML_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.HTML_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetHTML_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetHTML_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetHTML_RE'.encode(), CEntryPoint_SetHTML_RE)

def EntryPoint_SetHTML_RE(val):
	ret_val_types = ()
	validation.HTML_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetHTML_TAG_ONLY_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetHTML_TAG_ONLY_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetHTML_TAG_ONLY_RE'.encode(), CEntryPoint_GetHTML_TAG_ONLY_RE)

def EntryPoint_GetHTML_TAG_ONLY_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.HTML_TAG_ONLY_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetHTML_TAG_ONLY_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetHTML_TAG_ONLY_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetHTML_TAG_ONLY_RE'.encode(), CEntryPoint_SetHTML_TAG_ONLY_RE)

def EntryPoint_SetHTML_TAG_ONLY_RE(val):
	ret_val_types = ()
	validation.HTML_TAG_ONLY_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetINSENSITIVE_LOCALE_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetINSENSITIVE_LOCALE_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetINSENSITIVE_LOCALE_RE'.encode(), CEntryPoint_GetINSENSITIVE_LOCALE_RE)

def EntryPoint_GetINSENSITIVE_LOCALE_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.INSENSITIVE_LOCALE_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetINSENSITIVE_LOCALE_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetINSENSITIVE_LOCALE_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetINSENSITIVE_LOCALE_RE'.encode(), CEntryPoint_SetINSENSITIVE_LOCALE_RE)

def EntryPoint_SetINSENSITIVE_LOCALE_RE(val):
	ret_val_types = ()
	validation.INSENSITIVE_LOCALE_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetIP_V6_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetIP_V6_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetIP_V6_RE'.encode(), CEntryPoint_GetIP_V6_RE)

def EntryPoint_GetIP_V6_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.IP_V6_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetIP_V6_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetIP_V6_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetIP_V6_RE'.encode(), CEntryPoint_SetIP_V6_RE)

def EntryPoint_SetIP_V6_RE(val):
	ret_val_types = ()
	validation.IP_V6_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetJSON_WRAPPER_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetJSON_WRAPPER_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetJSON_WRAPPER_RE'.encode(), CEntryPoint_GetJSON_WRAPPER_RE)

def EntryPoint_GetJSON_WRAPPER_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.JSON_WRAPPER_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetJSON_WRAPPER_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetJSON_WRAPPER_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetJSON_WRAPPER_RE'.encode(), CEntryPoint_SetJSON_WRAPPER_RE)

def EntryPoint_SetJSON_WRAPPER_RE(val):
	ret_val_types = ()
	validation.JSON_WRAPPER_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetLOCALE_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetLOCALE_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetLOCALE_RE'.encode(), CEntryPoint_GetLOCALE_RE)

def EntryPoint_GetLOCALE_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.LOCALE_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetLOCALE_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetLOCALE_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetLOCALE_RE'.encode(), CEntryPoint_SetLOCALE_RE)

def EntryPoint_SetLOCALE_RE(val):
	ret_val_types = ()
	validation.LOCALE_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetList(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetList), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetList'.encode(), CEntryPoint_GetList)

def EntryPoint_GetList():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.List)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetList(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetList), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetList'.encode(), CEntryPoint_SetList)

def EntryPoint_SetList(val):
	ret_val_types = ()
	validation.List = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetMARGIN_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetMARGIN_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetMARGIN_RE'.encode(), CEntryPoint_GetMARGIN_RE)

def EntryPoint_GetMARGIN_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.MARGIN_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetMARGIN_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetMARGIN_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetMARGIN_RE'.encode(), CEntryPoint_SetMARGIN_RE)

def EntryPoint_SetMARGIN_RE(val):
	ret_val_types = ()
	validation.MARGIN_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetNO_LETTERS_OR_NUMBERS_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetNO_LETTERS_OR_NUMBERS_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetNO_LETTERS_OR_NUMBERS_RE'.encode(), CEntryPoint_GetNO_LETTERS_OR_NUMBERS_RE)

def EntryPoint_GetNO_LETTERS_OR_NUMBERS_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.NO_LETTERS_OR_NUMBERS_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetNO_LETTERS_OR_NUMBERS_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetNO_LETTERS_OR_NUMBERS_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetNO_LETTERS_OR_NUMBERS_RE'.encode(), CEntryPoint_SetNO_LETTERS_OR_NUMBERS_RE)

def EntryPoint_SetNO_LETTERS_OR_NUMBERS_RE(val):
	ret_val_types = ()
	validation.NO_LETTERS_OR_NUMBERS_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetNUMBER_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetNUMBER_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetNUMBER_RE'.encode(), CEntryPoint_GetNUMBER_RE)

def EntryPoint_GetNUMBER_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.NUMBER_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetNUMBER_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetNUMBER_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetNUMBER_RE'.encode(), CEntryPoint_SetNUMBER_RE)

def EntryPoint_SetNUMBER_RE(val):
	ret_val_types = ()
	validation.NUMBER_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetOptional(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetOptional), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetOptional'.encode(), CEntryPoint_GetOptional)

def EntryPoint_GetOptional():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.Optional)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetOptional(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetOptional), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetOptional'.encode(), CEntryPoint_SetOptional)

def EntryPoint_SetOptional(val):
	ret_val_types = ()
	validation.Optional = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetPRETTIFY_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetPRETTIFY_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetPRETTIFY_RE'.encode(), CEntryPoint_GetPRETTIFY_RE)

def EntryPoint_GetPRETTIFY_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.PRETTIFY_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetPRETTIFY_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetPRETTIFY_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetPRETTIFY_RE'.encode(), CEntryPoint_SetPRETTIFY_RE)

def EntryPoint_SetPRETTIFY_RE(val):
	ret_val_types = ()
	validation.PRETTIFY_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetSHALLOW_IP_V4_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetSHALLOW_IP_V4_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetSHALLOW_IP_V4_RE'.encode(), CEntryPoint_GetSHALLOW_IP_V4_RE)

def EntryPoint_GetSHALLOW_IP_V4_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.SHALLOW_IP_V4_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetSHALLOW_IP_V4_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetSHALLOW_IP_V4_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetSHALLOW_IP_V4_RE'.encode(), CEntryPoint_SetSHALLOW_IP_V4_RE)

def EntryPoint_SetSHALLOW_IP_V4_RE(val):
	ret_val_types = ()
	validation.SHALLOW_IP_V4_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetSNAKE_CASE_REPLACE_DASH_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetSNAKE_CASE_REPLACE_DASH_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetSNAKE_CASE_REPLACE_DASH_RE'.encode(), CEntryPoint_GetSNAKE_CASE_REPLACE_DASH_RE)

def EntryPoint_GetSNAKE_CASE_REPLACE_DASH_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.SNAKE_CASE_REPLACE_DASH_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetSNAKE_CASE_REPLACE_DASH_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetSNAKE_CASE_REPLACE_DASH_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetSNAKE_CASE_REPLACE_DASH_RE'.encode(), CEntryPoint_SetSNAKE_CASE_REPLACE_DASH_RE)

def EntryPoint_SetSNAKE_CASE_REPLACE_DASH_RE(val):
	ret_val_types = ()
	validation.SNAKE_CASE_REPLACE_DASH_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetSNAKE_CASE_REPLACE_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetSNAKE_CASE_REPLACE_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetSNAKE_CASE_REPLACE_RE'.encode(), CEntryPoint_GetSNAKE_CASE_REPLACE_RE)

def EntryPoint_GetSNAKE_CASE_REPLACE_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.SNAKE_CASE_REPLACE_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetSNAKE_CASE_REPLACE_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetSNAKE_CASE_REPLACE_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetSNAKE_CASE_REPLACE_RE'.encode(), CEntryPoint_SetSNAKE_CASE_REPLACE_RE)

def EntryPoint_SetSNAKE_CASE_REPLACE_RE(val):
	ret_val_types = ()
	validation.SNAKE_CASE_REPLACE_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetSNAKE_CASE_TEST_DASH_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetSNAKE_CASE_TEST_DASH_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetSNAKE_CASE_TEST_DASH_RE'.encode(), CEntryPoint_GetSNAKE_CASE_TEST_DASH_RE)

def EntryPoint_GetSNAKE_CASE_TEST_DASH_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.SNAKE_CASE_TEST_DASH_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetSNAKE_CASE_TEST_DASH_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetSNAKE_CASE_TEST_DASH_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetSNAKE_CASE_TEST_DASH_RE'.encode(), CEntryPoint_SetSNAKE_CASE_TEST_DASH_RE)

def EntryPoint_SetSNAKE_CASE_TEST_DASH_RE(val):
	ret_val_types = ()
	validation.SNAKE_CASE_TEST_DASH_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetSNAKE_CASE_TEST_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetSNAKE_CASE_TEST_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetSNAKE_CASE_TEST_RE'.encode(), CEntryPoint_GetSNAKE_CASE_TEST_RE)

def EntryPoint_GetSNAKE_CASE_TEST_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.SNAKE_CASE_TEST_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetSNAKE_CASE_TEST_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetSNAKE_CASE_TEST_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetSNAKE_CASE_TEST_RE'.encode(), CEntryPoint_SetSNAKE_CASE_TEST_RE)

def EntryPoint_SetSNAKE_CASE_TEST_RE(val):
	ret_val_types = ()
	validation.SNAKE_CASE_TEST_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetSPACES_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetSPACES_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetSPACES_RE'.encode(), CEntryPoint_GetSPACES_RE)

def EntryPoint_GetSPACES_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.SPACES_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetSPACES_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetSPACES_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetSPACES_RE'.encode(), CEntryPoint_SetSPACES_RE)

def EntryPoint_SetSPACES_RE(val):
	ret_val_types = ()
	validation.SPACES_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetURLS_RAW_STRING(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetURLS_RAW_STRING), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetURLS_RAW_STRING'.encode(), CEntryPoint_GetURLS_RAW_STRING)

def EntryPoint_GetURLS_RAW_STRING():
	ret_val_types = (4096,)
	return (None, ret_val_types, validation.URLS_RAW_STRING)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetURLS_RAW_STRING(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetURLS_RAW_STRING), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetURLS_RAW_STRING'.encode(), CEntryPoint_SetURLS_RAW_STRING)

def EntryPoint_SetURLS_RAW_STRING(val):
	ret_val_types = ()
	validation.URLS_RAW_STRING = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetURLS_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetURLS_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetURLS_RE'.encode(), CEntryPoint_GetURLS_RE)

def EntryPoint_GetURLS_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.URLS_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetURLS_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetURLS_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetURLS_RE'.encode(), CEntryPoint_SetURLS_RE)

def EntryPoint_SetURLS_RE(val):
	ret_val_types = ()
	validation.URLS_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetURL_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetURL_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetURL_RE'.encode(), CEntryPoint_GetURL_RE)

def EntryPoint_GetURL_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.URL_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetURL_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetURL_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetURL_RE'.encode(), CEntryPoint_SetURL_RE)

def EntryPoint_SetURL_RE(val):
	ret_val_types = ()
	validation.URL_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetUUID_HEX_OK_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetUUID_HEX_OK_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetUUID_HEX_OK_RE'.encode(), CEntryPoint_GetUUID_HEX_OK_RE)

def EntryPoint_GetUUID_HEX_OK_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.UUID_HEX_OK_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetUUID_HEX_OK_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetUUID_HEX_OK_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetUUID_HEX_OK_RE'.encode(), CEntryPoint_SetUUID_HEX_OK_RE)

def EntryPoint_SetUUID_HEX_OK_RE(val):
	ret_val_types = ()
	validation.UUID_HEX_OK_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetUUID_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetUUID_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetUUID_RE'.encode(), CEntryPoint_GetUUID_RE)

def EntryPoint_GetUUID_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.UUID_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetUUID_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetUUID_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetUUID_RE'.encode(), CEntryPoint_SetUUID_RE)

def EntryPoint_SetUUID_RE(val):
	ret_val_types = ()
	validation.UUID_RE = val
	return (None, ret_val_types)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_GetWORDS_COUNT_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_no_params_ret(py_object(EntryPoint_GetWORDS_COUNT_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_GetWORDS_COUNT_RE'.encode(), CEntryPoint_GetWORDS_COUNT_RE)

def EntryPoint_GetWORDS_COUNT_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, validation.WORDS_COUNT_RE)



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_SetWORDS_COUNT_RE(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_SetWORDS_COUNT_RE), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_SetWORDS_COUNT_RE'.encode(), CEntryPoint_SetWORDS_COUNT_RE)

def EntryPoint_SetWORDS_COUNT_RE(val):
	ret_val_types = ()
	validation.WORDS_COUNT_RE = val
	return (None, ret_val_types)






# Call to foreign contains_html
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_contains_html(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_contains_html), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_contains_html'.encode(), CEntryPoint_contains_html)

def EntryPoint_contains_html(input_string):
	try:
		# call function
		ret_0 = validation.contains_html(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_camel_case
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_camel_case(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_camel_case), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_camel_case'.encode(), CEntryPoint_is_camel_case)

def EntryPoint_is_camel_case(input_string):
	try:
		# call function
		ret_0 = validation.is_camel_case(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_credit_card
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_credit_card(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_credit_card), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_credit_card'.encode(), CEntryPoint_is_credit_card)

def EntryPoint_is_credit_card(input_string,card_type):
	try:
		# call function
		ret_0 = validation.is_credit_card(input_string,card_type)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_decimal
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_decimal(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_decimal), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_decimal'.encode(), CEntryPoint_is_decimal)

def EntryPoint_is_decimal(input_string):
	try:
		# call function
		ret_0 = validation.is_decimal(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_email
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_email(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_email), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_email'.encode(), CEntryPoint_is_email)

def EntryPoint_is_email(input_string):
	try:
		# call function
		ret_0 = validation.is_email(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_full_string
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_full_string(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_full_string), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_full_string'.encode(), CEntryPoint_is_full_string)

def EntryPoint_is_full_string(input_string):
	try:
		# call function
		ret_0 = validation.is_full_string(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_integer
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_integer(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_integer), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_integer'.encode(), CEntryPoint_is_integer)

def EntryPoint_is_integer(input_string):
	try:
		# call function
		ret_0 = validation.is_integer(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_ip
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_ip(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_ip), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_ip'.encode(), CEntryPoint_is_ip)

def EntryPoint_is_ip(input_string):
	try:
		# call function
		ret_0 = validation.is_ip(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_ip_v4
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_ip_v4(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_ip_v4), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_ip_v4'.encode(), CEntryPoint_is_ip_v4)

def EntryPoint_is_ip_v4(input_string):
	try:
		# call function
		ret_0 = validation.is_ip_v4(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_ip_v6
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_ip_v6(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_ip_v6), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_ip_v6'.encode(), CEntryPoint_is_ip_v6)

def EntryPoint_is_ip_v6(input_string):
	try:
		# call function
		ret_0 = validation.is_ip_v6(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_isbn
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_isbn(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_isbn), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_isbn'.encode(), CEntryPoint_is_isbn)

def EntryPoint_is_isbn(input_string,normalize):
	try:
		# call function
		ret_0 = validation.is_isbn(input_string,normalize)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_isbn_10
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_isbn_10(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_isbn_10), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_isbn_10'.encode(), CEntryPoint_is_isbn_10)

def EntryPoint_is_isbn_10(input_string,normalize):
	try:
		# call function
		ret_0 = validation.is_isbn_10(input_string,normalize)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_isbn_13
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_isbn_13(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_isbn_13), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_isbn_13'.encode(), CEntryPoint_is_isbn_13)

def EntryPoint_is_isbn_13(input_string,normalize):
	try:
		# call function
		ret_0 = validation.is_isbn_13(input_string,normalize)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_isogram
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_isogram(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_isogram), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_isogram'.encode(), CEntryPoint_is_isogram)

def EntryPoint_is_isogram(input_string):
	try:
		# call function
		ret_0 = validation.is_isogram(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_json
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_json(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_json), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_json'.encode(), CEntryPoint_is_json)

def EntryPoint_is_json(input_string):
	try:
		# call function
		ret_0 = validation.is_json(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_number
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_number(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_number), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_number'.encode(), CEntryPoint_is_number)

def EntryPoint_is_number(input_string):
	try:
		# call function
		ret_0 = validation.is_number(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_palindrome
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_palindrome(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_palindrome), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_palindrome'.encode(), CEntryPoint_is_palindrome)

def EntryPoint_is_palindrome(input_string,ignore_spaces,ignore_case):
	try:
		# call function
		ret_0 = validation.is_palindrome(input_string,ignore_spaces,ignore_case)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_pangram
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_pangram(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_pangram), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_pangram'.encode(), CEntryPoint_is_pangram)

def EntryPoint_is_pangram(input_string):
	try:
		# call function
		ret_0 = validation.is_pangram(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_slug
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_slug(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_slug), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_slug'.encode(), CEntryPoint_is_slug)

def EntryPoint_is_slug(input_string,separator):
	try:
		# call function
		ret_0 = validation.is_slug(input_string,separator)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_snake_case
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_snake_case(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_snake_case), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_snake_case'.encode(), CEntryPoint_is_snake_case)

def EntryPoint_is_snake_case(input_string,separator):
	try:
		# call function
		ret_0 = validation.is_snake_case(input_string,separator)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_string
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_string(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_string), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_string'.encode(), CEntryPoint_is_string)

def EntryPoint_is_string(obj):
	try:
		# call function
		ret_0 = validation.is_string(obj)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_url
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_url(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_url), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_url'.encode(), CEntryPoint_is_url)

def EntryPoint_is_url(input_string,allowed_schemes):
	try:
		# call function
		ret_0 = validation.is_url(input_string,allowed_schemes)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_uuid
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_is_uuid(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_is_uuid), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_is_uuid'.encode(), CEntryPoint_is_uuid)

def EntryPoint_is_uuid(input_string,allow_hex):
	try:
		# call function
		ret_0 = validation.is_uuid(input_string,allow_hex)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign words_count
@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_words_count(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_words_count), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_words_count'.encode(), CEntryPoint_words_count)

def EntryPoint_words_count(input_string):
	try:
		# call function
		ret_0 = validation.words_count(input_string)
		
		ret_val_types = (32,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_InvalidInputError_InvalidInputError(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint_InvalidInputError_InvalidInputError), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_InvalidInputError_InvalidInputError'.encode(), CEntryPoint_InvalidInputError_InvalidInputError)

def EntryPoint_InvalidInputError_InvalidInputError(input_data):
	try:
		# call constructor
		ret_0 = validation.InvalidInputError(input_data)
		
		
		ret_val_types = (32768,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint_InvalidInputError_ReleaseInvalidInputError(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint_InvalidInputError_ReleaseInvalidInputError), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint_InvalidInputError_ReleaseInvalidInputError'.encode(), CEntryPoint_InvalidInputError_ReleaseInvalidInputError)

def EntryPoint_InvalidInputError_ReleaseInvalidInputError(this_instance):
	try:
		# xcall release object
		
		python_plugin_handle.release_object(this_instance)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)




@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint___ISBNChecker___ISBNChecker(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint___ISBNChecker___ISBNChecker), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint___ISBNChecker___ISBNChecker'.encode(), CEntryPoint___ISBNChecker___ISBNChecker)

def EntryPoint___ISBNChecker___ISBNChecker(input_string,normalize):
	try:
		# call constructor
		ret_0 = validation.__ISBNChecker(input_string,normalize)
		
		
		ret_val_types = (32768,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint___ISBNChecker_is_isbn_10(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint___ISBNChecker_is_isbn_10), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint___ISBNChecker_is_isbn_10'.encode(), CEntryPoint___ISBNChecker_is_isbn_10)

def EntryPoint___ISBNChecker_is_isbn_10(this_instance):
	try:
		# call method
		ret_0 = this_instance.is_isbn_10()
		
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)
		
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)
	

@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint___ISBNChecker_is_isbn_13(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_ret(py_object(EntryPoint___ISBNChecker_is_isbn_13), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint___ISBNChecker_is_isbn_13'.encode(), CEntryPoint___ISBNChecker_is_isbn_13)

def EntryPoint___ISBNChecker_is_isbn_13(this_instance):
	try:
		# call method
		ret_0 = this_instance.is_isbn_13()
		
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)
		
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)
	



@CFUNCTYPE(None, c_void_p, POINTER(c_char_p), POINTER(c_ulonglong))
def CEntryPoint___ISBNChecker_Release__ISBNChecker(cdts, out_err, out_err_len):
	global python_plugin_handle
	python_plugin_handle.xcall_params_no_ret(py_object(EntryPoint___ISBNChecker_Release__ISBNChecker), c_void_p(cdts), out_err, out_err_len)
python_plugin_handle.set_entrypoint('EntryPoint___ISBNChecker_Release__ISBNChecker'.encode(), CEntryPoint___ISBNChecker_Release__ISBNChecker)

def EntryPoint___ISBNChecker_Release__ISBNChecker(this_instance):
	try:
		# xcall release object
		
		python_plugin_handle.release_object(this_instance)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)






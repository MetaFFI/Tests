
// Code generated by MetaFFI. DO NOT EDIT.
// Host code for manipulation.py
package main

import "fmt"
import "unsafe"
import "reflect"
import . "github.com/MetaFFI/lang-plugin-go/go-runtime"

/*
#cgo !windows LDFLAGS: -L. -ldl
#cgo CFLAGS: -I/mnt/c/src/github.com/MetaFFI/out/ubuntu/x64/debug

#include <stdlib.h>
#include <stdint.h>
#include <include/cdt_structs.h>
#include <include/cdt_capi_loader.h>

metaffi_handle get_null_handle();

metaffi_size get_int_item(metaffi_size* array, int index);

void* convert_union_to_ptr(void* p);

void set_cdt_type(struct cdt* p, metaffi_type t);

metaffi_type get_cdt_type(struct cdt* p);

#ifdef _WIN32
metaffi_size len_to_metaffi_size(long long i);
#else
metaffi_size len_to_metaffi_size(long long i);
#endif

*/
import "C"

var pruntime_plugin *C.char
var runtime_plugin_length C.uint32_t

// function IDs



var GetCAMEL_CASE_REPLACE_RE_id C.int64_t = -1
var SetCAMEL_CASE_REPLACE_RE_id C.int64_t = -1

var GetCAMEL_CASE_TEST_RE_id C.int64_t = -1
var SetCAMEL_CASE_TEST_RE_id C.int64_t = -1

var GetCREDIT_CARDS_id C.int64_t = -1
var SetCREDIT_CARDS_id C.int64_t = -1

var GetEMAILS_RAW_STRING_id C.int64_t = -1
var SetEMAILS_RAW_STRING_id C.int64_t = -1

var GetEMAILS_RE_id C.int64_t = -1
var SetEMAILS_RE_id C.int64_t = -1

var GetEMAIL_RE_id C.int64_t = -1
var SetEMAIL_RE_id C.int64_t = -1

var GetESCAPED_AT_SIGN_id C.int64_t = -1
var SetESCAPED_AT_SIGN_id C.int64_t = -1

var GetHTML_RE_id C.int64_t = -1
var SetHTML_RE_id C.int64_t = -1

var GetHTML_TAG_ONLY_RE_id C.int64_t = -1
var SetHTML_TAG_ONLY_RE_id C.int64_t = -1

var GetINSENSITIVE_LOCALE_RE_id C.int64_t = -1
var SetINSENSITIVE_LOCALE_RE_id C.int64_t = -1

var GetIP_V6_RE_id C.int64_t = -1
var SetIP_V6_RE_id C.int64_t = -1

var GetJSON_WRAPPER_RE_id C.int64_t = -1
var SetJSON_WRAPPER_RE_id C.int64_t = -1

var GetLOCALE_RE_id C.int64_t = -1
var SetLOCALE_RE_id C.int64_t = -1

var GetMARGIN_RE_id C.int64_t = -1
var SetMARGIN_RE_id C.int64_t = -1

var GetNO_LETTERS_OR_NUMBERS_RE_id C.int64_t = -1
var SetNO_LETTERS_OR_NUMBERS_RE_id C.int64_t = -1

var GetNUMBER_RE_id C.int64_t = -1
var SetNUMBER_RE_id C.int64_t = -1

var GetPRETTIFY_RE_id C.int64_t = -1
var SetPRETTIFY_RE_id C.int64_t = -1

var GetSHALLOW_IP_V4_RE_id C.int64_t = -1
var SetSHALLOW_IP_V4_RE_id C.int64_t = -1

var GetSNAKE_CASE_REPLACE_DASH_RE_id C.int64_t = -1
var SetSNAKE_CASE_REPLACE_DASH_RE_id C.int64_t = -1

var GetSNAKE_CASE_REPLACE_RE_id C.int64_t = -1
var SetSNAKE_CASE_REPLACE_RE_id C.int64_t = -1

var GetSNAKE_CASE_TEST_DASH_RE_id C.int64_t = -1
var SetSNAKE_CASE_TEST_DASH_RE_id C.int64_t = -1

var GetSNAKE_CASE_TEST_RE_id C.int64_t = -1
var SetSNAKE_CASE_TEST_RE_id C.int64_t = -1

var GetSPACES_RE_id C.int64_t = -1
var SetSPACES_RE_id C.int64_t = -1

var GetURLS_RAW_STRING_id C.int64_t = -1
var SetURLS_RAW_STRING_id C.int64_t = -1

var GetURLS_RE_id C.int64_t = -1
var SetURLS_RE_id C.int64_t = -1

var GetURL_RE_id C.int64_t = -1
var SetURL_RE_id C.int64_t = -1

var GetUUID_HEX_OK_RE_id C.int64_t = -1
var SetUUID_HEX_OK_RE_id C.int64_t = -1

var GetUUID_RE_id C.int64_t = -1
var SetUUID_RE_id C.int64_t = -1

var GetUnion_id C.int64_t = -1
var SetUnion_id C.int64_t = -1

var GetWORDS_COUNT_RE_id C.int64_t = -1
var SetWORDS_COUNT_RE_id C.int64_t = -1



var asciify_id C.int64_t = -1

var booleanize_id C.int64_t = -1

var camel_case_to_snake_id C.int64_t = -1

var compress_id C.int64_t = -1

var decompress_id C.int64_t = -1

var is_camel_case_id C.int64_t = -1

var is_full_string_id C.int64_t = -1

var is_integer_id C.int64_t = -1

var is_snake_case_id C.int64_t = -1

var is_string_id C.int64_t = -1

var prettify_id C.int64_t = -1

var reverse_id C.int64_t = -1

var roman_decode_id C.int64_t = -1

var roman_encode_id C.int64_t = -1

var shuffle_id C.int64_t = -1

var slugify_id C.int64_t = -1

var snake_case_to_camel_id C.int64_t = -1

var strip_html_id C.int64_t = -1

var strip_margin_id C.int64_t = -1

var uuid4_id C.int64_t = -1






var InvalidInputError_InvalidInputError_id C.int64_t = -1


var InvalidInputError_ReleaseInvalidInputError_id C.int64_t = -1





var __RomanNumbers___RomanNumbers_id C.int64_t = -1


var __RomanNumbers_Release__RomanNumbers_id C.int64_t = -1





var __StringCompressor___StringCompressor_id C.int64_t = -1


var __StringCompressor_Release__StringCompressor_id C.int64_t = -1




var __StringFormatter_format_id C.int64_t = -1


var __StringFormatter___StringFormatter_id C.int64_t = -1


var __StringFormatter_Release__StringFormatter_id C.int64_t = -1





func init(){
	err := C.load_cdt_capi()
	if err != nil{
		panic("Failed to load MetaFFI XLLR functions: "+C.GoString(err))
	}

	runtime_plugin := "xllr.python3"
	pruntime_plugin = C.CString(runtime_plugin)
	runtime_plugin_length = C.uint32_t(len(runtime_plugin))

	// load foreign runtime
	var out_err *C.char
    var out_err_len C.uint32_t
    out_err_len = C.uint32_t(0)
	C.xllr_load_runtime_plugin(pruntime_plugin, runtime_plugin_length, &out_err, &out_err_len)
	if out_err_len != C.uint32_t(0){
		panic(fmt.Errorf("Failed to load runtime %v: %v", runtime_plugin, string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len)))))
	}

	// load functions
	loadFF := func(fpath string) C.int64_t{
		ppath := C.CString(fpath)
		defer C.free(unsafe.Pointer(ppath))
	
		var out_err *C.char
		var out_err_len C.uint32_t
		out_err_len = C.uint32_t(0)
		id := C.int64_t(C.xllr_load_function(pruntime_plugin, runtime_plugin_length, ppath, C.uint(len(fpath)), C.int64_t(-1), &out_err, &out_err_len))
		
		if id == -1{ // failed
			panic(fmt.Errorf("Failed to load foreign entity entrypoint %v: %v", fpath, string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len)))))
		}

		return id
	}

	
	
	GetCAMEL_CASE_REPLACE_RE_id = loadFF("entrypoint_function=EntryPoint_GetCAMEL_CASE_REPLACE_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetCAMEL_CASE_REPLACE_RE_id = loadFF("entrypoint_function=EntryPoint_SetCAMEL_CASE_REPLACE_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetCAMEL_CASE_TEST_RE_id = loadFF("entrypoint_function=EntryPoint_GetCAMEL_CASE_TEST_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetCAMEL_CASE_TEST_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_SetCAMEL_CASE_TEST_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	GetCREDIT_CARDS_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_GetCREDIT_CARDS")
	SetCREDIT_CARDS_id = loadFF("entrypoint_function=EntryPoint_SetCREDIT_CARDS,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetEMAILS_RAW_STRING_id = loadFF("entrypoint_function=EntryPoint_GetEMAILS_RAW_STRING,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetEMAILS_RAW_STRING_id = loadFF("entrypoint_function=EntryPoint_SetEMAILS_RAW_STRING,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetEMAILS_RE_id = loadFF("entrypoint_function=EntryPoint_GetEMAILS_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetEMAILS_RE_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_SetEMAILS_RE")
	
	GetEMAIL_RE_id = loadFF("entrypoint_function=EntryPoint_GetEMAIL_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetEMAIL_RE_id = loadFF("entrypoint_function=EntryPoint_SetEMAIL_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetESCAPED_AT_SIGN_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_GetESCAPED_AT_SIGN,metaffi_guest_lib=manipulation_MetaFFIGuest")
	SetESCAPED_AT_SIGN_id = loadFF("entrypoint_function=EntryPoint_SetESCAPED_AT_SIGN,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetHTML_RE_id = loadFF("entrypoint_function=EntryPoint_GetHTML_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetHTML_RE_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_SetHTML_RE")
	
	GetHTML_TAG_ONLY_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_GetHTML_TAG_ONLY_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	SetHTML_TAG_ONLY_RE_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_SetHTML_TAG_ONLY_RE")
	
	GetINSENSITIVE_LOCALE_RE_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_GetINSENSITIVE_LOCALE_RE")
	SetINSENSITIVE_LOCALE_RE_id = loadFF("entrypoint_function=EntryPoint_SetINSENSITIVE_LOCALE_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetIP_V6_RE_id = loadFF("entrypoint_function=EntryPoint_GetIP_V6_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetIP_V6_RE_id = loadFF("entrypoint_function=EntryPoint_SetIP_V6_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetJSON_WRAPPER_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_GetJSON_WRAPPER_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	SetJSON_WRAPPER_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_SetJSON_WRAPPER_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	GetLOCALE_RE_id = loadFF("entrypoint_function=EntryPoint_GetLOCALE_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetLOCALE_RE_id = loadFF("entrypoint_function=EntryPoint_SetLOCALE_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetMARGIN_RE_id = loadFF("entrypoint_function=EntryPoint_GetMARGIN_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetMARGIN_RE_id = loadFF("entrypoint_function=EntryPoint_SetMARGIN_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetNO_LETTERS_OR_NUMBERS_RE_id = loadFF("entrypoint_function=EntryPoint_GetNO_LETTERS_OR_NUMBERS_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetNO_LETTERS_OR_NUMBERS_RE_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_SetNO_LETTERS_OR_NUMBERS_RE")
	
	GetNUMBER_RE_id = loadFF("entrypoint_function=EntryPoint_GetNUMBER_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetNUMBER_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_SetNUMBER_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	GetPRETTIFY_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_GetPRETTIFY_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	SetPRETTIFY_RE_id = loadFF("entrypoint_function=EntryPoint_SetPRETTIFY_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetSHALLOW_IP_V4_RE_id = loadFF("entrypoint_function=EntryPoint_GetSHALLOW_IP_V4_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetSHALLOW_IP_V4_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_SetSHALLOW_IP_V4_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	GetSNAKE_CASE_REPLACE_DASH_RE_id = loadFF("entrypoint_function=EntryPoint_GetSNAKE_CASE_REPLACE_DASH_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetSNAKE_CASE_REPLACE_DASH_RE_id = loadFF("entrypoint_function=EntryPoint_SetSNAKE_CASE_REPLACE_DASH_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetSNAKE_CASE_REPLACE_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_GetSNAKE_CASE_REPLACE_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	SetSNAKE_CASE_REPLACE_RE_id = loadFF("entrypoint_function=EntryPoint_SetSNAKE_CASE_REPLACE_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetSNAKE_CASE_TEST_DASH_RE_id = loadFF("entrypoint_function=EntryPoint_GetSNAKE_CASE_TEST_DASH_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetSNAKE_CASE_TEST_DASH_RE_id = loadFF("entrypoint_function=EntryPoint_SetSNAKE_CASE_TEST_DASH_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetSNAKE_CASE_TEST_RE_id = loadFF("entrypoint_function=EntryPoint_GetSNAKE_CASE_TEST_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetSNAKE_CASE_TEST_RE_id = loadFF("entrypoint_function=EntryPoint_SetSNAKE_CASE_TEST_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetSPACES_RE_id = loadFF("entrypoint_function=EntryPoint_GetSPACES_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetSPACES_RE_id = loadFF("entrypoint_function=EntryPoint_SetSPACES_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetURLS_RAW_STRING_id = loadFF("entrypoint_function=EntryPoint_GetURLS_RAW_STRING,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetURLS_RAW_STRING_id = loadFF("entrypoint_function=EntryPoint_SetURLS_RAW_STRING,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetURLS_RE_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_GetURLS_RE")
	SetURLS_RE_id = loadFF("entrypoint_function=EntryPoint_SetURLS_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetURL_RE_id = loadFF("entrypoint_function=EntryPoint_GetURL_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetURL_RE_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_SetURL_RE")
	
	GetUUID_HEX_OK_RE_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_GetUUID_HEX_OK_RE")
	SetUUID_HEX_OK_RE_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_SetUUID_HEX_OK_RE,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	GetUUID_RE_id = loadFF("entrypoint_function=EntryPoint_GetUUID_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetUUID_RE_id = loadFF("entrypoint_function=EntryPoint_SetUUID_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetUnion_id = loadFF("entrypoint_function=EntryPoint_GetUnion,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetUnion_id = loadFF("entrypoint_function=EntryPoint_SetUnion,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	GetWORDS_COUNT_RE_id = loadFF("entrypoint_function=EntryPoint_GetWORDS_COUNT_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	SetWORDS_COUNT_RE_id = loadFF("entrypoint_function=EntryPoint_SetWORDS_COUNT_RE,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	
	
	asciify_id = loadFF("entrypoint_function=EntryPoint_asciify,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	booleanize_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_booleanize")
	
	camel_case_to_snake_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_camel_case_to_snake,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	compress_id = loadFF("entrypoint_function=EntryPoint_compress,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	decompress_id = loadFF("entrypoint_function=EntryPoint_decompress,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	is_camel_case_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_is_camel_case")
	
	is_full_string_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_is_full_string")
	
	is_integer_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_is_integer,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	is_snake_case_id = loadFF("entrypoint_function=EntryPoint_is_snake_case,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	is_string_id = loadFF("entrypoint_function=EntryPoint_is_string,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	prettify_id = loadFF("entrypoint_function=EntryPoint_prettify,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	reverse_id = loadFF("entrypoint_function=EntryPoint_reverse,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	roman_decode_id = loadFF("entrypoint_function=EntryPoint_roman_decode,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	roman_encode_id = loadFF("entrypoint_function=EntryPoint_roman_encode,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	shuffle_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint_shuffle")
	
	slugify_id = loadFF("module=manipulation,entrypoint_function=EntryPoint_slugify,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	snake_case_to_camel_id = loadFF("entrypoint_function=EntryPoint_snake_case_to_camel,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	strip_html_id = loadFF("entrypoint_function=EntryPoint_strip_html,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	strip_margin_id = loadFF("entrypoint_function=EntryPoint_strip_margin,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	uuid4_id = loadFF("entrypoint_function=EntryPoint_uuid4,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	

	
	
	
	
	InvalidInputError_InvalidInputError_id = loadFF("entrypoint_function=EntryPoint_InvalidInputError_InvalidInputError,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	
	InvalidInputError_ReleaseInvalidInputError_id = loadFF("entrypoint_function=EntryPoint_InvalidInputError_ReleaseInvalidInputError,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	
	
	
	
	__RomanNumbers___RomanNumbers_id = loadFF("entrypoint_function=EntryPoint___RomanNumbers___RomanNumbers,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	
	__RomanNumbers_Release__RomanNumbers_id = loadFF("entrypoint_function=EntryPoint___RomanNumbers_Release__RomanNumbers,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	
	
	
	
	__StringCompressor___StringCompressor_id = loadFF("entrypoint_function=EntryPoint___StringCompressor___StringCompressor,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	
	__StringCompressor_Release__StringCompressor_id = loadFF("entrypoint_function=EntryPoint___StringCompressor_Release__StringCompressor,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	
	
	
	__StringFormatter_format_id = loadFF("module=manipulation,entrypoint_class=__StringFormatter,entrypoint_function=EntryPoint___StringFormatter_format,metaffi_guest_lib=manipulation_MetaFFIGuest")
	
	
	__StringFormatter___StringFormatter_id = loadFF("entrypoint_function=EntryPoint___StringFormatter___StringFormatter,metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation")
	
	
	__StringFormatter_Release__StringFormatter_id = loadFF("metaffi_guest_lib=manipulation_MetaFFIGuest,module=manipulation,entrypoint_function=EntryPoint___StringFormatter_Release__StringFormatter")
	
	
	
}

func fromCDTToGo(data *C.struct_cdt, i int) interface{}{
	
	var res interface{}
	index := C.int(i)
	in_res_cdt := C.get_cdt(data, index)
	res_type := C.get_cdt_type(in_res_cdt)
	switch res_type{

		case 32768: // handle
			pcdt_in_handle_res := ((*C.struct_cdt_metaffi_handle)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_handle = pcdt_in_handle_res.val
			
			if in_res == C.get_null_handle(){
				return nil
			}

			res = GetObject(Handle(in_res))
			if res == nil{ // handle belongs to another language
				res = Handle(in_res)
			}

		case 98304: // []Handle
			pcdt_in_handle_res := ((*C.struct_cdt_metaffi_handle_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_handle = pcdt_in_handle_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_handle_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_handle_res.dimensions - TODO: not used until multi-dimensions support!

			res_typed := make([]interface{}, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_handle_element(in_res, C.int(i))

				val_obj := GetObject(Handle(val))
				if val_obj == nil{ // handle belongs to
					res_typed = append(res_typed, Handle(val))
				} else {
					res_typed = append(res_typed, val_obj)
				}
			}
			res = res_typed

		
		case 1: // float64
			pcdt_in_float64_res := ((*C.struct_cdt_metaffi_float64)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_float64 = pcdt_in_float64_res.val
			
			res = float64(in_res)

		
		case 2: // float32
			pcdt_in_float32_res := ((*C.struct_cdt_metaffi_float32)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_float32 = pcdt_in_float32_res.val
			
			res = float32(in_res)

		
		case 4: // int8
			pcdt_in_int8_res := ((*C.struct_cdt_metaffi_int8)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_int8 = pcdt_in_int8_res.val
			
			res = int8(in_res)

		
		case 8: // int16
			pcdt_in_int16_res := ((*C.struct_cdt_metaffi_int16)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_int16 = pcdt_in_int16_res.val
			
			res = int16(in_res)

		
		case 16: // int32
			pcdt_in_int32_res := ((*C.struct_cdt_metaffi_int32)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_int32 = pcdt_in_int32_res.val
			
			res = int32(in_res)

		
		case 32: // int64
			pcdt_in_int64_res := ((*C.struct_cdt_metaffi_int64)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_int64 = pcdt_in_int64_res.val
			
			res = int64(in_res)

		
		case 64: // uint8
			pcdt_in_uint8_res := ((*C.struct_cdt_metaffi_uint8)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_uint8 = pcdt_in_uint8_res.val
			
			res = uint8(in_res)

		
		case 128: // uint16
			pcdt_in_uint16_res := ((*C.struct_cdt_metaffi_uint16)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_uint16 = pcdt_in_uint16_res.val
			
			res = uint16(in_res)

		
		case 256: // uint32
			pcdt_in_uint32_res := ((*C.struct_cdt_metaffi_uint32)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_uint32 = pcdt_in_uint32_res.val
			
			res = uint32(in_res)

		
		case 512: // uint64
			pcdt_in_uint64_res := ((*C.struct_cdt_metaffi_uint64)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_uint64 = pcdt_in_uint64_res.val
			
			res = uint64(in_res)

		

		
		case 65537: // []float64
			pcdt_in_float64_res := ((*C.struct_cdt_metaffi_float64_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_float64 = pcdt_in_float64_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_float64_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_float64_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]float64, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_float64_element(in_res, C.int(i))
				res_typed = append(res_typed, float64(val))
			}
			res = res_typed
		
		case 65538: // []float32
			pcdt_in_float32_res := ((*C.struct_cdt_metaffi_float32_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_float32 = pcdt_in_float32_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_float32_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_float32_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]float32, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_float32_element(in_res, C.int(i))
				res_typed = append(res_typed, float32(val))
			}
			res = res_typed
		
		case 65540: // []int8
			pcdt_in_int8_res := ((*C.struct_cdt_metaffi_int8_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_int8 = pcdt_in_int8_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_int8_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_int8_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]int8, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_int8_element(in_res, C.int(i))
				res_typed = append(res_typed, int8(val))
			}
			res = res_typed
		
		case 65544: // []int16
			pcdt_in_int16_res := ((*C.struct_cdt_metaffi_int16_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_int16 = pcdt_in_int16_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_int16_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_int16_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]int16, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_int16_element(in_res, C.int(i))
				res_typed = append(res_typed, int16(val))
			}
			res = res_typed
		
		case 65552: // []int32
			pcdt_in_int32_res := ((*C.struct_cdt_metaffi_int32_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_int32 = pcdt_in_int32_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_int32_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_int32_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]int32, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_int32_element(in_res, C.int(i))
				res_typed = append(res_typed, int32(val))
			}
			res = res_typed
		
		case 65568: // []int64
			pcdt_in_int64_res := ((*C.struct_cdt_metaffi_int64_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_int64 = pcdt_in_int64_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_int64_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_int64_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]int64, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_int64_element(in_res, C.int(i))
				res_typed = append(res_typed, int64(val))
			}
			res = res_typed
		
		case 65600: // []uint8
			pcdt_in_uint8_res := ((*C.struct_cdt_metaffi_uint8_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_uint8 = pcdt_in_uint8_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_uint8_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_uint8_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]uint8, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_uint8_element(in_res, C.int(i))
				res_typed = append(res_typed, uint8(val))
			}
			res = res_typed
		
		case 65664: // []uint16
			pcdt_in_uint16_res := ((*C.struct_cdt_metaffi_uint16_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_uint16 = pcdt_in_uint16_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_uint16_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_uint16_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]uint16, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_uint16_element(in_res, C.int(i))
				res_typed = append(res_typed, uint16(val))
			}
			res = res_typed
		
		case 65792: // []uint32
			pcdt_in_uint32_res := ((*C.struct_cdt_metaffi_uint32_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_uint32 = pcdt_in_uint32_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_uint32_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_uint32_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]uint32, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_uint32_element(in_res, C.int(i))
				res_typed = append(res_typed, uint32(val))
			}
			res = res_typed
		
		case 66048: // []uint64
			pcdt_in_uint64_res := ((*C.struct_cdt_metaffi_uint64_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_uint64 = pcdt_in_uint64_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_uint64_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_uint64_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]uint64, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_uint64_element(in_res, C.int(i))
				res_typed = append(res_typed, uint64(val))
			}
			res = res_typed
		

		
		case 4096: // string8
			in_res_cdt := C.get_cdt(data, index)
			pcdt_in_string8_res := ((*C.struct_cdt_metaffi_string8)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res_len C.metaffi_size = pcdt_in_string8_res.length
			var in_res C.metaffi_string8 = pcdt_in_string8_res.val
		
			res = C.GoStringN(in_res, C.int(in_res_len))
		

		
		case 69632: // []string8
			in_res_cdt := C.get_cdt(data, index)
			pcdt_in_string8_res := ((*C.struct_cdt_metaffi_string8_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
		
			var in_res *C.metaffi_string8 = pcdt_in_string8_res.vals
			var in_res_sizes *C.metaffi_size = pcdt_in_string8_res.vals_sizes
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_string8_res.dimensions_lengths
			//var in_res_dimensions C.metaffi_size = pcdt_in_string8_res.dimensions - TODO: not used until multi-dimensions support!
		
			res_typed := make([]string, 0, int(C.get_int_item(in_res_dimensions_lengths, 0)))
			for i:=C.int(0) ; i<C.int(C.get_int_item(in_res_dimensions_lengths, 0)) ; i++{
				var str_size C.metaffi_size
				str := C.get_metaffi_string8_element(in_res, C.int(i), in_res_sizes, &str_size)
				res_typed = append(res_typed, C.GoStringN(str, C.int(str_size)))
			}
			res = res_typed
		


		case 1024: // bool
			in_res_cdt := C.get_cdt(data, index)
			pcdt_in_bool_res := ((*C.struct_cdt_metaffi_bool)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res C.metaffi_bool = pcdt_in_bool_res.val
			
			res = in_res != C.metaffi_bool(0)

		case 66560: // []bool
			in_res_cdt := C.get_cdt(data, index)
			pcdt_in_bool_res := ((*C.struct_cdt_metaffi_bool_array)(C.convert_union_to_ptr(unsafe.Pointer(&in_res_cdt.cdt_val))))
			var in_res *C.metaffi_bool = pcdt_in_bool_res.vals
			var in_res_dimensions_lengths *C.metaffi_size = pcdt_in_bool_res.dimensions_lengths
			// var in_res_dimensions C.metaffi_size = pcdt_in_bool_res.dimensions - TODO: not used until multi-dimensions support!
			
			res_typed := make([]bool, 0)
			for i:=C.int(0) ; i<C.int(C.int(C.get_int_item(in_res_dimensions_lengths, 0))) ; i++{
				val := C.get_metaffi_bool_element(in_res, C.int(i))
				var bval bool
				if val != 0 { bval = true } else { bval = false }
				res_typed = append(res_typed, bval)
			}

			res = res_typed

		default:
			panic(fmt.Errorf("Return value %v is not of a supported type, but of type: %v", "res", res_type))
	}

	return res
}

func fromGoToCDT(input interface{}, data *C.struct_cdt, i int){

	index := C.int(i)
	switch input.(type) {

		
		case Handle:
			out_input := C.metaffi_handle(input.(Handle))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_handle_type)
			out_input_cdt.free_required = 1
			pcdt_out_Handle_input := ((*C.struct_cdt_metaffi_handle)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_Handle_input.val = out_input

		
		case float64:
			out_input := C.metaffi_float64(input.(float64))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_float64_type)
			out_input_cdt.free_required = 1
			pcdt_out_float64_input := ((*C.struct_cdt_metaffi_float64)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_float64_input.val = out_input

		
		case float32:
			out_input := C.metaffi_float32(input.(float32))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_float32_type)
			out_input_cdt.free_required = 1
			pcdt_out_float32_input := ((*C.struct_cdt_metaffi_float32)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_float32_input.val = out_input

		
		case int8:
			out_input := C.metaffi_int8(input.(int8))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int8_type)
			out_input_cdt.free_required = 1
			pcdt_out_int8_input := ((*C.struct_cdt_metaffi_int8)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int8_input.val = out_input

		
		case int16:
			out_input := C.metaffi_int16(input.(int16))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int16_type)
			out_input_cdt.free_required = 1
			pcdt_out_int16_input := ((*C.struct_cdt_metaffi_int16)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int16_input.val = out_input

		
		case int32:
			out_input := C.metaffi_int32(input.(int32))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int32_type)
			out_input_cdt.free_required = 1
			pcdt_out_int32_input := ((*C.struct_cdt_metaffi_int32)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int32_input.val = out_input

		
		case int64:
			out_input := C.metaffi_int64(input.(int64))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int64_type)
			out_input_cdt.free_required = 1
			pcdt_out_int64_input := ((*C.struct_cdt_metaffi_int64)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int64_input.val = out_input

		
		case uint8:
			out_input := C.metaffi_uint8(input.(uint8))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_uint8_type)
			out_input_cdt.free_required = 1
			pcdt_out_uint8_input := ((*C.struct_cdt_metaffi_uint8)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_uint8_input.val = out_input

		
		case uint16:
			out_input := C.metaffi_uint16(input.(uint16))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_uint16_type)
			out_input_cdt.free_required = 1
			pcdt_out_uint16_input := ((*C.struct_cdt_metaffi_uint16)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_uint16_input.val = out_input

		
		case uint32:
			out_input := C.metaffi_uint32(input.(uint32))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_uint32_type)
			out_input_cdt.free_required = 1
			pcdt_out_uint32_input := ((*C.struct_cdt_metaffi_uint32)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_uint32_input.val = out_input

		
		case uint64:
			out_input := C.metaffi_uint64(input.(uint64))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_uint64_type)
			out_input_cdt.free_required = 1
			pcdt_out_uint64_input := ((*C.struct_cdt_metaffi_uint64)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_uint64_input.val = out_input

		
		

		
		case []Handle:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]Handle)))
		
			out_input := (*C.metaffi_handle)(C.malloc(C.ulong(len(input.([]Handle)))*C.sizeof_metaffi_handle))
			for i, val := range input.([]Handle){
				C.set_metaffi_handle_element(out_input, C.int(i), C.metaffi_handle(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_handle_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_Handle_input := ((*C.struct_cdt_metaffi_handle_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_Handle_input.vals = out_input
			pcdt_out_Handle_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_Handle_input.dimensions = out_input_dimensions

		
		case []float64:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]float64)))
		
			out_input := (*C.metaffi_float64)(C.malloc(C.ulong(len(input.([]float64)))*C.sizeof_metaffi_float64))
			for i, val := range input.([]float64){
				C.set_metaffi_float64_element(out_input, C.int(i), C.metaffi_float64(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_float64_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_float64_input := ((*C.struct_cdt_metaffi_float64_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_float64_input.vals = out_input
			pcdt_out_float64_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_float64_input.dimensions = out_input_dimensions

		
		case []float32:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]float32)))
		
			out_input := (*C.metaffi_float32)(C.malloc(C.ulong(len(input.([]float32)))*C.sizeof_metaffi_float32))
			for i, val := range input.([]float32){
				C.set_metaffi_float32_element(out_input, C.int(i), C.metaffi_float32(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_float32_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_float32_input := ((*C.struct_cdt_metaffi_float32_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_float32_input.vals = out_input
			pcdt_out_float32_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_float32_input.dimensions = out_input_dimensions

		
		case []int8:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]int8)))
		
			out_input := (*C.metaffi_int8)(C.malloc(C.ulong(len(input.([]int8)))*C.sizeof_metaffi_int8))
			for i, val := range input.([]int8){
				C.set_metaffi_int8_element(out_input, C.int(i), C.metaffi_int8(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int8_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_int8_input := ((*C.struct_cdt_metaffi_int8_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int8_input.vals = out_input
			pcdt_out_int8_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_int8_input.dimensions = out_input_dimensions

		
		case []int16:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]int16)))
		
			out_input := (*C.metaffi_int16)(C.malloc(C.ulong(len(input.([]int16)))*C.sizeof_metaffi_int16))
			for i, val := range input.([]int16){
				C.set_metaffi_int16_element(out_input, C.int(i), C.metaffi_int16(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int16_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_int16_input := ((*C.struct_cdt_metaffi_int16_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int16_input.vals = out_input
			pcdt_out_int16_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_int16_input.dimensions = out_input_dimensions

		
		case []int32:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]int32)))
		
			out_input := (*C.metaffi_int32)(C.malloc(C.ulong(len(input.([]int32)))*C.sizeof_metaffi_int32))
			for i, val := range input.([]int32){
				C.set_metaffi_int32_element(out_input, C.int(i), C.metaffi_int32(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int32_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_int32_input := ((*C.struct_cdt_metaffi_int32_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int32_input.vals = out_input
			pcdt_out_int32_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_int32_input.dimensions = out_input_dimensions

		
		case []int64:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]int64)))
		
			out_input := (*C.metaffi_int64)(C.malloc(C.ulong(len(input.([]int64)))*C.sizeof_metaffi_int64))
			for i, val := range input.([]int64){
				C.set_metaffi_int64_element(out_input, C.int(i), C.metaffi_int64(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int64_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_int64_input := ((*C.struct_cdt_metaffi_int64_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int64_input.vals = out_input
			pcdt_out_int64_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_int64_input.dimensions = out_input_dimensions

		
		case []uint8:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]uint8)))
		
			out_input := (*C.metaffi_uint8)(C.malloc(C.ulong(len(input.([]uint8)))*C.sizeof_metaffi_uint8))
			for i, val := range input.([]uint8){
				C.set_metaffi_uint8_element(out_input, C.int(i), C.metaffi_uint8(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_uint8_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_uint8_input := ((*C.struct_cdt_metaffi_uint8_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_uint8_input.vals = out_input
			pcdt_out_uint8_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_uint8_input.dimensions = out_input_dimensions

		
		case []uint16:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]uint16)))
		
			out_input := (*C.metaffi_uint16)(C.malloc(C.ulong(len(input.([]uint16)))*C.sizeof_metaffi_uint16))
			for i, val := range input.([]uint16){
				C.set_metaffi_uint16_element(out_input, C.int(i), C.metaffi_uint16(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_uint16_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_uint16_input := ((*C.struct_cdt_metaffi_uint16_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_uint16_input.vals = out_input
			pcdt_out_uint16_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_uint16_input.dimensions = out_input_dimensions

		
		case []uint32:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]uint32)))
		
			out_input := (*C.metaffi_uint32)(C.malloc(C.ulong(len(input.([]uint32)))*C.sizeof_metaffi_uint32))
			for i, val := range input.([]uint32){
				C.set_metaffi_uint32_element(out_input, C.int(i), C.metaffi_uint32(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_uint32_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_uint32_input := ((*C.struct_cdt_metaffi_uint32_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_uint32_input.vals = out_input
			pcdt_out_uint32_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_uint32_input.dimensions = out_input_dimensions

		
		case []uint64:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]uint64)))
		
			out_input := (*C.metaffi_uint64)(C.malloc(C.ulong(len(input.([]uint64)))*C.sizeof_metaffi_uint64))
			for i, val := range input.([]uint64){
				C.set_metaffi_uint64_element(out_input, C.int(i), C.metaffi_uint64(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_uint64_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_uint64_input := ((*C.struct_cdt_metaffi_uint64_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_uint64_input.vals = out_input
			pcdt_out_uint64_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_uint64_input.dimensions = out_input_dimensions

		

		case int:
			out_input := C.metaffi_int64(int64(input.(int)))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int64_type)
			out_input_cdt.free_required = 1
			pcdt_out_int64_input := ((*C.struct_cdt_metaffi_int64)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int64_input.val = out_input

		case []int:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.ulong(len(input.([]int)))
		
			out_input := (*C.metaffi_int64)(C.malloc(C.ulong(len(input.([]int)))*C.sizeof_metaffi_int64))
			for i, val := range input.([]int){
				C.set_metaffi_int64_element(out_input, C.int(i), C.metaffi_int64(val))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_int64_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_int64_input := ((*C.struct_cdt_metaffi_int64_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_int64_input.vals = out_input
			pcdt_out_int64_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_int64_input.dimensions = out_input_dimensions

		case bool:
			var out_input C.metaffi_bool
			if input.(bool) { out_input = C.metaffi_bool(1) } else { out_input = C.metaffi_bool(0) }
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_bool_type)
			out_input_cdt.free_required = 1
			pcdt_out_bool_input := ((*C.struct_cdt_metaffi_bool)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_bool_input.val = out_input

		case string:
			out_input_len := C.metaffi_size(C.ulong(len(input.(string))))
			out_input := C.CString(input.(string))
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_string8_type)
			out_input_cdt.free_required = 1
			pcdt_out_string8_input := ((*C.struct_cdt_metaffi_string8)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_string8_input.val = out_input
			pcdt_out_string8_input.length = out_input_len

		case []bool:
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size))
			*out_input_dimensions_lengths = C.metaffi_size(len(input.([]bool)))
		
			out_input := (*C.metaffi_bool)(C.malloc(C.metaffi_size(len(input.([]bool)))*C.sizeof_metaffi_bool))
			for i, val := range input.([]bool){
				var bval C.metaffi_bool
				if val { bval = C.metaffi_bool(1) } else { bval = C.metaffi_bool(0) }
				C.set_metaffi_bool_element(out_input, C.int(i), C.metaffi_bool(bval))
			}
		
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_bool_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_bool_input := ((*C.struct_cdt_metaffi_bool_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_bool_input.vals = out_input
			pcdt_out_bool_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_bool_input.dimensions = out_input_dimensions

		case []string:
			out_input := (*C.metaffi_string8)(C.malloc(C.ulong(len(input.([]string)))*C.sizeof_metaffi_string8))
			out_input_sizes := (*C.metaffi_size)(C.malloc(C.ulong(len(input.([]string)))*C.sizeof_metaffi_size))
			out_input_dimensions := C.metaffi_size(1)
			out_input_dimensions_lengths := (*C.metaffi_size)(C.malloc(C.sizeof_metaffi_size * (out_input_dimensions)))
			*out_input_dimensions_lengths = C.metaffi_size(len(input.([]string)))
			
			for i, val := range input.([]string){
				C.set_metaffi_string8_element(out_input, out_input_sizes, C.int(i), C.metaffi_string8(C.CString(val)), C.metaffi_size(len(val)))
			}
			
			out_input_cdt := C.get_cdt(data, index)
			C.set_cdt_type(out_input_cdt, C.metaffi_string8_array_type)
			out_input_cdt.free_required = 1
			pcdt_out_string8_input := ((*C.struct_cdt_metaffi_string8_array)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
			pcdt_out_string8_input.vals = out_input
			pcdt_out_string8_input.vals_sizes = out_input_sizes
			pcdt_out_string8_input.dimensions_lengths = out_input_dimensions_lengths
			pcdt_out_string8_input.dimensions = out_input_dimensions
			
		default:
			
			if input == nil{ // return handle "0"
				out_input := C.metaffi_handle(uintptr(0))
				out_input_cdt := C.get_cdt(data, index)
				C.set_cdt_type(out_input_cdt, C.metaffi_handle_type)
				out_input_cdt.free_required = 0
				pcdt_out_handle_input := ((*C.struct_cdt_metaffi_handle)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
				pcdt_out_handle_input.val = out_input
				return
			}

			// check if the object is type of a primitive
			inputVal := reflect.ValueOf(input)
			inputType := reflect.TypeOf(input)
			switch inputType.Kind(){
				case reflect.Bool: fromGoToCDT(bool(inputVal.Bool()), data, i); return

				case reflect.Float32: fromGoToCDT(float32(inputVal.Float()), data, i); return
				case reflect.Float64: fromGoToCDT(float64(inputVal.Float()), data, i); return
				
				case reflect.Int8: fromGoToCDT(int8(inputVal.Int()), data, i); return
				case reflect.Int16: fromGoToCDT(int16(inputVal.Int()), data, i); return
				case reflect.Int32: fromGoToCDT(int32(inputVal.Int()), data, i); return
				case reflect.Int: fallthrough
				case reflect.Int64: fromGoToCDT(int64(inputVal.Int()), data, i); return

				case reflect.Uint8: fromGoToCDT(uint8(inputVal.Uint()), data, i); return
				case reflect.Uint16: fromGoToCDT(uint16(inputVal.Uint()), data, i); return
				case reflect.Uint32: fromGoToCDT(uint32(inputVal.Uint()), data, i); return
				case reflect.Uint: fallthrough
				case reflect.Uint64: fromGoToCDT(uint64(inputVal.Uint()), data, i); return

				case reflect.Uintptr: fromGoToCDT(uint64(inputVal.UnsafeAddr()), data, i); return

				case reflect.String: fromGoToCDT(string(inputVal.String()), data, i); return

				case reflect.Slice:
					switch inputType.Elem().Kind(){
						case reflect.Float32:
							dstSlice := make([]float32, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = float32(inputVal.Index(i).Float()) }
							fromGoToCDT(dstSlice, data, i)
							return

						case reflect.Float64:
							dstSlice := make([]float64, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = float64(inputVal.Index(i).Float()) }
							fromGoToCDT(dstSlice, data, i)
							return

						case reflect.Bool:
							dstSlice := make([]bool, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = inputVal.Index(i).Bool() }
							fromGoToCDT(dstSlice, data, i)
							return
				
						case reflect.Int8:
							dstSlice := make([]int8, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = int8(inputVal.Index(i).Int()) }
							fromGoToCDT(dstSlice, data, i)
							return
							
						case reflect.Int16:
							dstSlice := make([]int16, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = int16(inputVal.Index(i).Int()) }
							fromGoToCDT(dstSlice, data, i)
							return

						case reflect.Int32:
							dstSlice := make([]int32, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = int32(inputVal.Index(i).Int()) }
							fromGoToCDT(dstSlice, data, i)
							return

						case reflect.Int: fallthrough
						case reflect.Int64:
							dstSlice := make([]int64, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = int64(inputVal.Index(i).Int()) }
							fromGoToCDT(dstSlice, data, i)
							return
		
						case reflect.Uint8: fromGoToCDT(uint8(inputVal.Uint()), data, i)
							dstSlice := make([]uint8, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = uint8(inputVal.Index(i).Uint()) }
							fromGoToCDT(dstSlice, data, i)
							return

						case reflect.Uint16: fromGoToCDT(uint16(inputVal.Uint()), data, i)
							dstSlice := make([]uint16, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = uint16(inputVal.Index(i).Uint()) }
							fromGoToCDT(dstSlice, data, i)
							return

						case reflect.Uint32:
							dstSlice := make([]uint16, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = uint16(inputVal.Index(i).Uint()) }
							fromGoToCDT(dstSlice, data, i)
							return

						case reflect.Uint: fallthrough
						case reflect.Uint64:
							dstSlice := make([]uint64, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = uint64(inputVal.Index(i).Uint()) }
							fromGoToCDT(dstSlice, data, i)
							return
		
						case reflect.Uintptr:
							dstSlice := make([]uint64, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = uint64(inputVal.Index(i).UnsafeAddr()) }
							fromGoToCDT(dstSlice, data, i)
							return
		
						case reflect.String:
							dstSlice := make([]string, inputVal.Len(), inputVal.Cap())
							for i:=0 ; i < inputVal.Len() ; i++{ dstSlice[i] = string(inputVal.Index(i).String()) }
							fromGoToCDT(dstSlice, data, i)
							return
					}

					fallthrough // if no kind matched, treat as handle

				default:
					input_handle := SetObject(input) // if already in table, return existing handle
					
					out_input := C.metaffi_handle(input_handle)
					out_input_cdt := C.get_cdt(data, index)
					C.set_cdt_type(out_input_cdt, C.metaffi_handle_type)
					out_input_cdt.free_required = 1
					pcdt_out_handle_input := ((*C.struct_cdt_metaffi_handle)(C.convert_union_to_ptr(unsafe.Pointer(&out_input_cdt.cdt_val))))
					pcdt_out_handle_input.val = out_input
			}
	}
}







func GetCAMELCASEREPLACERE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetCAMEL_CASE_REPLACE_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	CAMEL_CASE_REPLACE_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var CAMEL_CASE_REPLACE_RE interface{}
	
	if CAMEL_CASE_REPLACE_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := CAMEL_CASE_REPLACE_REAsInterface.(Handle); ok{ // None Go object			
			CAMEL_CASE_REPLACE_RE = handle{ h: obj }			
		} else {
			CAMEL_CASE_REPLACE_RE = interface{}(CAMEL_CASE_REPLACE_REAsInterface.(interface{}))
		}
		

		
	}

	

	return CAMEL_CASE_REPLACE_RE, nil
}


func SetCAMELCASEREPLACERE(CAMEL_CASE_REPLACE_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(CAMEL_CASE_REPLACE_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetCAMEL_CASE_REPLACE_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetCAMELCASETESTRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetCAMEL_CASE_TEST_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	CAMEL_CASE_TEST_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var CAMEL_CASE_TEST_RE interface{}
	
	if CAMEL_CASE_TEST_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := CAMEL_CASE_TEST_REAsInterface.(Handle); ok{ // None Go object			
			CAMEL_CASE_TEST_RE = handle{ h: obj }			
		} else {
			CAMEL_CASE_TEST_RE = interface{}(CAMEL_CASE_TEST_REAsInterface.(interface{}))
		}
		

		
	}

	

	return CAMEL_CASE_TEST_RE, nil
}


func SetCAMELCASETESTRE(CAMEL_CASE_TEST_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(CAMEL_CASE_TEST_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetCAMEL_CASE_TEST_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetCREDITCARDS() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetCREDIT_CARDS_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	CREDIT_CARDSAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var CREDIT_CARDS interface{}
	
	if CREDIT_CARDSAsInterface != nil{
		 		
		
		
		
		if obj, ok := CREDIT_CARDSAsInterface.(Handle); ok{ // None Go object			
			CREDIT_CARDS = handle{ h: obj }			
		} else {
			CREDIT_CARDS = interface{}(CREDIT_CARDSAsInterface.(interface{}))
		}
		

		
	}

	

	return CREDIT_CARDS, nil
}


func SetCREDITCARDS(CREDIT_CARDS interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(CREDIT_CARDS, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetCREDIT_CARDS_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetEMAILSRAWSTRING() (instance string, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetEMAILS_RAW_STRING_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	EMAILS_RAW_STRINGAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var EMAILS_RAW_STRING string
	
	if EMAILS_RAW_STRINGAsInterface != nil{
		
		EMAILS_RAW_STRING = string(EMAILS_RAW_STRINGAsInterface.(string))
		
	}

	

	return EMAILS_RAW_STRING, nil
}


func SetEMAILSRAWSTRING(EMAILS_RAW_STRING string) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(EMAILS_RAW_STRING, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetEMAILS_RAW_STRING_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetEMAILSRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetEMAILS_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	EMAILS_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var EMAILS_RE interface{}
	
	if EMAILS_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := EMAILS_REAsInterface.(Handle); ok{ // None Go object			
			EMAILS_RE = handle{ h: obj }			
		} else {
			EMAILS_RE = interface{}(EMAILS_REAsInterface.(interface{}))
		}
		

		
	}

	

	return EMAILS_RE, nil
}


func SetEMAILSRE(EMAILS_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(EMAILS_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetEMAILS_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetEMAILRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetEMAIL_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	EMAIL_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var EMAIL_RE interface{}
	
	if EMAIL_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := EMAIL_REAsInterface.(Handle); ok{ // None Go object			
			EMAIL_RE = handle{ h: obj }			
		} else {
			EMAIL_RE = interface{}(EMAIL_REAsInterface.(interface{}))
		}
		

		
	}

	

	return EMAIL_RE, nil
}


func SetEMAILRE(EMAIL_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(EMAIL_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetEMAIL_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetESCAPEDATSIGN() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetESCAPED_AT_SIGN_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ESCAPED_AT_SIGNAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var ESCAPED_AT_SIGN interface{}
	
	if ESCAPED_AT_SIGNAsInterface != nil{
		 		
		
		
		
		if obj, ok := ESCAPED_AT_SIGNAsInterface.(Handle); ok{ // None Go object			
			ESCAPED_AT_SIGN = handle{ h: obj }			
		} else {
			ESCAPED_AT_SIGN = interface{}(ESCAPED_AT_SIGNAsInterface.(interface{}))
		}
		

		
	}

	

	return ESCAPED_AT_SIGN, nil
}


func SetESCAPEDATSIGN(ESCAPED_AT_SIGN interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(ESCAPED_AT_SIGN, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetESCAPED_AT_SIGN_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetHTMLRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetHTML_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	HTML_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var HTML_RE interface{}
	
	if HTML_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := HTML_REAsInterface.(Handle); ok{ // None Go object			
			HTML_RE = handle{ h: obj }			
		} else {
			HTML_RE = interface{}(HTML_REAsInterface.(interface{}))
		}
		

		
	}

	

	return HTML_RE, nil
}


func SetHTMLRE(HTML_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(HTML_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetHTML_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetHTMLTAGONLYRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetHTML_TAG_ONLY_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	HTML_TAG_ONLY_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var HTML_TAG_ONLY_RE interface{}
	
	if HTML_TAG_ONLY_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := HTML_TAG_ONLY_REAsInterface.(Handle); ok{ // None Go object			
			HTML_TAG_ONLY_RE = handle{ h: obj }			
		} else {
			HTML_TAG_ONLY_RE = interface{}(HTML_TAG_ONLY_REAsInterface.(interface{}))
		}
		

		
	}

	

	return HTML_TAG_ONLY_RE, nil
}


func SetHTMLTAGONLYRE(HTML_TAG_ONLY_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(HTML_TAG_ONLY_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetHTML_TAG_ONLY_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetINSENSITIVELOCALERE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetINSENSITIVE_LOCALE_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	INSENSITIVE_LOCALE_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var INSENSITIVE_LOCALE_RE interface{}
	
	if INSENSITIVE_LOCALE_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := INSENSITIVE_LOCALE_REAsInterface.(Handle); ok{ // None Go object			
			INSENSITIVE_LOCALE_RE = handle{ h: obj }			
		} else {
			INSENSITIVE_LOCALE_RE = interface{}(INSENSITIVE_LOCALE_REAsInterface.(interface{}))
		}
		

		
	}

	

	return INSENSITIVE_LOCALE_RE, nil
}


func SetINSENSITIVELOCALERE(INSENSITIVE_LOCALE_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(INSENSITIVE_LOCALE_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetINSENSITIVE_LOCALE_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetIPV6RE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetIP_V6_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	IP_V6_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var IP_V6_RE interface{}
	
	if IP_V6_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := IP_V6_REAsInterface.(Handle); ok{ // None Go object			
			IP_V6_RE = handle{ h: obj }			
		} else {
			IP_V6_RE = interface{}(IP_V6_REAsInterface.(interface{}))
		}
		

		
	}

	

	return IP_V6_RE, nil
}


func SetIPV6RE(IP_V6_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(IP_V6_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetIP_V6_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetJSONWRAPPERRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetJSON_WRAPPER_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	JSON_WRAPPER_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var JSON_WRAPPER_RE interface{}
	
	if JSON_WRAPPER_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := JSON_WRAPPER_REAsInterface.(Handle); ok{ // None Go object			
			JSON_WRAPPER_RE = handle{ h: obj }			
		} else {
			JSON_WRAPPER_RE = interface{}(JSON_WRAPPER_REAsInterface.(interface{}))
		}
		

		
	}

	

	return JSON_WRAPPER_RE, nil
}


func SetJSONWRAPPERRE(JSON_WRAPPER_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(JSON_WRAPPER_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetJSON_WRAPPER_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetLOCALERE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetLOCALE_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	LOCALE_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var LOCALE_RE interface{}
	
	if LOCALE_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := LOCALE_REAsInterface.(Handle); ok{ // None Go object			
			LOCALE_RE = handle{ h: obj }			
		} else {
			LOCALE_RE = interface{}(LOCALE_REAsInterface.(interface{}))
		}
		

		
	}

	

	return LOCALE_RE, nil
}


func SetLOCALERE(LOCALE_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(LOCALE_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetLOCALE_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetMARGINRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetMARGIN_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	MARGIN_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var MARGIN_RE interface{}
	
	if MARGIN_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := MARGIN_REAsInterface.(Handle); ok{ // None Go object			
			MARGIN_RE = handle{ h: obj }			
		} else {
			MARGIN_RE = interface{}(MARGIN_REAsInterface.(interface{}))
		}
		

		
	}

	

	return MARGIN_RE, nil
}


func SetMARGINRE(MARGIN_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(MARGIN_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetMARGIN_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetNOLETTERSORNUMBERSRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetNO_LETTERS_OR_NUMBERS_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	NO_LETTERS_OR_NUMBERS_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var NO_LETTERS_OR_NUMBERS_RE interface{}
	
	if NO_LETTERS_OR_NUMBERS_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := NO_LETTERS_OR_NUMBERS_REAsInterface.(Handle); ok{ // None Go object			
			NO_LETTERS_OR_NUMBERS_RE = handle{ h: obj }			
		} else {
			NO_LETTERS_OR_NUMBERS_RE = interface{}(NO_LETTERS_OR_NUMBERS_REAsInterface.(interface{}))
		}
		

		
	}

	

	return NO_LETTERS_OR_NUMBERS_RE, nil
}


func SetNOLETTERSORNUMBERSRE(NO_LETTERS_OR_NUMBERS_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(NO_LETTERS_OR_NUMBERS_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetNO_LETTERS_OR_NUMBERS_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetNUMBERRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetNUMBER_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	NUMBER_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var NUMBER_RE interface{}
	
	if NUMBER_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := NUMBER_REAsInterface.(Handle); ok{ // None Go object			
			NUMBER_RE = handle{ h: obj }			
		} else {
			NUMBER_RE = interface{}(NUMBER_REAsInterface.(interface{}))
		}
		

		
	}

	

	return NUMBER_RE, nil
}


func SetNUMBERRE(NUMBER_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(NUMBER_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetNUMBER_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetPRETTIFYRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetPRETTIFY_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	PRETTIFY_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var PRETTIFY_RE interface{}
	
	if PRETTIFY_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := PRETTIFY_REAsInterface.(Handle); ok{ // None Go object			
			PRETTIFY_RE = handle{ h: obj }			
		} else {
			PRETTIFY_RE = interface{}(PRETTIFY_REAsInterface.(interface{}))
		}
		

		
	}

	

	return PRETTIFY_RE, nil
}


func SetPRETTIFYRE(PRETTIFY_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(PRETTIFY_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetPRETTIFY_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetSHALLOWIPV4RE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetSHALLOW_IP_V4_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	SHALLOW_IP_V4_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var SHALLOW_IP_V4_RE interface{}
	
	if SHALLOW_IP_V4_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := SHALLOW_IP_V4_REAsInterface.(Handle); ok{ // None Go object			
			SHALLOW_IP_V4_RE = handle{ h: obj }			
		} else {
			SHALLOW_IP_V4_RE = interface{}(SHALLOW_IP_V4_REAsInterface.(interface{}))
		}
		

		
	}

	

	return SHALLOW_IP_V4_RE, nil
}


func SetSHALLOWIPV4RE(SHALLOW_IP_V4_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(SHALLOW_IP_V4_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetSHALLOW_IP_V4_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetSNAKECASEREPLACEDASHRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetSNAKE_CASE_REPLACE_DASH_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	SNAKE_CASE_REPLACE_DASH_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var SNAKE_CASE_REPLACE_DASH_RE interface{}
	
	if SNAKE_CASE_REPLACE_DASH_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := SNAKE_CASE_REPLACE_DASH_REAsInterface.(Handle); ok{ // None Go object			
			SNAKE_CASE_REPLACE_DASH_RE = handle{ h: obj }			
		} else {
			SNAKE_CASE_REPLACE_DASH_RE = interface{}(SNAKE_CASE_REPLACE_DASH_REAsInterface.(interface{}))
		}
		

		
	}

	

	return SNAKE_CASE_REPLACE_DASH_RE, nil
}


func SetSNAKECASEREPLACEDASHRE(SNAKE_CASE_REPLACE_DASH_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(SNAKE_CASE_REPLACE_DASH_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetSNAKE_CASE_REPLACE_DASH_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetSNAKECASEREPLACERE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetSNAKE_CASE_REPLACE_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	SNAKE_CASE_REPLACE_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var SNAKE_CASE_REPLACE_RE interface{}
	
	if SNAKE_CASE_REPLACE_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := SNAKE_CASE_REPLACE_REAsInterface.(Handle); ok{ // None Go object			
			SNAKE_CASE_REPLACE_RE = handle{ h: obj }			
		} else {
			SNAKE_CASE_REPLACE_RE = interface{}(SNAKE_CASE_REPLACE_REAsInterface.(interface{}))
		}
		

		
	}

	

	return SNAKE_CASE_REPLACE_RE, nil
}


func SetSNAKECASEREPLACERE(SNAKE_CASE_REPLACE_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(SNAKE_CASE_REPLACE_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetSNAKE_CASE_REPLACE_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetSNAKECASETESTDASHRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetSNAKE_CASE_TEST_DASH_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	SNAKE_CASE_TEST_DASH_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var SNAKE_CASE_TEST_DASH_RE interface{}
	
	if SNAKE_CASE_TEST_DASH_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := SNAKE_CASE_TEST_DASH_REAsInterface.(Handle); ok{ // None Go object			
			SNAKE_CASE_TEST_DASH_RE = handle{ h: obj }			
		} else {
			SNAKE_CASE_TEST_DASH_RE = interface{}(SNAKE_CASE_TEST_DASH_REAsInterface.(interface{}))
		}
		

		
	}

	

	return SNAKE_CASE_TEST_DASH_RE, nil
}


func SetSNAKECASETESTDASHRE(SNAKE_CASE_TEST_DASH_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(SNAKE_CASE_TEST_DASH_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetSNAKE_CASE_TEST_DASH_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetSNAKECASETESTRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetSNAKE_CASE_TEST_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	SNAKE_CASE_TEST_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var SNAKE_CASE_TEST_RE interface{}
	
	if SNAKE_CASE_TEST_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := SNAKE_CASE_TEST_REAsInterface.(Handle); ok{ // None Go object			
			SNAKE_CASE_TEST_RE = handle{ h: obj }			
		} else {
			SNAKE_CASE_TEST_RE = interface{}(SNAKE_CASE_TEST_REAsInterface.(interface{}))
		}
		

		
	}

	

	return SNAKE_CASE_TEST_RE, nil
}


func SetSNAKECASETESTRE(SNAKE_CASE_TEST_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(SNAKE_CASE_TEST_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetSNAKE_CASE_TEST_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetSPACESRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetSPACES_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	SPACES_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var SPACES_RE interface{}
	
	if SPACES_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := SPACES_REAsInterface.(Handle); ok{ // None Go object			
			SPACES_RE = handle{ h: obj }			
		} else {
			SPACES_RE = interface{}(SPACES_REAsInterface.(interface{}))
		}
		

		
	}

	

	return SPACES_RE, nil
}


func SetSPACESRE(SPACES_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(SPACES_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetSPACES_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetURLSRAWSTRING() (instance string, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetURLS_RAW_STRING_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	URLS_RAW_STRINGAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var URLS_RAW_STRING string
	
	if URLS_RAW_STRINGAsInterface != nil{
		
		URLS_RAW_STRING = string(URLS_RAW_STRINGAsInterface.(string))
		
	}

	

	return URLS_RAW_STRING, nil
}


func SetURLSRAWSTRING(URLS_RAW_STRING string) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(URLS_RAW_STRING, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetURLS_RAW_STRING_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetURLSRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetURLS_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	URLS_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var URLS_RE interface{}
	
	if URLS_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := URLS_REAsInterface.(Handle); ok{ // None Go object			
			URLS_RE = handle{ h: obj }			
		} else {
			URLS_RE = interface{}(URLS_REAsInterface.(interface{}))
		}
		

		
	}

	

	return URLS_RE, nil
}


func SetURLSRE(URLS_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(URLS_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetURLS_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetURLRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetURL_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	URL_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var URL_RE interface{}
	
	if URL_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := URL_REAsInterface.(Handle); ok{ // None Go object			
			URL_RE = handle{ h: obj }			
		} else {
			URL_RE = interface{}(URL_REAsInterface.(interface{}))
		}
		

		
	}

	

	return URL_RE, nil
}


func SetURLRE(URL_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(URL_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetURL_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetUUIDHEXOKRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetUUID_HEX_OK_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	UUID_HEX_OK_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var UUID_HEX_OK_RE interface{}
	
	if UUID_HEX_OK_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := UUID_HEX_OK_REAsInterface.(Handle); ok{ // None Go object			
			UUID_HEX_OK_RE = handle{ h: obj }			
		} else {
			UUID_HEX_OK_RE = interface{}(UUID_HEX_OK_REAsInterface.(interface{}))
		}
		

		
	}

	

	return UUID_HEX_OK_RE, nil
}


func SetUUIDHEXOKRE(UUID_HEX_OK_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(UUID_HEX_OK_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetUUID_HEX_OK_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetUUIDRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetUUID_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	UUID_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var UUID_RE interface{}
	
	if UUID_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := UUID_REAsInterface.(Handle); ok{ // None Go object			
			UUID_RE = handle{ h: obj }			
		} else {
			UUID_RE = interface{}(UUID_REAsInterface.(interface{}))
		}
		

		
	}

	

	return UUID_RE, nil
}


func SetUUIDRE(UUID_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(UUID_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetUUID_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetUnion() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetUnion_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	UnionAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var Union interface{}
	
	if UnionAsInterface != nil{
		 		
		
		
		
		if obj, ok := UnionAsInterface.(Handle); ok{ // None Go object			
			Union = handle{ h: obj }			
		} else {
			Union = interface{}(UnionAsInterface.(interface{}))
		}
		

		
	}

	

	return Union, nil
}


func SetUnion(Union interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(Union, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetUnion_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




func GetWORDSCOUNTRE() (instance interface{}, err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(GetWORDS_COUNT_RE_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	WORDS_COUNT_REAsInterface := fromCDTToGo(return_valuesCDTS, 0)
	var WORDS_COUNT_RE interface{}
	
	if WORDS_COUNT_REAsInterface != nil{
		 		
		
		
		
		if obj, ok := WORDS_COUNT_REAsInterface.(Handle); ok{ // None Go object			
			WORDS_COUNT_RE = handle{ h: obj }			
		} else {
			WORDS_COUNT_RE = interface{}(WORDS_COUNT_REAsInterface.(interface{}))
		}
		

		
	}

	

	return WORDS_COUNT_RE, nil
}


func SetWORDSCOUNTRE(WORDS_COUNT_RE interface{}) (err error){
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	
	fromGoToCDT(WORDS_COUNT_RE, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(SetWORDS_COUNT_RE_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}




// Code to call foreign functions in module manipulation via XLLR

// Call to foreign asciify



func Asciify( input_string string) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(asciify_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign booleanize



func Booleanize( input_string string) (ret_0 bool, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(booleanize_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = bool(ret_0AsInterface.(bool))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign camel_case_to_snake




func CamelCaseToSnake( input_string interface{}, separator interface{}) (ret_0 interface{}, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 2 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	
	fromGoToCDT(separator, parametersCDTS, 1)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(camel_case_to_snake_id),
			parametersCDTS, 2,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = ret_0AsInterface
		
		
	}
	
	

	return ret_0, nil
}

// Call to foreign compress





func Compress( input_string string, encoding str , compression_level int ) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 3 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	
	fromGoToCDT(encoding, parametersCDTS, 1)
	
	fromGoToCDT(compression_level, parametersCDTS, 2)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(compress_id),
			parametersCDTS, 3,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign decompress




func Decompress( input_string string, encoding str ) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 2 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	
	fromGoToCDT(encoding, parametersCDTS, 1)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(decompress_id),
			parametersCDTS, 2,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign is_camel_case



func IsCamelCase( input_string interface{}) (ret_0 bool, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(is_camel_case_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = bool(ret_0AsInterface.(bool))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign is_full_string



func IsFullString( input_string interface{}) (ret_0 bool, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(is_full_string_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = bool(ret_0AsInterface.(bool))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign is_integer



func IsInteger( input_string string) (ret_0 bool, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(is_integer_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = bool(ret_0AsInterface.(bool))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign is_snake_case




func IsSnakeCase( input_string interface{}, separator str ) (ret_0 bool, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 2 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	
	fromGoToCDT(separator, parametersCDTS, 1)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(is_snake_case_id),
			parametersCDTS, 2,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = bool(ret_0AsInterface.(bool))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign is_string



func IsString( obj interface{}) (ret_0 bool, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(obj, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(is_string_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = bool(ret_0AsInterface.(bool))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign prettify



func Prettify( input_string string) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(prettify_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign reverse



func Reverse( input_string string) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(reverse_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign roman_decode



func RomanDecode( input_string string) (ret_0 int64, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(roman_decode_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = int64(ret_0AsInterface.(int64))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign roman_encode



func RomanEncode( input_number Union[str, int]) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_number, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(roman_encode_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign shuffle



func Shuffle( input_string string) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(shuffle_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign slugify




func Slugify( input_string string, separator str ) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 2 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	
	fromGoToCDT(separator, parametersCDTS, 1)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(slugify_id),
			parametersCDTS, 2,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign snake_case_to_camel





func SnakeCaseToCamel( input_string string, upper_case_first bool , separator str ) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 3 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	
	fromGoToCDT(upper_case_first, parametersCDTS, 1)
	
	fromGoToCDT(separator, parametersCDTS, 2)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(snake_case_to_camel_id),
			parametersCDTS, 3,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign strip_html




func StripHtml( input_string string, keep_tag_content bool ) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 2 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	
	fromGoToCDT(keep_tag_content, parametersCDTS, 1)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(strip_html_id),
			parametersCDTS, 2,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign strip_margin



func StripMargin( input_string string) (ret_0 string, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(strip_margin_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}

// Call to foreign uuid4


func Uuid4() (ret_0 interface{}, err error){

	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(uuid4_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = ret_0AsInterface
		
		
	}
	
	

	return ret_0, nil
}



type InvalidInputError struct{
	h Handle
}

func InvalidInputError( input_data interface{}) (instance *InvalidInputError, err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_data, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(InvalidInputError_InvalidInputError_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	inst := &InvalidInputError{}

	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		inst.h = ret_0AsInterface.(Handle)
	} else {
		return nil, fmt.Errorf("Object creation returned nil")
	}
		
	

	return inst, nil	
}





func (this *InvalidInputError) ReleaseInvalidInputError( this_instance interface{}) ( err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	fromGoToCDT(this.h, parametersCDTS, 0) // object
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(InvalidInputError_ReleaseInvalidInputError_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}


type __RomanNumbers struct{
	h Handle
}

func RomanNumbers() (instance *__RomanNumbers, err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(__RomanNumbers___RomanNumbers_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	inst := &__RomanNumbers{}

	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		inst.h = ret_0AsInterface.(Handle)
	} else {
		return nil, fmt.Errorf("Object creation returned nil")
	}
		
	

	return inst, nil	
}





func (this *__RomanNumbers) ReleaseRomanNumbers( this_instance interface{}) ( err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	fromGoToCDT(this.h, parametersCDTS, 0) // object
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(__RomanNumbers_Release__RomanNumbers_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}


type __StringCompressor struct{
	h Handle
}

func StringCompressor() (instance *__StringCompressor, err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 0 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(__StringCompressor___StringCompressor_id),
			parametersCDTS, 0,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	inst := &__StringCompressor{}

	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		inst.h = ret_0AsInterface.(Handle)
	} else {
		return nil, fmt.Errorf("Object creation returned nil")
	}
		
	

	return inst, nil	
}





func (this *__StringCompressor) ReleaseStringCompressor( this_instance interface{}) ( err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	fromGoToCDT(this.h, parametersCDTS, 0) // object
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(__StringCompressor_Release__StringCompressor_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}


type __StringFormatter struct{
	h Handle
}

func StringFormatter( input_string interface{}) (instance *__StringFormatter, err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	
	fromGoToCDT(input_string, parametersCDTS, 0)
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(__StringFormatter___StringFormatter_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	inst := &__StringFormatter{}

	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		inst.h = ret_0AsInterface.(Handle)
	} else {
		return nil, fmt.Errorf("Object creation returned nil")
	}
		
	

	return inst, nil	
}




func (this *__StringFormatter) Format() (ret_0 string, err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 1 )
	
	// parameters
	fromGoToCDT(this.h, parametersCDTS, 0) // object
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(__StringFormatter_format_id),
			parametersCDTS, 1,
			return_valuesCDTS, 1,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	
	ret_0AsInterface := fromCDTToGo(return_valuesCDTS, 0)
	if ret_0AsInterface != nil{
		
		ret_0 = string(ret_0AsInterface.(string))
		
	}
	
	

	return ret_0, nil
}


func (this *__StringFormatter) ReleaseStringFormatter( this_instance interface{}) ( err error){
	
	

	parametersCDTS := C.xllr_alloc_cdts_buffer( 1 )
	return_valuesCDTS := C.xllr_alloc_cdts_buffer( 0 )
	
	// parameters
	fromGoToCDT(this.h, parametersCDTS, 0) // object
	

	var out_err *C.char
	var out_err_len C.uint64_t
	out_err_len = C.uint64_t(0)

	C.xllr_xcall(pruntime_plugin, runtime_plugin_length,
			C.int64_t(__StringFormatter_Release__StringFormatter_id),
			parametersCDTS, 1,
			return_valuesCDTS, 0,
			&out_err, &out_err_len)

	// check errors
	if out_err_len != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_err), C.int(out_err_len))))
		return
	}
	
	

	return  nil
}





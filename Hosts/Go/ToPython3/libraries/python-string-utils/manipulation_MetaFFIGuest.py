
# Code generated by MetaFFI. Modify only in marked places.
# Guest code for manipulation.py

import traceback
import sys
import platform
import os
from typing import Any
from ctypes import *


import manipulation


"""
xllrHandle = None
def load_xllr():
	global xllrHandle
	
	if xllrHandle == None:
		xllrHandle = cdll.LoadLibrary(get_filename_to_load('xllr'))
"""

python_plugin_handle = None
def load_python_plugin():
	global python_plugin_handle
	
	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))

def get_filename_to_load(fname):
	osname = platform.system()
	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so





def EntryPoint_GetCAMEL_CASE_REPLACE_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.CAMEL_CASE_REPLACE_RE)



def EntryPoint_SetCAMEL_CASE_REPLACE_RE(val):
	ret_val_types = ()
	manipulation.CAMEL_CASE_REPLACE_RE = val
	return (None, ret_val_types)




def EntryPoint_GetCAMEL_CASE_TEST_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.CAMEL_CASE_TEST_RE)



def EntryPoint_SetCAMEL_CASE_TEST_RE(val):
	ret_val_types = ()
	manipulation.CAMEL_CASE_TEST_RE = val
	return (None, ret_val_types)




def EntryPoint_GetCREDIT_CARDS():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.CREDIT_CARDS)



def EntryPoint_SetCREDIT_CARDS(val):
	ret_val_types = ()
	manipulation.CREDIT_CARDS = val
	return (None, ret_val_types)




def EntryPoint_GetEMAILS_RAW_STRING():
	ret_val_types = (4096,)
	return (None, ret_val_types, manipulation.EMAILS_RAW_STRING)



def EntryPoint_SetEMAILS_RAW_STRING(val):
	ret_val_types = ()
	manipulation.EMAILS_RAW_STRING = val
	return (None, ret_val_types)




def EntryPoint_GetEMAILS_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.EMAILS_RE)



def EntryPoint_SetEMAILS_RE(val):
	ret_val_types = ()
	manipulation.EMAILS_RE = val
	return (None, ret_val_types)




def EntryPoint_GetEMAIL_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.EMAIL_RE)



def EntryPoint_SetEMAIL_RE(val):
	ret_val_types = ()
	manipulation.EMAIL_RE = val
	return (None, ret_val_types)




def EntryPoint_GetESCAPED_AT_SIGN():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.ESCAPED_AT_SIGN)



def EntryPoint_SetESCAPED_AT_SIGN(val):
	ret_val_types = ()
	manipulation.ESCAPED_AT_SIGN = val
	return (None, ret_val_types)




def EntryPoint_GetHTML_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.HTML_RE)



def EntryPoint_SetHTML_RE(val):
	ret_val_types = ()
	manipulation.HTML_RE = val
	return (None, ret_val_types)




def EntryPoint_GetHTML_TAG_ONLY_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.HTML_TAG_ONLY_RE)



def EntryPoint_SetHTML_TAG_ONLY_RE(val):
	ret_val_types = ()
	manipulation.HTML_TAG_ONLY_RE = val
	return (None, ret_val_types)




def EntryPoint_GetINSENSITIVE_LOCALE_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.INSENSITIVE_LOCALE_RE)



def EntryPoint_SetINSENSITIVE_LOCALE_RE(val):
	ret_val_types = ()
	manipulation.INSENSITIVE_LOCALE_RE = val
	return (None, ret_val_types)




def EntryPoint_GetIP_V6_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.IP_V6_RE)



def EntryPoint_SetIP_V6_RE(val):
	ret_val_types = ()
	manipulation.IP_V6_RE = val
	return (None, ret_val_types)




def EntryPoint_GetJSON_WRAPPER_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.JSON_WRAPPER_RE)



def EntryPoint_SetJSON_WRAPPER_RE(val):
	ret_val_types = ()
	manipulation.JSON_WRAPPER_RE = val
	return (None, ret_val_types)




def EntryPoint_GetLOCALE_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.LOCALE_RE)



def EntryPoint_SetLOCALE_RE(val):
	ret_val_types = ()
	manipulation.LOCALE_RE = val
	return (None, ret_val_types)




def EntryPoint_GetMARGIN_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.MARGIN_RE)



def EntryPoint_SetMARGIN_RE(val):
	ret_val_types = ()
	manipulation.MARGIN_RE = val
	return (None, ret_val_types)




def EntryPoint_GetNO_LETTERS_OR_NUMBERS_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.NO_LETTERS_OR_NUMBERS_RE)



def EntryPoint_SetNO_LETTERS_OR_NUMBERS_RE(val):
	ret_val_types = ()
	manipulation.NO_LETTERS_OR_NUMBERS_RE = val
	return (None, ret_val_types)




def EntryPoint_GetNUMBER_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.NUMBER_RE)



def EntryPoint_SetNUMBER_RE(val):
	ret_val_types = ()
	manipulation.NUMBER_RE = val
	return (None, ret_val_types)




def EntryPoint_GetPRETTIFY_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.PRETTIFY_RE)



def EntryPoint_SetPRETTIFY_RE(val):
	ret_val_types = ()
	manipulation.PRETTIFY_RE = val
	return (None, ret_val_types)




def EntryPoint_GetSHALLOW_IP_V4_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.SHALLOW_IP_V4_RE)



def EntryPoint_SetSHALLOW_IP_V4_RE(val):
	ret_val_types = ()
	manipulation.SHALLOW_IP_V4_RE = val
	return (None, ret_val_types)




def EntryPoint_GetSNAKE_CASE_REPLACE_DASH_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.SNAKE_CASE_REPLACE_DASH_RE)



def EntryPoint_SetSNAKE_CASE_REPLACE_DASH_RE(val):
	ret_val_types = ()
	manipulation.SNAKE_CASE_REPLACE_DASH_RE = val
	return (None, ret_val_types)




def EntryPoint_GetSNAKE_CASE_REPLACE_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.SNAKE_CASE_REPLACE_RE)



def EntryPoint_SetSNAKE_CASE_REPLACE_RE(val):
	ret_val_types = ()
	manipulation.SNAKE_CASE_REPLACE_RE = val
	return (None, ret_val_types)




def EntryPoint_GetSNAKE_CASE_TEST_DASH_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.SNAKE_CASE_TEST_DASH_RE)



def EntryPoint_SetSNAKE_CASE_TEST_DASH_RE(val):
	ret_val_types = ()
	manipulation.SNAKE_CASE_TEST_DASH_RE = val
	return (None, ret_val_types)




def EntryPoint_GetSNAKE_CASE_TEST_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.SNAKE_CASE_TEST_RE)



def EntryPoint_SetSNAKE_CASE_TEST_RE(val):
	ret_val_types = ()
	manipulation.SNAKE_CASE_TEST_RE = val
	return (None, ret_val_types)




def EntryPoint_GetSPACES_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.SPACES_RE)



def EntryPoint_SetSPACES_RE(val):
	ret_val_types = ()
	manipulation.SPACES_RE = val
	return (None, ret_val_types)




def EntryPoint_GetURLS_RAW_STRING():
	ret_val_types = (4096,)
	return (None, ret_val_types, manipulation.URLS_RAW_STRING)



def EntryPoint_SetURLS_RAW_STRING(val):
	ret_val_types = ()
	manipulation.URLS_RAW_STRING = val
	return (None, ret_val_types)




def EntryPoint_GetURLS_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.URLS_RE)



def EntryPoint_SetURLS_RE(val):
	ret_val_types = ()
	manipulation.URLS_RE = val
	return (None, ret_val_types)




def EntryPoint_GetURL_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.URL_RE)



def EntryPoint_SetURL_RE(val):
	ret_val_types = ()
	manipulation.URL_RE = val
	return (None, ret_val_types)




def EntryPoint_GetUUID_HEX_OK_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.UUID_HEX_OK_RE)



def EntryPoint_SetUUID_HEX_OK_RE(val):
	ret_val_types = ()
	manipulation.UUID_HEX_OK_RE = val
	return (None, ret_val_types)




def EntryPoint_GetUUID_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.UUID_RE)



def EntryPoint_SetUUID_RE(val):
	ret_val_types = ()
	manipulation.UUID_RE = val
	return (None, ret_val_types)




def EntryPoint_GetUnion():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.Union)



def EntryPoint_SetUnion(val):
	ret_val_types = ()
	manipulation.Union = val
	return (None, ret_val_types)




def EntryPoint_GetWORDS_COUNT_RE():
	ret_val_types = (32768,)
	return (None, ret_val_types, manipulation.WORDS_COUNT_RE)



def EntryPoint_SetWORDS_COUNT_RE(val):
	ret_val_types = ()
	manipulation.WORDS_COUNT_RE = val
	return (None, ret_val_types)






# Call to foreign asciify
def EntryPoint_asciify(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.asciify(input_string)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign booleanize
def EntryPoint_booleanize(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.booleanize(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign camel_case_to_snake
def EntryPoint_camel_case_to_snake(input_string,separator):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.camel_case_to_snake(input_string,separator)
		
		ret_val_types = (4194304,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign compress
def EntryPoint_compress(input_string,encoding,compression_level):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.compress(input_string,encoding,compression_level)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign decompress
def EntryPoint_decompress(input_string,encoding):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.decompress(input_string,encoding)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_camel_case
def EntryPoint_is_camel_case(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.is_camel_case(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_full_string
def EntryPoint_is_full_string(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.is_full_string(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_integer
def EntryPoint_is_integer(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.is_integer(input_string)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_snake_case
def EntryPoint_is_snake_case(input_string,separator):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.is_snake_case(input_string,separator)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign is_string
def EntryPoint_is_string(obj):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.is_string(obj)
		
		ret_val_types = (1024,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign prettify
def EntryPoint_prettify(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.prettify(input_string)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign reverse
def EntryPoint_reverse(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.reverse(input_string)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign roman_decode
def EntryPoint_roman_decode(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.roman_decode(input_string)
		
		ret_val_types = (32,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign roman_encode
def EntryPoint_roman_encode(input_number):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.roman_encode(input_number)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign shuffle
def EntryPoint_shuffle(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.shuffle(input_string)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign slugify
def EntryPoint_slugify(input_string,separator):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.slugify(input_string,separator)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign snake_case_to_camel
def EntryPoint_snake_case_to_camel(input_string,upper_case_first,separator):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.snake_case_to_camel(input_string,upper_case_first,separator)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign strip_html
def EntryPoint_strip_html(input_string,keep_tag_content):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.strip_html(input_string,keep_tag_content)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign strip_margin
def EntryPoint_strip_margin(input_string):
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.strip_margin(input_string)
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)


# Call to foreign uuid4
def EntryPoint_uuid4():
	#global xllrHandle

	#load_xllr()

	try:
		# call function
		ret_0 = manipulation.uuid4()
		
		ret_val_types = (4194304,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





def EntryPoint_InvalidInputError_InvalidInputError(input_data):
	try:
		# call constructor
		ret_0 = manipulation.InvalidInputError(input_data)
		
		
		ret_val_types = (32768,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







def EntryPoint_InvalidInputError_ReleaseInvalidInputError(this_instance):
	try:
		# xcall release object
		
		python_plugin_handle.release_object(this_instance)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)




def EntryPoint___RomanNumbers___RomanNumbers():
	try:
		# call constructor
		ret_0 = manipulation.__RomanNumbers()
		
		
		ret_val_types = (32768,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







def EntryPoint___RomanNumbers_Release__RomanNumbers(this_instance):
	try:
		# xcall release object
		
		python_plugin_handle.release_object(this_instance)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)




def EntryPoint___StringCompressor___StringCompressor():
	try:
		# call constructor
		ret_0 = manipulation.__StringCompressor()
		
		
		ret_val_types = (32768,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







def EntryPoint___StringCompressor_Release__StringCompressor(this_instance):
	try:
		# xcall release object
		
		python_plugin_handle.release_object(this_instance)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)




def EntryPoint___StringFormatter___StringFormatter(input_string):
	try:
		# call constructor
		ret_0 = manipulation.__StringFormatter(input_string)
		
		
		ret_val_types = (32768,)

		return ( None, ret_val_types , ret_0)

	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)





def EntryPoint___StringFormatter_format(this_instance):
	try:
		# call method
		ret_0 = this_instance.format()
		
		
		ret_val_types = (4096,)

		return ( None, ret_val_types , ret_0)
		
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)
	



def EntryPoint___StringFormatter_Release__StringFormatter(this_instance):
	try:
		# xcall release object
		
		python_plugin_handle.release_object(this_instance)
	except Exception as e:
		errdata = traceback.format_exception(*sys.exc_info())
		return ('\n'.join(errdata),)







// Code generated by MetaFFI. DO NOT EDIT.
// Host code for Logger
package Logger

import "fmt"
import "unsafe"
import . "github.com/MetaFFI/lang-plugin-go/go-runtime"



// function IDs








var LogManager_GetFACTORY_PROPERTY_NAME_id unsafe.Pointer


var LogManager_GetROOT_LOGGER_NAME_id unsafe.Pointer



var LogManager_exists_id unsafe.Pointer

var LogManager_getContext_id unsafe.Pointer

var LogManager_getContext_overload1_id unsafe.Pointer

var LogManager_getContext_overload2_id unsafe.Pointer

var LogManager_getContext_overload3_id unsafe.Pointer

var LogManager_getContext_overload4_id unsafe.Pointer

var LogManager_getContext_overload5_id unsafe.Pointer

var LogManager_getContext_overload6_id unsafe.Pointer

var LogManager_shutdown_id unsafe.Pointer

var LogManager_shutdown_overload1_id unsafe.Pointer

var LogManager_shutdown_overload2_id unsafe.Pointer

var LogManager_shutdown_overload3_id unsafe.Pointer

var LogManager_getFactory_id unsafe.Pointer

var LogManager_setFactory_id unsafe.Pointer

var LogManager_getFormatterLogger_id unsafe.Pointer

var LogManager_getFormatterLogger_overload1_id unsafe.Pointer

var LogManager_getFormatterLogger_overload2_id unsafe.Pointer

var LogManager_getFormatterLogger_overload3_id unsafe.Pointer

var LogManager_getLogger_id unsafe.Pointer

var LogManager_getLogger_overload1_id unsafe.Pointer

var LogManager_getLogger_overload2_id unsafe.Pointer

var LogManager_getLogger_overload3_id unsafe.Pointer

var LogManager_getLogger_overload4_id unsafe.Pointer

var LogManager_getLogger_overload5_id unsafe.Pointer

var LogManager_getLogger_overload6_id unsafe.Pointer

var LogManager_getLogger_overload7_id unsafe.Pointer

var LogManager_getRootLogger_id unsafe.Pointer



var LogManager_ReleaseLogManager_id unsafe.Pointer




var Logger_catching_id unsafe.Pointer

var Logger_catching_overload1_id unsafe.Pointer

var Logger_debug_id unsafe.Pointer

var Logger_debug_overload1_id unsafe.Pointer

var Logger_debug_overload2_id unsafe.Pointer

var Logger_debug_overload3_id unsafe.Pointer

var Logger_debug_overload4_id unsafe.Pointer

var Logger_debug_overload5_id unsafe.Pointer

var Logger_debug_overload6_id unsafe.Pointer

var Logger_debug_overload7_id unsafe.Pointer

var Logger_debug_overload8_id unsafe.Pointer

var Logger_debug_overload9_id unsafe.Pointer

var Logger_debug_overload10_id unsafe.Pointer

var Logger_debug_overload11_id unsafe.Pointer

var Logger_debug_overload12_id unsafe.Pointer

var Logger_debug_overload13_id unsafe.Pointer

var Logger_debug_overload14_id unsafe.Pointer

var Logger_debug_overload15_id unsafe.Pointer

var Logger_debug_overload16_id unsafe.Pointer

var Logger_debug_overload17_id unsafe.Pointer

var Logger_debug_overload18_id unsafe.Pointer

var Logger_debug_overload19_id unsafe.Pointer

var Logger_debug_overload20_id unsafe.Pointer

var Logger_debug_overload21_id unsafe.Pointer

var Logger_debug_overload22_id unsafe.Pointer

var Logger_debug_overload23_id unsafe.Pointer

var Logger_debug_overload24_id unsafe.Pointer

var Logger_debug_overload25_id unsafe.Pointer

var Logger_debug_overload26_id unsafe.Pointer

var Logger_debug_overload27_id unsafe.Pointer

var Logger_debug_overload28_id unsafe.Pointer

var Logger_debug_overload29_id unsafe.Pointer

var Logger_debug_overload30_id unsafe.Pointer

var Logger_debug_overload31_id unsafe.Pointer

var Logger_debug_overload32_id unsafe.Pointer

var Logger_debug_overload33_id unsafe.Pointer

var Logger_debug_overload34_id unsafe.Pointer

var Logger_debug_overload35_id unsafe.Pointer

var Logger_debug_overload36_id unsafe.Pointer

var Logger_debug_overload37_id unsafe.Pointer

var Logger_debug_overload38_id unsafe.Pointer

var Logger_debug_overload39_id unsafe.Pointer

var Logger_debug_overload40_id unsafe.Pointer

var Logger_debug_overload41_id unsafe.Pointer

var Logger_debug_overload42_id unsafe.Pointer

var Logger_debug_overload43_id unsafe.Pointer

var Logger_debug_overload44_id unsafe.Pointer

var Logger_debug_overload45_id unsafe.Pointer

var Logger_debug_overload46_id unsafe.Pointer

var Logger_debug_overload47_id unsafe.Pointer

var Logger_entry_id unsafe.Pointer

var Logger_entry_overload1_id unsafe.Pointer

var Logger_error_id unsafe.Pointer

var Logger_error_overload1_id unsafe.Pointer

var Logger_error_overload2_id unsafe.Pointer

var Logger_error_overload3_id unsafe.Pointer

var Logger_error_overload4_id unsafe.Pointer

var Logger_error_overload5_id unsafe.Pointer

var Logger_error_overload6_id unsafe.Pointer

var Logger_error_overload7_id unsafe.Pointer

var Logger_error_overload8_id unsafe.Pointer

var Logger_error_overload9_id unsafe.Pointer

var Logger_error_overload10_id unsafe.Pointer

var Logger_error_overload11_id unsafe.Pointer

var Logger_error_overload12_id unsafe.Pointer

var Logger_error_overload13_id unsafe.Pointer

var Logger_error_overload14_id unsafe.Pointer

var Logger_error_overload15_id unsafe.Pointer

var Logger_error_overload16_id unsafe.Pointer

var Logger_error_overload17_id unsafe.Pointer

var Logger_error_overload18_id unsafe.Pointer

var Logger_error_overload19_id unsafe.Pointer

var Logger_error_overload20_id unsafe.Pointer

var Logger_error_overload21_id unsafe.Pointer

var Logger_error_overload22_id unsafe.Pointer

var Logger_error_overload23_id unsafe.Pointer

var Logger_error_overload24_id unsafe.Pointer

var Logger_error_overload25_id unsafe.Pointer

var Logger_error_overload26_id unsafe.Pointer

var Logger_error_overload27_id unsafe.Pointer

var Logger_error_overload28_id unsafe.Pointer

var Logger_error_overload29_id unsafe.Pointer

var Logger_error_overload30_id unsafe.Pointer

var Logger_error_overload31_id unsafe.Pointer

var Logger_error_overload32_id unsafe.Pointer

var Logger_error_overload33_id unsafe.Pointer

var Logger_error_overload34_id unsafe.Pointer

var Logger_error_overload35_id unsafe.Pointer

var Logger_error_overload36_id unsafe.Pointer

var Logger_error_overload37_id unsafe.Pointer

var Logger_error_overload38_id unsafe.Pointer

var Logger_error_overload39_id unsafe.Pointer

var Logger_error_overload40_id unsafe.Pointer

var Logger_error_overload41_id unsafe.Pointer

var Logger_error_overload42_id unsafe.Pointer

var Logger_error_overload43_id unsafe.Pointer

var Logger_error_overload44_id unsafe.Pointer

var Logger_error_overload45_id unsafe.Pointer

var Logger_error_overload46_id unsafe.Pointer

var Logger_error_overload47_id unsafe.Pointer

var Logger_exit_id unsafe.Pointer

var Logger_exit_overload1_id unsafe.Pointer

var Logger_fatal_id unsafe.Pointer

var Logger_fatal_overload1_id unsafe.Pointer

var Logger_fatal_overload2_id unsafe.Pointer

var Logger_fatal_overload3_id unsafe.Pointer

var Logger_fatal_overload4_id unsafe.Pointer

var Logger_fatal_overload5_id unsafe.Pointer

var Logger_fatal_overload6_id unsafe.Pointer

var Logger_fatal_overload7_id unsafe.Pointer

var Logger_fatal_overload8_id unsafe.Pointer

var Logger_fatal_overload9_id unsafe.Pointer

var Logger_fatal_overload10_id unsafe.Pointer

var Logger_fatal_overload11_id unsafe.Pointer

var Logger_fatal_overload12_id unsafe.Pointer

var Logger_fatal_overload13_id unsafe.Pointer

var Logger_fatal_overload14_id unsafe.Pointer

var Logger_fatal_overload15_id unsafe.Pointer

var Logger_fatal_overload16_id unsafe.Pointer

var Logger_fatal_overload17_id unsafe.Pointer

var Logger_fatal_overload18_id unsafe.Pointer

var Logger_fatal_overload19_id unsafe.Pointer

var Logger_fatal_overload20_id unsafe.Pointer

var Logger_fatal_overload21_id unsafe.Pointer

var Logger_fatal_overload22_id unsafe.Pointer

var Logger_fatal_overload23_id unsafe.Pointer

var Logger_fatal_overload24_id unsafe.Pointer

var Logger_fatal_overload25_id unsafe.Pointer

var Logger_fatal_overload26_id unsafe.Pointer

var Logger_fatal_overload27_id unsafe.Pointer

var Logger_fatal_overload28_id unsafe.Pointer

var Logger_fatal_overload29_id unsafe.Pointer

var Logger_fatal_overload30_id unsafe.Pointer

var Logger_fatal_overload31_id unsafe.Pointer

var Logger_fatal_overload32_id unsafe.Pointer

var Logger_fatal_overload33_id unsafe.Pointer

var Logger_fatal_overload34_id unsafe.Pointer

var Logger_fatal_overload35_id unsafe.Pointer

var Logger_fatal_overload36_id unsafe.Pointer

var Logger_fatal_overload37_id unsafe.Pointer

var Logger_fatal_overload38_id unsafe.Pointer

var Logger_fatal_overload39_id unsafe.Pointer

var Logger_fatal_overload40_id unsafe.Pointer

var Logger_fatal_overload41_id unsafe.Pointer

var Logger_fatal_overload42_id unsafe.Pointer

var Logger_fatal_overload43_id unsafe.Pointer

var Logger_fatal_overload44_id unsafe.Pointer

var Logger_fatal_overload45_id unsafe.Pointer

var Logger_fatal_overload46_id unsafe.Pointer

var Logger_fatal_overload47_id unsafe.Pointer

var Logger_getLevel_id unsafe.Pointer

var Logger_getMessageFactory_id unsafe.Pointer

var Logger_getFlowMessageFactory_id unsafe.Pointer

var Logger_getName_id unsafe.Pointer

var Logger_info_id unsafe.Pointer

var Logger_info_overload1_id unsafe.Pointer

var Logger_info_overload2_id unsafe.Pointer

var Logger_info_overload3_id unsafe.Pointer

var Logger_info_overload4_id unsafe.Pointer

var Logger_info_overload5_id unsafe.Pointer

var Logger_info_overload6_id unsafe.Pointer

var Logger_info_overload7_id unsafe.Pointer

var Logger_info_overload8_id unsafe.Pointer

var Logger_info_overload9_id unsafe.Pointer

var Logger_info_overload10_id unsafe.Pointer

var Logger_info_overload11_id unsafe.Pointer

var Logger_info_overload12_id unsafe.Pointer

var Logger_info_overload13_id unsafe.Pointer

var Logger_info_overload14_id unsafe.Pointer

var Logger_info_overload15_id unsafe.Pointer

var Logger_info_overload16_id unsafe.Pointer

var Logger_info_overload17_id unsafe.Pointer

var Logger_info_overload18_id unsafe.Pointer

var Logger_info_overload19_id unsafe.Pointer

var Logger_info_overload20_id unsafe.Pointer

var Logger_info_overload21_id unsafe.Pointer

var Logger_info_overload22_id unsafe.Pointer

var Logger_info_overload23_id unsafe.Pointer

var Logger_info_overload24_id unsafe.Pointer

var Logger_info_overload25_id unsafe.Pointer

var Logger_info_overload26_id unsafe.Pointer

var Logger_info_overload27_id unsafe.Pointer

var Logger_info_overload28_id unsafe.Pointer

var Logger_info_overload29_id unsafe.Pointer

var Logger_info_overload30_id unsafe.Pointer

var Logger_info_overload31_id unsafe.Pointer

var Logger_info_overload32_id unsafe.Pointer

var Logger_info_overload33_id unsafe.Pointer

var Logger_info_overload34_id unsafe.Pointer

var Logger_info_overload35_id unsafe.Pointer

var Logger_info_overload36_id unsafe.Pointer

var Logger_info_overload37_id unsafe.Pointer

var Logger_info_overload38_id unsafe.Pointer

var Logger_info_overload39_id unsafe.Pointer

var Logger_info_overload40_id unsafe.Pointer

var Logger_info_overload41_id unsafe.Pointer

var Logger_info_overload42_id unsafe.Pointer

var Logger_info_overload43_id unsafe.Pointer

var Logger_info_overload44_id unsafe.Pointer

var Logger_info_overload45_id unsafe.Pointer

var Logger_info_overload46_id unsafe.Pointer

var Logger_info_overload47_id unsafe.Pointer

var Logger_isDebugEnabled_id unsafe.Pointer

var Logger_isDebugEnabled_overload1_id unsafe.Pointer

var Logger_isEnabled_id unsafe.Pointer

var Logger_isEnabled_overload1_id unsafe.Pointer

var Logger_isErrorEnabled_id unsafe.Pointer

var Logger_isErrorEnabled_overload1_id unsafe.Pointer

var Logger_isFatalEnabled_id unsafe.Pointer

var Logger_isFatalEnabled_overload1_id unsafe.Pointer

var Logger_isInfoEnabled_id unsafe.Pointer

var Logger_isInfoEnabled_overload1_id unsafe.Pointer

var Logger_isTraceEnabled_id unsafe.Pointer

var Logger_isTraceEnabled_overload1_id unsafe.Pointer

var Logger_isWarnEnabled_id unsafe.Pointer

var Logger_isWarnEnabled_overload1_id unsafe.Pointer

var Logger_log_id unsafe.Pointer

var Logger_log_overload1_id unsafe.Pointer

var Logger_log_overload2_id unsafe.Pointer

var Logger_log_overload3_id unsafe.Pointer

var Logger_log_overload4_id unsafe.Pointer

var Logger_log_overload5_id unsafe.Pointer

var Logger_log_overload6_id unsafe.Pointer

var Logger_log_overload7_id unsafe.Pointer

var Logger_log_overload8_id unsafe.Pointer

var Logger_log_overload9_id unsafe.Pointer

var Logger_log_overload10_id unsafe.Pointer

var Logger_log_overload11_id unsafe.Pointer

var Logger_log_overload12_id unsafe.Pointer

var Logger_log_overload13_id unsafe.Pointer

var Logger_log_overload14_id unsafe.Pointer

var Logger_log_overload15_id unsafe.Pointer

var Logger_log_overload16_id unsafe.Pointer

var Logger_log_overload17_id unsafe.Pointer

var Logger_log_overload18_id unsafe.Pointer

var Logger_log_overload19_id unsafe.Pointer

var Logger_log_overload20_id unsafe.Pointer

var Logger_log_overload21_id unsafe.Pointer

var Logger_log_overload22_id unsafe.Pointer

var Logger_log_overload23_id unsafe.Pointer

var Logger_log_overload24_id unsafe.Pointer

var Logger_log_overload25_id unsafe.Pointer

var Logger_log_overload26_id unsafe.Pointer

var Logger_log_overload27_id unsafe.Pointer

var Logger_log_overload28_id unsafe.Pointer

var Logger_log_overload29_id unsafe.Pointer

var Logger_log_overload30_id unsafe.Pointer

var Logger_log_overload31_id unsafe.Pointer

var Logger_log_overload32_id unsafe.Pointer

var Logger_log_overload33_id unsafe.Pointer

var Logger_log_overload34_id unsafe.Pointer

var Logger_log_overload35_id unsafe.Pointer

var Logger_log_overload36_id unsafe.Pointer

var Logger_log_overload37_id unsafe.Pointer

var Logger_log_overload38_id unsafe.Pointer

var Logger_log_overload39_id unsafe.Pointer

var Logger_log_overload40_id unsafe.Pointer

var Logger_log_overload41_id unsafe.Pointer

var Logger_log_overload42_id unsafe.Pointer

var Logger_log_overload43_id unsafe.Pointer

var Logger_log_overload44_id unsafe.Pointer

var Logger_log_overload45_id unsafe.Pointer

var Logger_log_overload46_id unsafe.Pointer

var Logger_log_overload47_id unsafe.Pointer

var Logger_printf_id unsafe.Pointer

var Logger_printf_overload1_id unsafe.Pointer

var Logger_throwing_id unsafe.Pointer

var Logger_throwing_overload1_id unsafe.Pointer

var Logger_trace_id unsafe.Pointer

var Logger_trace_overload1_id unsafe.Pointer

var Logger_trace_overload2_id unsafe.Pointer

var Logger_trace_overload3_id unsafe.Pointer

var Logger_trace_overload4_id unsafe.Pointer

var Logger_trace_overload5_id unsafe.Pointer

var Logger_trace_overload6_id unsafe.Pointer

var Logger_trace_overload7_id unsafe.Pointer

var Logger_trace_overload8_id unsafe.Pointer

var Logger_trace_overload9_id unsafe.Pointer

var Logger_trace_overload10_id unsafe.Pointer

var Logger_trace_overload11_id unsafe.Pointer

var Logger_trace_overload12_id unsafe.Pointer

var Logger_trace_overload13_id unsafe.Pointer

var Logger_trace_overload14_id unsafe.Pointer

var Logger_trace_overload15_id unsafe.Pointer

var Logger_trace_overload16_id unsafe.Pointer

var Logger_trace_overload17_id unsafe.Pointer

var Logger_trace_overload18_id unsafe.Pointer

var Logger_trace_overload19_id unsafe.Pointer

var Logger_trace_overload20_id unsafe.Pointer

var Logger_trace_overload21_id unsafe.Pointer

var Logger_trace_overload22_id unsafe.Pointer

var Logger_trace_overload23_id unsafe.Pointer

var Logger_trace_overload24_id unsafe.Pointer

var Logger_trace_overload25_id unsafe.Pointer

var Logger_trace_overload26_id unsafe.Pointer

var Logger_trace_overload27_id unsafe.Pointer

var Logger_trace_overload28_id unsafe.Pointer

var Logger_trace_overload29_id unsafe.Pointer

var Logger_trace_overload30_id unsafe.Pointer

var Logger_trace_overload31_id unsafe.Pointer

var Logger_trace_overload32_id unsafe.Pointer

var Logger_trace_overload33_id unsafe.Pointer

var Logger_trace_overload34_id unsafe.Pointer

var Logger_trace_overload35_id unsafe.Pointer

var Logger_trace_overload36_id unsafe.Pointer

var Logger_trace_overload37_id unsafe.Pointer

var Logger_trace_overload38_id unsafe.Pointer

var Logger_trace_overload39_id unsafe.Pointer

var Logger_trace_overload40_id unsafe.Pointer

var Logger_trace_overload41_id unsafe.Pointer

var Logger_trace_overload42_id unsafe.Pointer

var Logger_trace_overload43_id unsafe.Pointer

var Logger_trace_overload44_id unsafe.Pointer

var Logger_trace_overload45_id unsafe.Pointer

var Logger_trace_overload46_id unsafe.Pointer

var Logger_trace_overload47_id unsafe.Pointer

var Logger_traceEntry_id unsafe.Pointer

var Logger_traceEntry_overload1_id unsafe.Pointer

var Logger_traceEntry_overload2_id unsafe.Pointer

var Logger_traceEntry_overload3_id unsafe.Pointer

var Logger_traceEntry_overload4_id unsafe.Pointer

var Logger_traceExit_id unsafe.Pointer

var Logger_traceExit_overload1_id unsafe.Pointer

var Logger_traceExit_overload2_id unsafe.Pointer

var Logger_traceExit_overload3_id unsafe.Pointer

var Logger_traceExit_overload4_id unsafe.Pointer

var Logger_traceExit_overload5_id unsafe.Pointer

var Logger_warn_id unsafe.Pointer

var Logger_warn_overload1_id unsafe.Pointer

var Logger_warn_overload2_id unsafe.Pointer

var Logger_warn_overload3_id unsafe.Pointer

var Logger_warn_overload4_id unsafe.Pointer

var Logger_warn_overload5_id unsafe.Pointer

var Logger_warn_overload6_id unsafe.Pointer

var Logger_warn_overload7_id unsafe.Pointer

var Logger_warn_overload8_id unsafe.Pointer

var Logger_warn_overload9_id unsafe.Pointer

var Logger_warn_overload10_id unsafe.Pointer

var Logger_warn_overload11_id unsafe.Pointer

var Logger_warn_overload12_id unsafe.Pointer

var Logger_warn_overload13_id unsafe.Pointer

var Logger_warn_overload14_id unsafe.Pointer

var Logger_warn_overload15_id unsafe.Pointer

var Logger_warn_overload16_id unsafe.Pointer

var Logger_warn_overload17_id unsafe.Pointer

var Logger_warn_overload18_id unsafe.Pointer

var Logger_warn_overload19_id unsafe.Pointer

var Logger_warn_overload20_id unsafe.Pointer

var Logger_warn_overload21_id unsafe.Pointer

var Logger_warn_overload22_id unsafe.Pointer

var Logger_warn_overload23_id unsafe.Pointer

var Logger_warn_overload24_id unsafe.Pointer

var Logger_warn_overload25_id unsafe.Pointer

var Logger_warn_overload26_id unsafe.Pointer

var Logger_warn_overload27_id unsafe.Pointer

var Logger_warn_overload28_id unsafe.Pointer

var Logger_warn_overload29_id unsafe.Pointer

var Logger_warn_overload30_id unsafe.Pointer

var Logger_warn_overload31_id unsafe.Pointer

var Logger_warn_overload32_id unsafe.Pointer

var Logger_warn_overload33_id unsafe.Pointer

var Logger_warn_overload34_id unsafe.Pointer

var Logger_warn_overload35_id unsafe.Pointer

var Logger_warn_overload36_id unsafe.Pointer

var Logger_warn_overload37_id unsafe.Pointer

var Logger_warn_overload38_id unsafe.Pointer

var Logger_warn_overload39_id unsafe.Pointer

var Logger_warn_overload40_id unsafe.Pointer

var Logger_warn_overload41_id unsafe.Pointer

var Logger_warn_overload42_id unsafe.Pointer

var Logger_warn_overload43_id unsafe.Pointer

var Logger_warn_overload44_id unsafe.Pointer

var Logger_warn_overload45_id unsafe.Pointer

var Logger_warn_overload46_id unsafe.Pointer

var Logger_warn_overload47_id unsafe.Pointer

var Logger_logMessage_id unsafe.Pointer

var Logger_atTrace_id unsafe.Pointer

var Logger_atDebug_id unsafe.Pointer

var Logger_atInfo_id unsafe.Pointer

var Logger_atWarn_id unsafe.Pointer

var Logger_atError_id unsafe.Pointer

var Logger_atFatal_id unsafe.Pointer

var Logger_always_id unsafe.Pointer

var Logger_atLevel_id unsafe.Pointer



var Logger_ReleaseLogger_id unsafe.Pointer




func MetaFFILoad(modulePath string){
	LoadCDTCAPI()

	runtimePlugin := "xllr.openjdk"
	err := XLLRLoadRuntimePlugin(runtimePlugin)
	if err != nil{
		panic(err)
	}

	// load functions
	loadFF := func(modulePath string, fpath string, paramsCount int8, retvalCount int8) unsafe.Pointer{
		id, err := XLLRLoadFunction(runtimePlugin, modulePath, fpath, nil, paramsCount, retvalCount)
		if err != nil{ // failed
			panic(err)
		}

		return id
	}

	
	

	

	
	
	LogManager_GetFACTORY_PROPERTY_NAME_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_get_GetFACTORY_PROPERTY_NAME,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 0, 1)
	
	
	LogManager_GetROOT_LOGGER_NAME_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_get_GetROOT_LOGGER_NAME,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 0, 1)
	
	
	
	LogManager_exists_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_exists,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getContext_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 0, 1)
	
	LogManager_getContext_overload1_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getContext_overload2_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	LogManager_getContext_overload3_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	LogManager_getContext_overload4_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	LogManager_getContext_overload5_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 1)
	
	LogManager_getContext_overload6_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 1)
	
	LogManager_shutdown_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_shutdown,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 0, 0)
	
	LogManager_shutdown_overload1_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_shutdown1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 0)
	
	LogManager_shutdown_overload2_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_shutdown2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	LogManager_shutdown_overload3_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_shutdown3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 0)
	
	LogManager_getFactory_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFactory,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 0, 1)
	
	LogManager_setFactory_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_setFactory,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 0)
	
	LogManager_getFormatterLogger_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFormatterLogger,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 0, 1)
	
	LogManager_getFormatterLogger_overload1_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFormatterLogger1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getFormatterLogger_overload2_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFormatterLogger2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getFormatterLogger_overload3_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFormatterLogger3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getLogger_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 0, 1)
	
	LogManager_getLogger_overload1_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getLogger_overload2_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	LogManager_getLogger_overload3_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getLogger_overload4_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getLogger_overload5_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	LogManager_getLogger_overload6_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	LogManager_getLogger_overload7_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	LogManager_getRootLogger_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getRootLogger,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 0, 1)
	
	
	
	LogManager_ReleaseLogManager_id = loadFF(modulePath, `entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_ReleaseLogManager,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 0)
	
	
	
	
	Logger_catching_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_catching,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_catching_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_catching1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_debug_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload5_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload6_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload7_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload8_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload9_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload10_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload11_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload12_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload13_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload14_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_debug_overload15_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload16_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_debug_overload17_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload18_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_debug_overload19_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload20_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_debug_overload21_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload22_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_debug_overload23_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload24_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload25_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload26_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_debug_overload27_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload28_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload29_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_debug_overload30_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_debug_overload31_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_debug_overload32_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_debug_overload33_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_debug_overload34_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_debug_overload35_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_debug_overload36_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_debug_overload37_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 13, 0)
	
	Logger_debug_overload38_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_debug_overload39_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_debug_overload40_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_debug_overload41_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_debug_overload42_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_debug_overload43_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_debug_overload44_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_debug_overload45_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_debug_overload46_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_debug_overload47_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_entry_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_entry,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 0)
	
	Logger_entry_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_entry1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_error_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload5_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload6_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload7_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload8_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload9_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload10_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload11_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload12_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload13_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload14_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_error_overload15_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload16_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_error_overload17_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload18_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_error_overload19_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload20_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_error_overload21_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload22_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_error_overload23_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload24_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload25_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload26_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_error_overload27_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload28_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload29_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_error_overload30_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_error_overload31_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_error_overload32_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_error_overload33_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_error_overload34_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_error_overload35_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_error_overload36_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_error_overload37_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 13, 0)
	
	Logger_error_overload38_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_error_overload39_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_error_overload40_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_error_overload41_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_error_overload42_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_error_overload43_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_error_overload44_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_error_overload45_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_error_overload46_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_error_overload47_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_exit_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_exit,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 0)
	
	Logger_exit_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_exit1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_fatal_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload5_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload6_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload7_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload8_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload9_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload10_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload11_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload12_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload13_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload14_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_fatal_overload15_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload16_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_fatal_overload17_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload18_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_fatal_overload19_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload20_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_fatal_overload21_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload22_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_fatal_overload23_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload24_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload25_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload26_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_fatal_overload27_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload28_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload29_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_fatal_overload30_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_fatal_overload31_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_fatal_overload32_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_fatal_overload33_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_fatal_overload34_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_fatal_overload35_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_fatal_overload36_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_fatal_overload37_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 13, 0)
	
	Logger_fatal_overload38_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_fatal_overload39_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_fatal_overload40_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_fatal_overload41_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_fatal_overload42_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_fatal_overload43_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_fatal_overload44_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_fatal_overload45_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_fatal_overload46_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_fatal_overload47_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_getLevel_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_getLevel,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_getMessageFactory_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_getMessageFactory,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_getFlowMessageFactory_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_getFlowMessageFactory,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_getName_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_getName,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_info_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload5_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload6_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload7_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload8_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload9_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload10_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload11_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload12_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload13_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload14_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_info_overload15_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload16_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_info_overload17_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload18_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_info_overload19_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload20_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_info_overload21_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload22_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_info_overload23_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload24_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload25_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload26_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_info_overload27_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload28_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload29_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_info_overload30_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_info_overload31_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_info_overload32_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_info_overload33_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_info_overload34_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_info_overload35_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_info_overload36_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_info_overload37_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 13, 0)
	
	Logger_info_overload38_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_info_overload39_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_info_overload40_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_info_overload41_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_info_overload42_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_info_overload43_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_info_overload44_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_info_overload45_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_info_overload46_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_info_overload47_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_isDebugEnabled_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isDebugEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_isDebugEnabled_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isDebugEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_isEnabled_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_isEnabled_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	Logger_isErrorEnabled_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isErrorEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_isErrorEnabled_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isErrorEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_isFatalEnabled_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isFatalEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_isFatalEnabled_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isFatalEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_isInfoEnabled_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isInfoEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_isInfoEnabled_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isInfoEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_isTraceEnabled_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isTraceEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_isTraceEnabled_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isTraceEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_isWarnEnabled_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isWarnEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_isWarnEnabled_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isWarnEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_log_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload5_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload6_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload7_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload8_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload9_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload10_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload11_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload12_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload13_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload14_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_log_overload15_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload16_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_log_overload17_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload18_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_log_overload19_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload20_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_log_overload21_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload22_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_log_overload23_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload24_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload25_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload26_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_log_overload27_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload28_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload29_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_log_overload30_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_log_overload31_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_log_overload32_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_log_overload33_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_log_overload34_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_log_overload35_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_log_overload36_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 13, 0)
	
	Logger_log_overload37_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 14, 0)
	
	Logger_log_overload38_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_log_overload39_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_log_overload40_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_log_overload41_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_log_overload42_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_log_overload43_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_log_overload44_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_log_overload45_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_log_overload46_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_log_overload47_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 13, 0)
	
	Logger_printf_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_printf,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_printf_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_printf1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_throwing_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_throwing,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	Logger_throwing_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_throwing1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_trace_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload5_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload6_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload7_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload8_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload9_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload10_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload11_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload12_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload13_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload14_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_trace_overload15_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload16_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_trace_overload17_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload18_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_trace_overload19_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload20_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_trace_overload21_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload22_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_trace_overload23_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload24_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload25_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload26_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_trace_overload27_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload28_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload29_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_trace_overload30_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_trace_overload31_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_trace_overload32_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_trace_overload33_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_trace_overload34_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_trace_overload35_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_trace_overload36_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_trace_overload37_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 13, 0)
	
	Logger_trace_overload38_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_trace_overload39_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_trace_overload40_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_trace_overload41_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_trace_overload42_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_trace_overload43_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_trace_overload44_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_trace_overload45_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_trace_overload46_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_trace_overload47_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_traceEntry_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_traceEntry_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	Logger_traceEntry_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_traceEntry_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	Logger_traceEntry_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_traceExit_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 0)
	
	Logger_traceExit_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	Logger_traceExit_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	Logger_traceExit_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_traceExit_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	Logger_traceExit_overload5_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 1)
	
	Logger_warn_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload1_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload2_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload3_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload4_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload5_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload6_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload7_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload8_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload9_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload10_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload11_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload12_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload13_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload14_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_warn_overload15_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload16_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_warn_overload17_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload18_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_warn_overload19_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload20_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_warn_overload21_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload22_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_warn_overload23_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload24_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload25_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload26_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 0)
	
	Logger_warn_overload27_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload28_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload29_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_warn_overload30_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_warn_overload31_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_warn_overload32_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_warn_overload33_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_warn_overload34_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_warn_overload35_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_warn_overload36_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_warn_overload37_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 13, 0)
	
	Logger_warn_overload38_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 3, 0)
	
	Logger_warn_overload39_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 4, 0)
	
	Logger_warn_overload40_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 5, 0)
	
	Logger_warn_overload41_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 6, 0)
	
	Logger_warn_overload42_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_warn_overload43_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 8, 0)
	
	Logger_warn_overload44_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 9, 0)
	
	Logger_warn_overload45_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 10, 0)
	
	Logger_warn_overload46_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 11, 0)
	
	Logger_warn_overload47_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 12, 0)
	
	Logger_logMessage_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_logMessage,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 7, 0)
	
	Logger_atTrace_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atTrace,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_atDebug_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atDebug,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_atInfo_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atInfo,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_atWarn_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atWarn,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_atError_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atError,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_atFatal_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atFatal,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_always_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_always,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 1)
	
	Logger_atLevel_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atLevel,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 2, 1)
	
	
	
	Logger_ReleaseLogger_id = loadFF(modulePath, `entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_ReleaseLogger,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j`, 1, 0)
	
	
	
}

func Free(){
	err := XLLRFreeRuntimePlugin("xllr.openjdk")
	if err != nil{ panic(err) }
}









// Code to call foreign functions in module Logger via XLLR



type LogManager struct{
	h Handle
}



func (this *LogManager) GetHandle() Handle{
	return this.h
}

func (this *LogManager) SetHandle(h Handle){
	this.h = h
}



func  LogManager_GetFACTORY_PROPERTY_NAME_MetaFFIGetter() (FACTORY_PROPERTY_NAME string, err error){
	
	

	xcall_params, _, return_valuesCDTS := XLLRAllocCDTSBuffer(0, 1)

	
	// get parameters
	
	 
	 


		err = XLLRXCallNoParamsRet(LogManager_GetFACTORY_PROPERTY_NAME_id, xcall_params)  // call function pointer LogManager_GetFACTORY_PROPERTY_NAME_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.GetFACTORY_PROPERTY_NAME. Error: %v", err)
		return
	}

	
	
	FACTORY_PROPERTY_NAMEAsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if FACTORY_PROPERTY_NAMEAsInterface != nil{
		
		// not handle
		FACTORY_PROPERTY_NAME = string(FACTORY_PROPERTY_NAMEAsInterface.(string))
		
		
	}

	

	return FACTORY_PROPERTY_NAME, nil	
}




func  LogManager_GetROOT_LOGGER_NAME_MetaFFIGetter() (ROOT_LOGGER_NAME string, err error){
	
	

	xcall_params, _, return_valuesCDTS := XLLRAllocCDTSBuffer(0, 1)

	
	// get parameters
	
	 
	 


		err = XLLRXCallNoParamsRet(LogManager_GetROOT_LOGGER_NAME_id, xcall_params)  // call function pointer LogManager_GetROOT_LOGGER_NAME_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.GetROOT_LOGGER_NAME. Error: %v", err)
		return
	}

	
	
	ROOT_LOGGER_NAMEAsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if ROOT_LOGGER_NAMEAsInterface != nil{
		
		// not handle
		ROOT_LOGGER_NAME = string(ROOT_LOGGER_NAMEAsInterface.(string))
		
		
	}

	

	return ROOT_LOGGER_NAME, nil	
}




func  LogManager_Exists(p0 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_exists_id, xcall_params)  // call function pointer LogManager_exists_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.exists. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func  LogManager_GetContext() (r0 interface{}, err error){
	
	

	xcall_params, _, return_valuesCDTS := XLLRAllocCDTSBuffer(0, 1)

	
	// parameters
	
	
	

		err = XLLRXCallNoParamsRet(LogManager_getContext_id, xcall_params)  // call function pointer LogManager_getContext_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getContext. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetContext_Overload1(ex bool) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(ex, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_getContext_overload1_id, xcall_params)  // call function pointer LogManager_getContext_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getContext_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetContext_Overload2(ex interface{},loader bool) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	
	FromGoToCDT(ex, parametersCDTS, 0)
	
	FromGoToCDT(loader, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(LogManager_getContext_overload2_id, xcall_params)  // call function pointer LogManager_getContext_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getContext_overload2. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetContext_Overload3(ex interface{},loader bool,currentContext interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	
	FromGoToCDT(ex, parametersCDTS, 0)
	
	FromGoToCDT(loader, parametersCDTS, 1)
	
	FromGoToCDT(currentContext, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(LogManager_getContext_overload3_id, xcall_params)  // call function pointer LogManager_getContext_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getContext_overload3. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetContext_Overload4(ex interface{},loader bool,currentContext interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	
	FromGoToCDT(ex, parametersCDTS, 0)
	
	FromGoToCDT(loader, parametersCDTS, 1)
	
	FromGoToCDT(currentContext, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(LogManager_getContext_overload4_id, xcall_params)  // call function pointer LogManager_getContext_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getContext_overload4. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetContext_Overload5(ex interface{},loader bool,currentContext interface{},externalContext interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(4, 1)

	
	// parameters
	
	
	FromGoToCDT(ex, parametersCDTS, 0)
	
	FromGoToCDT(loader, parametersCDTS, 1)
	
	FromGoToCDT(currentContext, parametersCDTS, 2)
	
	FromGoToCDT(externalContext, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsRet(LogManager_getContext_overload5_id, xcall_params)  // call function pointer LogManager_getContext_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getContext_overload5. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetContext_Overload6(ex interface{},loader bool,currentContext interface{},externalContext interface{},configLocation interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(5, 1)

	
	// parameters
	
	
	FromGoToCDT(ex, parametersCDTS, 0)
	
	FromGoToCDT(loader, parametersCDTS, 1)
	
	FromGoToCDT(currentContext, parametersCDTS, 2)
	
	FromGoToCDT(externalContext, parametersCDTS, 3)
	
	FromGoToCDT(configLocation, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsRet(LogManager_getContext_overload6_id, xcall_params)  // call function pointer LogManager_getContext_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getContext_overload6. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_Shutdown() ( err error){
	
	

	
	
	// parameters
	
	
	

		err = XLLRXCallNoParamsNoRet(LogManager_shutdown_id)  // call function pointer LogManager_shutdown_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.shutdown. Error: %v", err)
		return
	}

	
	

	return  nil
}

func  LogManager_Shutdown_Overload1(p0 bool) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(1, 0)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsNoRet(LogManager_shutdown_overload1_id, xcall_params)  // call function pointer LogManager_shutdown_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.shutdown_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func  LogManager_Shutdown_Overload2(allContexts bool,p1 bool) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	
	FromGoToCDT(allContexts, parametersCDTS, 0)
	
	FromGoToCDT(p1, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(LogManager_shutdown_overload2_id, xcall_params)  // call function pointer LogManager_shutdown_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.shutdown_overload2. Error: %v", err)
		return
	}

	
	

	return  nil
}

func  LogManager_Shutdown_Overload3(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(1, 0)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsNoRet(LogManager_shutdown_overload3_id, xcall_params)  // call function pointer LogManager_shutdown_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.shutdown_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func  LogManager_GetFactory() (r0 interface{}, err error){
	
	

	xcall_params, _, return_valuesCDTS := XLLRAllocCDTSBuffer(0, 1)

	
	// parameters
	
	
	

		err = XLLRXCallNoParamsRet(LogManager_getFactory_id, xcall_params)  // call function pointer LogManager_getFactory_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getFactory. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_SetFactory(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(1, 0)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsNoRet(LogManager_setFactory_id, xcall_params)  // call function pointer LogManager_setFactory_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.setFactory. Error: %v", err)
		return
	}

	
	

	return  nil
}

func  LogManager_GetFormatterLogger() (r0 interface{}, err error){
	
	

	xcall_params, _, return_valuesCDTS := XLLRAllocCDTSBuffer(0, 1)

	
	// parameters
	
	
	

		err = XLLRXCallNoParamsRet(LogManager_getFormatterLogger_id, xcall_params)  // call function pointer LogManager_getFormatterLogger_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getFormatterLogger. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetFormatterLogger_Overload1(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_getFormatterLogger_overload1_id, xcall_params)  // call function pointer LogManager_getFormatterLogger_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getFormatterLogger_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetFormatterLogger_Overload2(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_getFormatterLogger_overload2_id, xcall_params)  // call function pointer LogManager_getFormatterLogger_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getFormatterLogger_overload2. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetFormatterLogger_Overload3(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_getFormatterLogger_overload3_id, xcall_params)  // call function pointer LogManager_getFormatterLogger_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getFormatterLogger_overload3. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetLogger() (r0 interface{}, err error){
	
	

	xcall_params, _, return_valuesCDTS := XLLRAllocCDTSBuffer(0, 1)

	
	// parameters
	
	
	

		err = XLLRXCallNoParamsRet(LogManager_getLogger_id, xcall_params)  // call function pointer LogManager_getLogger_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getLogger. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetLogger_Overload1(cls interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(cls, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_getLogger_overload1_id, xcall_params)  // call function pointer LogManager_getLogger_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getLogger_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetLogger_Overload2(messageFactory interface{},cls interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	
	FromGoToCDT(messageFactory, parametersCDTS, 0)
	
	FromGoToCDT(cls, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(LogManager_getLogger_overload2_id, xcall_params)  // call function pointer LogManager_getLogger_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getLogger_overload2. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetLogger_Overload3(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_getLogger_overload3_id, xcall_params)  // call function pointer LogManager_getLogger_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getLogger_overload3. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetLogger_Overload4(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_getLogger_overload4_id, xcall_params)  // call function pointer LogManager_getLogger_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getLogger_overload4. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetLogger_Overload5(messageFactory interface{},p1 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	
	FromGoToCDT(messageFactory, parametersCDTS, 0)
	
	FromGoToCDT(p1, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(LogManager_getLogger_overload5_id, xcall_params)  // call function pointer LogManager_getLogger_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getLogger_overload5. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetLogger_Overload6(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	
	FromGoToCDT(p0, parametersCDTS, 0)
	
	

		err = XLLRXCallParamsRet(LogManager_getLogger_overload6_id, xcall_params)  // call function pointer LogManager_getLogger_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getLogger_overload6. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetLogger_Overload7(messageFactory interface{},p1 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	
	FromGoToCDT(messageFactory, parametersCDTS, 0)
	
	FromGoToCDT(p1, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(LogManager_getLogger_overload7_id, xcall_params)  // call function pointer LogManager_getLogger_overload7_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getLogger_overload7. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func  LogManager_GetRootLogger() (r0 interface{}, err error){
	
	

	xcall_params, _, return_valuesCDTS := XLLRAllocCDTSBuffer(0, 1)

	
	// parameters
	
	
	

		err = XLLRXCallNoParamsRet(LogManager_getRootLogger_id, xcall_params)  // call function pointer LogManager_getRootLogger_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.getRootLogger. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}


func (this *LogManager) ReleaseLogManager( this_instance interface{}) ( err error){
	
	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(1, 0)

	
	// parameters
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	

		err = XLLRXCallParamsNoRet(LogManager_ReleaseLogManager_id, xcall_params)  // call function pointer LogManager_ReleaseLogManager_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogManager.ReleaseLogManager. Error: %v", err)
		return
	}

	
	

	return  nil
}


type Logger struct{
	h Handle
}



func (this *Logger) GetHandle() Handle{
	return this.h
}

func (this *Logger) SetHandle(h Handle){
	this.h = h
}



func (this *Logger) Catching(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_catching_id, xcall_params)  // call function pointer Logger_catching_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.catching. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Catching_Overload1(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_catching_overload1_id, xcall_params)  // call function pointer Logger_catching_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.catching_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_id, xcall_params)  // call function pointer Logger_debug_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload1(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload1_id, xcall_params)  // call function pointer Logger_debug_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload2(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload2_id, xcall_params)  // call function pointer Logger_debug_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload2. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload3(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload3_id, xcall_params)  // call function pointer Logger_debug_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload4(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload4_id, xcall_params)  // call function pointer Logger_debug_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload4. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload5(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload5_id, xcall_params)  // call function pointer Logger_debug_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload5. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload6(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload6_id, xcall_params)  // call function pointer Logger_debug_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload6. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload7(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload7_id, xcall_params)  // call function pointer Logger_debug_overload7_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload7. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload8(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload8_id, xcall_params)  // call function pointer Logger_debug_overload8_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload8. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload9(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload9_id, xcall_params)  // call function pointer Logger_debug_overload9_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload9. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload10(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload10_id, xcall_params)  // call function pointer Logger_debug_overload10_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload10. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload11(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload11_id, xcall_params)  // call function pointer Logger_debug_overload11_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload11. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload12(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload12_id, xcall_params)  // call function pointer Logger_debug_overload12_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload12. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload13(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload13_id, xcall_params)  // call function pointer Logger_debug_overload13_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload13. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload14(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload14_id, xcall_params)  // call function pointer Logger_debug_overload14_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload14. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload15(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload15_id, xcall_params)  // call function pointer Logger_debug_overload15_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload15. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload16(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload16_id, xcall_params)  // call function pointer Logger_debug_overload16_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload16. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload17(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload17_id, xcall_params)  // call function pointer Logger_debug_overload17_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload17. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload18(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload18_id, xcall_params)  // call function pointer Logger_debug_overload18_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload18. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload19(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload19_id, xcall_params)  // call function pointer Logger_debug_overload19_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload19. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload20(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload20_id, xcall_params)  // call function pointer Logger_debug_overload20_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload20. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload21(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload21_id, xcall_params)  // call function pointer Logger_debug_overload21_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload21. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload22(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload22_id, xcall_params)  // call function pointer Logger_debug_overload22_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload22. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload23(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload23_id, xcall_params)  // call function pointer Logger_debug_overload23_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload23. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload24(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload24_id, xcall_params)  // call function pointer Logger_debug_overload24_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload24. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload25(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload25_id, xcall_params)  // call function pointer Logger_debug_overload25_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload25. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload26(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload26_id, xcall_params)  // call function pointer Logger_debug_overload26_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload26. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload27(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload27_id, xcall_params)  // call function pointer Logger_debug_overload27_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload27. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload28(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload28_id, xcall_params)  // call function pointer Logger_debug_overload28_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload28. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload29(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload29_id, xcall_params)  // call function pointer Logger_debug_overload29_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload29. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload30(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload30_id, xcall_params)  // call function pointer Logger_debug_overload30_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload30. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload31(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload31_id, xcall_params)  // call function pointer Logger_debug_overload31_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload31. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload32(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload32_id, xcall_params)  // call function pointer Logger_debug_overload32_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload32. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload33(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload33_id, xcall_params)  // call function pointer Logger_debug_overload33_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload33. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload34(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload34_id, xcall_params)  // call function pointer Logger_debug_overload34_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload34. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload35(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload35_id, xcall_params)  // call function pointer Logger_debug_overload35_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload35. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload36(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload36_id, xcall_params)  // call function pointer Logger_debug_overload36_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload36. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload37(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(13, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload37_id, xcall_params)  // call function pointer Logger_debug_overload37_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload37. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload38(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload38_id, xcall_params)  // call function pointer Logger_debug_overload38_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload38. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload39(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload39_id, xcall_params)  // call function pointer Logger_debug_overload39_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload39. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload40(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload40_id, xcall_params)  // call function pointer Logger_debug_overload40_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload40. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload41(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload41_id, xcall_params)  // call function pointer Logger_debug_overload41_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload41. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload42(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload42_id, xcall_params)  // call function pointer Logger_debug_overload42_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload42. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload43(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload43_id, xcall_params)  // call function pointer Logger_debug_overload43_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload43. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload44(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload44_id, xcall_params)  // call function pointer Logger_debug_overload44_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload44. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload45(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload45_id, xcall_params)  // call function pointer Logger_debug_overload45_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload45. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload46(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload46_id, xcall_params)  // call function pointer Logger_debug_overload46_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload46. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Debug_Overload47(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_debug_overload47_id, xcall_params)  // call function pointer Logger_debug_overload47_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.debug_overload47. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Entry() ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(1, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsNoRet(Logger_entry_id, xcall_params)  // call function pointer Logger_entry_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.entry. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Entry_Overload1(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_entry_overload1_id, xcall_params)  // call function pointer Logger_entry_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.entry_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_id, xcall_params)  // call function pointer Logger_error_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload1(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload1_id, xcall_params)  // call function pointer Logger_error_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload2(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload2_id, xcall_params)  // call function pointer Logger_error_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload2. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload3(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload3_id, xcall_params)  // call function pointer Logger_error_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload4(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload4_id, xcall_params)  // call function pointer Logger_error_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload4. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload5(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload5_id, xcall_params)  // call function pointer Logger_error_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload5. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload6(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload6_id, xcall_params)  // call function pointer Logger_error_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload6. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload7(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload7_id, xcall_params)  // call function pointer Logger_error_overload7_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload7. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload8(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload8_id, xcall_params)  // call function pointer Logger_error_overload8_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload8. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload9(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload9_id, xcall_params)  // call function pointer Logger_error_overload9_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload9. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload10(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload10_id, xcall_params)  // call function pointer Logger_error_overload10_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload10. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload11(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload11_id, xcall_params)  // call function pointer Logger_error_overload11_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload11. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload12(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload12_id, xcall_params)  // call function pointer Logger_error_overload12_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload12. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload13(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload13_id, xcall_params)  // call function pointer Logger_error_overload13_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload13. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload14(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload14_id, xcall_params)  // call function pointer Logger_error_overload14_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload14. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload15(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload15_id, xcall_params)  // call function pointer Logger_error_overload15_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload15. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload16(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload16_id, xcall_params)  // call function pointer Logger_error_overload16_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload16. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload17(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload17_id, xcall_params)  // call function pointer Logger_error_overload17_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload17. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload18(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload18_id, xcall_params)  // call function pointer Logger_error_overload18_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload18. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload19(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload19_id, xcall_params)  // call function pointer Logger_error_overload19_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload19. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload20(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload20_id, xcall_params)  // call function pointer Logger_error_overload20_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload20. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload21(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload21_id, xcall_params)  // call function pointer Logger_error_overload21_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload21. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload22(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload22_id, xcall_params)  // call function pointer Logger_error_overload22_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload22. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload23(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload23_id, xcall_params)  // call function pointer Logger_error_overload23_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload23. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload24(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload24_id, xcall_params)  // call function pointer Logger_error_overload24_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload24. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload25(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload25_id, xcall_params)  // call function pointer Logger_error_overload25_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload25. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload26(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload26_id, xcall_params)  // call function pointer Logger_error_overload26_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload26. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload27(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload27_id, xcall_params)  // call function pointer Logger_error_overload27_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload27. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload28(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload28_id, xcall_params)  // call function pointer Logger_error_overload28_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload28. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload29(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload29_id, xcall_params)  // call function pointer Logger_error_overload29_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload29. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload30(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload30_id, xcall_params)  // call function pointer Logger_error_overload30_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload30. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload31(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload31_id, xcall_params)  // call function pointer Logger_error_overload31_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload31. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload32(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload32_id, xcall_params)  // call function pointer Logger_error_overload32_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload32. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload33(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload33_id, xcall_params)  // call function pointer Logger_error_overload33_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload33. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload34(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload34_id, xcall_params)  // call function pointer Logger_error_overload34_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload34. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload35(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload35_id, xcall_params)  // call function pointer Logger_error_overload35_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload35. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload36(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload36_id, xcall_params)  // call function pointer Logger_error_overload36_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload36. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload37(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(13, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload37_id, xcall_params)  // call function pointer Logger_error_overload37_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload37. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload38(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload38_id, xcall_params)  // call function pointer Logger_error_overload38_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload38. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload39(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload39_id, xcall_params)  // call function pointer Logger_error_overload39_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload39. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload40(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload40_id, xcall_params)  // call function pointer Logger_error_overload40_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload40. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload41(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload41_id, xcall_params)  // call function pointer Logger_error_overload41_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload41. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload42(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload42_id, xcall_params)  // call function pointer Logger_error_overload42_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload42. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload43(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload43_id, xcall_params)  // call function pointer Logger_error_overload43_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload43. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload44(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload44_id, xcall_params)  // call function pointer Logger_error_overload44_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload44. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload45(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload45_id, xcall_params)  // call function pointer Logger_error_overload45_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload45. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload46(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload46_id, xcall_params)  // call function pointer Logger_error_overload46_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload46. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Error_Overload47(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_error_overload47_id, xcall_params)  // call function pointer Logger_error_overload47_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.error_overload47. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Exit() ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(1, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsNoRet(Logger_exit_id, xcall_params)  // call function pointer Logger_exit_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.exit. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Exit_Overload1(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_exit_overload1_id, xcall_params)  // call function pointer Logger_exit_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.exit_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) Fatal(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_id, xcall_params)  // call function pointer Logger_fatal_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload1(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload1_id, xcall_params)  // call function pointer Logger_fatal_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload2(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload2_id, xcall_params)  // call function pointer Logger_fatal_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload2. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload3(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload3_id, xcall_params)  // call function pointer Logger_fatal_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload4(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload4_id, xcall_params)  // call function pointer Logger_fatal_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload4. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload5(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload5_id, xcall_params)  // call function pointer Logger_fatal_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload5. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload6(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload6_id, xcall_params)  // call function pointer Logger_fatal_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload6. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload7(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload7_id, xcall_params)  // call function pointer Logger_fatal_overload7_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload7. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload8(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload8_id, xcall_params)  // call function pointer Logger_fatal_overload8_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload8. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload9(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload9_id, xcall_params)  // call function pointer Logger_fatal_overload9_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload9. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload10(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload10_id, xcall_params)  // call function pointer Logger_fatal_overload10_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload10. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload11(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload11_id, xcall_params)  // call function pointer Logger_fatal_overload11_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload11. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload12(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload12_id, xcall_params)  // call function pointer Logger_fatal_overload12_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload12. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload13(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload13_id, xcall_params)  // call function pointer Logger_fatal_overload13_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload13. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload14(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload14_id, xcall_params)  // call function pointer Logger_fatal_overload14_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload14. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload15(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload15_id, xcall_params)  // call function pointer Logger_fatal_overload15_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload15. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload16(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload16_id, xcall_params)  // call function pointer Logger_fatal_overload16_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload16. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload17(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload17_id, xcall_params)  // call function pointer Logger_fatal_overload17_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload17. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload18(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload18_id, xcall_params)  // call function pointer Logger_fatal_overload18_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload18. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload19(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload19_id, xcall_params)  // call function pointer Logger_fatal_overload19_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload19. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload20(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload20_id, xcall_params)  // call function pointer Logger_fatal_overload20_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload20. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload21(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload21_id, xcall_params)  // call function pointer Logger_fatal_overload21_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload21. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload22(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload22_id, xcall_params)  // call function pointer Logger_fatal_overload22_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload22. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload23(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload23_id, xcall_params)  // call function pointer Logger_fatal_overload23_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload23. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload24(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload24_id, xcall_params)  // call function pointer Logger_fatal_overload24_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload24. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload25(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload25_id, xcall_params)  // call function pointer Logger_fatal_overload25_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload25. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload26(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload26_id, xcall_params)  // call function pointer Logger_fatal_overload26_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload26. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload27(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload27_id, xcall_params)  // call function pointer Logger_fatal_overload27_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload27. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload28(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload28_id, xcall_params)  // call function pointer Logger_fatal_overload28_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload28. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload29(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload29_id, xcall_params)  // call function pointer Logger_fatal_overload29_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload29. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload30(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload30_id, xcall_params)  // call function pointer Logger_fatal_overload30_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload30. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload31(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload31_id, xcall_params)  // call function pointer Logger_fatal_overload31_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload31. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload32(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload32_id, xcall_params)  // call function pointer Logger_fatal_overload32_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload32. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload33(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload33_id, xcall_params)  // call function pointer Logger_fatal_overload33_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload33. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload34(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload34_id, xcall_params)  // call function pointer Logger_fatal_overload34_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload34. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload35(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload35_id, xcall_params)  // call function pointer Logger_fatal_overload35_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload35. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload36(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload36_id, xcall_params)  // call function pointer Logger_fatal_overload36_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload36. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload37(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(13, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload37_id, xcall_params)  // call function pointer Logger_fatal_overload37_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload37. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload38(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload38_id, xcall_params)  // call function pointer Logger_fatal_overload38_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload38. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload39(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload39_id, xcall_params)  // call function pointer Logger_fatal_overload39_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload39. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload40(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload40_id, xcall_params)  // call function pointer Logger_fatal_overload40_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload40. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload41(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload41_id, xcall_params)  // call function pointer Logger_fatal_overload41_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload41. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload42(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload42_id, xcall_params)  // call function pointer Logger_fatal_overload42_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload42. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload43(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload43_id, xcall_params)  // call function pointer Logger_fatal_overload43_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload43. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload44(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload44_id, xcall_params)  // call function pointer Logger_fatal_overload44_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload44. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload45(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload45_id, xcall_params)  // call function pointer Logger_fatal_overload45_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload45. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload46(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload46_id, xcall_params)  // call function pointer Logger_fatal_overload46_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload46. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Fatal_Overload47(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_fatal_overload47_id, xcall_params)  // call function pointer Logger_fatal_overload47_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.fatal_overload47. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) GetLevel() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_getLevel_id, xcall_params)  // call function pointer Logger_getLevel_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.getLevel. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) GetMessageFactory() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_getMessageFactory_id, xcall_params)  // call function pointer Logger_getMessageFactory_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.getMessageFactory. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) GetFlowMessageFactory() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_getFlowMessageFactory_id, xcall_params)  // call function pointer Logger_getFlowMessageFactory_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.getFlowMessageFactory. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) GetName() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_getName_id, xcall_params)  // call function pointer Logger_getName_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.getName. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) Info(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_id, xcall_params)  // call function pointer Logger_info_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload1(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload1_id, xcall_params)  // call function pointer Logger_info_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload2(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload2_id, xcall_params)  // call function pointer Logger_info_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload2. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload3(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload3_id, xcall_params)  // call function pointer Logger_info_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload4(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload4_id, xcall_params)  // call function pointer Logger_info_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload4. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload5(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload5_id, xcall_params)  // call function pointer Logger_info_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload5. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload6(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload6_id, xcall_params)  // call function pointer Logger_info_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload6. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload7(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload7_id, xcall_params)  // call function pointer Logger_info_overload7_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload7. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload8(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload8_id, xcall_params)  // call function pointer Logger_info_overload8_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload8. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload9(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload9_id, xcall_params)  // call function pointer Logger_info_overload9_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload9. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload10(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload10_id, xcall_params)  // call function pointer Logger_info_overload10_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload10. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload11(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload11_id, xcall_params)  // call function pointer Logger_info_overload11_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload11. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload12(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload12_id, xcall_params)  // call function pointer Logger_info_overload12_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload12. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload13(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload13_id, xcall_params)  // call function pointer Logger_info_overload13_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload13. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload14(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload14_id, xcall_params)  // call function pointer Logger_info_overload14_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload14. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload15(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload15_id, xcall_params)  // call function pointer Logger_info_overload15_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload15. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload16(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload16_id, xcall_params)  // call function pointer Logger_info_overload16_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload16. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload17(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload17_id, xcall_params)  // call function pointer Logger_info_overload17_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload17. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload18(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload18_id, xcall_params)  // call function pointer Logger_info_overload18_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload18. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload19(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload19_id, xcall_params)  // call function pointer Logger_info_overload19_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload19. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload20(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload20_id, xcall_params)  // call function pointer Logger_info_overload20_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload20. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload21(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload21_id, xcall_params)  // call function pointer Logger_info_overload21_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload21. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload22(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload22_id, xcall_params)  // call function pointer Logger_info_overload22_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload22. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload23(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload23_id, xcall_params)  // call function pointer Logger_info_overload23_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload23. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload24(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload24_id, xcall_params)  // call function pointer Logger_info_overload24_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload24. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload25(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload25_id, xcall_params)  // call function pointer Logger_info_overload25_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload25. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload26(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload26_id, xcall_params)  // call function pointer Logger_info_overload26_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload26. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload27(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload27_id, xcall_params)  // call function pointer Logger_info_overload27_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload27. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload28(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload28_id, xcall_params)  // call function pointer Logger_info_overload28_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload28. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload29(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload29_id, xcall_params)  // call function pointer Logger_info_overload29_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload29. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload30(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload30_id, xcall_params)  // call function pointer Logger_info_overload30_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload30. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload31(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload31_id, xcall_params)  // call function pointer Logger_info_overload31_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload31. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload32(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload32_id, xcall_params)  // call function pointer Logger_info_overload32_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload32. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload33(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload33_id, xcall_params)  // call function pointer Logger_info_overload33_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload33. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload34(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload34_id, xcall_params)  // call function pointer Logger_info_overload34_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload34. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload35(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload35_id, xcall_params)  // call function pointer Logger_info_overload35_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload35. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload36(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload36_id, xcall_params)  // call function pointer Logger_info_overload36_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload36. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload37(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(13, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload37_id, xcall_params)  // call function pointer Logger_info_overload37_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload37. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload38(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload38_id, xcall_params)  // call function pointer Logger_info_overload38_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload38. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload39(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload39_id, xcall_params)  // call function pointer Logger_info_overload39_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload39. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload40(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload40_id, xcall_params)  // call function pointer Logger_info_overload40_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload40. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload41(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload41_id, xcall_params)  // call function pointer Logger_info_overload41_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload41. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload42(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload42_id, xcall_params)  // call function pointer Logger_info_overload42_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload42. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload43(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload43_id, xcall_params)  // call function pointer Logger_info_overload43_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload43. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload44(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload44_id, xcall_params)  // call function pointer Logger_info_overload44_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload44. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload45(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload45_id, xcall_params)  // call function pointer Logger_info_overload45_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload45. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload46(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload46_id, xcall_params)  // call function pointer Logger_info_overload46_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload46. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Info_Overload47(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_info_overload47_id, xcall_params)  // call function pointer Logger_info_overload47_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.info_overload47. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) IsDebugEnabled() (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_isDebugEnabled_id, xcall_params)  // call function pointer Logger_isDebugEnabled_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isDebugEnabled. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsDebugEnabled_Overload1(p0 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_isDebugEnabled_overload1_id, xcall_params)  // call function pointer Logger_isDebugEnabled_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isDebugEnabled_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsEnabled(p0 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_isEnabled_id, xcall_params)  // call function pointer Logger_isEnabled_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isEnabled. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsEnabled_Overload1(p0 interface{},p1 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(Logger_isEnabled_overload1_id, xcall_params)  // call function pointer Logger_isEnabled_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isEnabled_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsErrorEnabled() (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_isErrorEnabled_id, xcall_params)  // call function pointer Logger_isErrorEnabled_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isErrorEnabled. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsErrorEnabled_Overload1(p0 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_isErrorEnabled_overload1_id, xcall_params)  // call function pointer Logger_isErrorEnabled_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isErrorEnabled_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsFatalEnabled() (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_isFatalEnabled_id, xcall_params)  // call function pointer Logger_isFatalEnabled_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isFatalEnabled. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsFatalEnabled_Overload1(p0 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_isFatalEnabled_overload1_id, xcall_params)  // call function pointer Logger_isFatalEnabled_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isFatalEnabled_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsInfoEnabled() (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_isInfoEnabled_id, xcall_params)  // call function pointer Logger_isInfoEnabled_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isInfoEnabled. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsInfoEnabled_Overload1(p0 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_isInfoEnabled_overload1_id, xcall_params)  // call function pointer Logger_isInfoEnabled_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isInfoEnabled_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsTraceEnabled() (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_isTraceEnabled_id, xcall_params)  // call function pointer Logger_isTraceEnabled_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isTraceEnabled. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsTraceEnabled_Overload1(p0 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_isTraceEnabled_overload1_id, xcall_params)  // call function pointer Logger_isTraceEnabled_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isTraceEnabled_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsWarnEnabled() (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_isWarnEnabled_id, xcall_params)  // call function pointer Logger_isWarnEnabled_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isWarnEnabled. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) IsWarnEnabled_Overload1(p0 interface{}) (r0 bool, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_isWarnEnabled_overload1_id, xcall_params)  // call function pointer Logger_isWarnEnabled_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.isWarnEnabled_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		
		r0 = bool(r0AsInterface.(bool))
		
	}
	
	

	return r0, nil
}

func (this *Logger) Log(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_id, xcall_params)  // call function pointer Logger_log_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload1(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload1_id, xcall_params)  // call function pointer Logger_log_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload2(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload2_id, xcall_params)  // call function pointer Logger_log_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload2. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload3(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload3_id, xcall_params)  // call function pointer Logger_log_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload4(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload4_id, xcall_params)  // call function pointer Logger_log_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload4. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload5(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload5_id, xcall_params)  // call function pointer Logger_log_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload5. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload6(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload6_id, xcall_params)  // call function pointer Logger_log_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload6. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload7(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload7_id, xcall_params)  // call function pointer Logger_log_overload7_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload7. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload8(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload8_id, xcall_params)  // call function pointer Logger_log_overload8_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload8. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload9(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload9_id, xcall_params)  // call function pointer Logger_log_overload9_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload9. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload10(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload10_id, xcall_params)  // call function pointer Logger_log_overload10_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload10. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload11(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload11_id, xcall_params)  // call function pointer Logger_log_overload11_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload11. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload12(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload12_id, xcall_params)  // call function pointer Logger_log_overload12_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload12. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload13(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload13_id, xcall_params)  // call function pointer Logger_log_overload13_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload13. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload14(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload14_id, xcall_params)  // call function pointer Logger_log_overload14_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload14. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload15(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload15_id, xcall_params)  // call function pointer Logger_log_overload15_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload15. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload16(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload16_id, xcall_params)  // call function pointer Logger_log_overload16_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload16. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload17(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload17_id, xcall_params)  // call function pointer Logger_log_overload17_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload17. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload18(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload18_id, xcall_params)  // call function pointer Logger_log_overload18_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload18. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload19(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload19_id, xcall_params)  // call function pointer Logger_log_overload19_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload19. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload20(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload20_id, xcall_params)  // call function pointer Logger_log_overload20_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload20. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload21(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload21_id, xcall_params)  // call function pointer Logger_log_overload21_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload21. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload22(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload22_id, xcall_params)  // call function pointer Logger_log_overload22_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload22. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload23(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload23_id, xcall_params)  // call function pointer Logger_log_overload23_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload23. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload24(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload24_id, xcall_params)  // call function pointer Logger_log_overload24_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload24. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload25(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload25_id, xcall_params)  // call function pointer Logger_log_overload25_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload25. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload26(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload26_id, xcall_params)  // call function pointer Logger_log_overload26_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload26. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload27(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload27_id, xcall_params)  // call function pointer Logger_log_overload27_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload27. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload28(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload28_id, xcall_params)  // call function pointer Logger_log_overload28_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload28. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload29(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload29_id, xcall_params)  // call function pointer Logger_log_overload29_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload29. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload30(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload30_id, xcall_params)  // call function pointer Logger_log_overload30_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload30. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload31(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload31_id, xcall_params)  // call function pointer Logger_log_overload31_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload31. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload32(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload32_id, xcall_params)  // call function pointer Logger_log_overload32_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload32. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload33(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload33_id, xcall_params)  // call function pointer Logger_log_overload33_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload33. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload34(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload34_id, xcall_params)  // call function pointer Logger_log_overload34_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload34. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload35(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload35_id, xcall_params)  // call function pointer Logger_log_overload35_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload35. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload36(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(13, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload36_id, xcall_params)  // call function pointer Logger_log_overload36_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload36. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload37(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{},p12 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(14, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	FromGoToCDT(p12, parametersCDTS, 13)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload37_id, xcall_params)  // call function pointer Logger_log_overload37_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload37. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload38(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload38_id, xcall_params)  // call function pointer Logger_log_overload38_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload38. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload39(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload39_id, xcall_params)  // call function pointer Logger_log_overload39_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload39. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload40(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload40_id, xcall_params)  // call function pointer Logger_log_overload40_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload40. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload41(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload41_id, xcall_params)  // call function pointer Logger_log_overload41_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload41. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload42(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload42_id, xcall_params)  // call function pointer Logger_log_overload42_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload42. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload43(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload43_id, xcall_params)  // call function pointer Logger_log_overload43_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload43. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload44(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload44_id, xcall_params)  // call function pointer Logger_log_overload44_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload44. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload45(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload45_id, xcall_params)  // call function pointer Logger_log_overload45_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload45. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload46(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload46_id, xcall_params)  // call function pointer Logger_log_overload46_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload46. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Log_Overload47(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(13, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	

		err = XLLRXCallParamsNoRet(Logger_log_overload47_id, xcall_params)  // call function pointer Logger_log_overload47_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.log_overload47. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Printf(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_printf_id, xcall_params)  // call function pointer Logger_printf_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.printf. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Printf_Overload1(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_printf_overload1_id, xcall_params)  // call function pointer Logger_printf_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.printf_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Throwing(p0 interface{},p1 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(Logger_throwing_id, xcall_params)  // call function pointer Logger_throwing_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.throwing. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) Throwing_Overload1(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_throwing_overload1_id, xcall_params)  // call function pointer Logger_throwing_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.throwing_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) Trace(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_id, xcall_params)  // call function pointer Logger_trace_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload1(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload1_id, xcall_params)  // call function pointer Logger_trace_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload2(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload2_id, xcall_params)  // call function pointer Logger_trace_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload2. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload3(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload3_id, xcall_params)  // call function pointer Logger_trace_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload4(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload4_id, xcall_params)  // call function pointer Logger_trace_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload4. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload5(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload5_id, xcall_params)  // call function pointer Logger_trace_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload5. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload6(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload6_id, xcall_params)  // call function pointer Logger_trace_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload6. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload7(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload7_id, xcall_params)  // call function pointer Logger_trace_overload7_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload7. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload8(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload8_id, xcall_params)  // call function pointer Logger_trace_overload8_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload8. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload9(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload9_id, xcall_params)  // call function pointer Logger_trace_overload9_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload9. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload10(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload10_id, xcall_params)  // call function pointer Logger_trace_overload10_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload10. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload11(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload11_id, xcall_params)  // call function pointer Logger_trace_overload11_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload11. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload12(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload12_id, xcall_params)  // call function pointer Logger_trace_overload12_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload12. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload13(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload13_id, xcall_params)  // call function pointer Logger_trace_overload13_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload13. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload14(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload14_id, xcall_params)  // call function pointer Logger_trace_overload14_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload14. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload15(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload15_id, xcall_params)  // call function pointer Logger_trace_overload15_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload15. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload16(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload16_id, xcall_params)  // call function pointer Logger_trace_overload16_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload16. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload17(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload17_id, xcall_params)  // call function pointer Logger_trace_overload17_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload17. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload18(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload18_id, xcall_params)  // call function pointer Logger_trace_overload18_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload18. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload19(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload19_id, xcall_params)  // call function pointer Logger_trace_overload19_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload19. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload20(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload20_id, xcall_params)  // call function pointer Logger_trace_overload20_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload20. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload21(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload21_id, xcall_params)  // call function pointer Logger_trace_overload21_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload21. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload22(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload22_id, xcall_params)  // call function pointer Logger_trace_overload22_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload22. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload23(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload23_id, xcall_params)  // call function pointer Logger_trace_overload23_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload23. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload24(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload24_id, xcall_params)  // call function pointer Logger_trace_overload24_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload24. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload25(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload25_id, xcall_params)  // call function pointer Logger_trace_overload25_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload25. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload26(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload26_id, xcall_params)  // call function pointer Logger_trace_overload26_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload26. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload27(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload27_id, xcall_params)  // call function pointer Logger_trace_overload27_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload27. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload28(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload28_id, xcall_params)  // call function pointer Logger_trace_overload28_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload28. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload29(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload29_id, xcall_params)  // call function pointer Logger_trace_overload29_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload29. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload30(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload30_id, xcall_params)  // call function pointer Logger_trace_overload30_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload30. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload31(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload31_id, xcall_params)  // call function pointer Logger_trace_overload31_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload31. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload32(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload32_id, xcall_params)  // call function pointer Logger_trace_overload32_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload32. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload33(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload33_id, xcall_params)  // call function pointer Logger_trace_overload33_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload33. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload34(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload34_id, xcall_params)  // call function pointer Logger_trace_overload34_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload34. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload35(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload35_id, xcall_params)  // call function pointer Logger_trace_overload35_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload35. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload36(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload36_id, xcall_params)  // call function pointer Logger_trace_overload36_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload36. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload37(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(13, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload37_id, xcall_params)  // call function pointer Logger_trace_overload37_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload37. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload38(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload38_id, xcall_params)  // call function pointer Logger_trace_overload38_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload38. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload39(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload39_id, xcall_params)  // call function pointer Logger_trace_overload39_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload39. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload40(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload40_id, xcall_params)  // call function pointer Logger_trace_overload40_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload40. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload41(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload41_id, xcall_params)  // call function pointer Logger_trace_overload41_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload41. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload42(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload42_id, xcall_params)  // call function pointer Logger_trace_overload42_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload42. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload43(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload43_id, xcall_params)  // call function pointer Logger_trace_overload43_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload43. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload44(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload44_id, xcall_params)  // call function pointer Logger_trace_overload44_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload44. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload45(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload45_id, xcall_params)  // call function pointer Logger_trace_overload45_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload45. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload46(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload46_id, xcall_params)  // call function pointer Logger_trace_overload46_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload46. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Trace_Overload47(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_trace_overload47_id, xcall_params)  // call function pointer Logger_trace_overload47_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.trace_overload47. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) TraceEntry() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_traceEntry_id, xcall_params)  // call function pointer Logger_traceEntry_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceEntry. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) TraceEntry_Overload1(p0 interface{},p1 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(Logger_traceEntry_overload1_id, xcall_params)  // call function pointer Logger_traceEntry_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceEntry_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) TraceEntry_Overload2(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_traceEntry_overload2_id, xcall_params)  // call function pointer Logger_traceEntry_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceEntry_overload2. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) TraceEntry_Overload3(p0 interface{},p1 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(Logger_traceEntry_overload3_id, xcall_params)  // call function pointer Logger_traceEntry_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceEntry_overload3. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) TraceEntry_Overload4(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_traceEntry_overload4_id, xcall_params)  // call function pointer Logger_traceEntry_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceEntry_overload4. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) TraceExit() ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(1, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsNoRet(Logger_traceExit_id, xcall_params)  // call function pointer Logger_traceExit_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceExit. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) TraceExit_Overload1(p0 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_traceExit_overload1_id, xcall_params)  // call function pointer Logger_traceExit_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceExit_overload1. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) TraceExit_Overload2(p0 interface{},p1 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(Logger_traceExit_overload2_id, xcall_params)  // call function pointer Logger_traceExit_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceExit_overload2. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) TraceExit_Overload3(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_traceExit_overload3_id, xcall_params)  // call function pointer Logger_traceExit_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceExit_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) TraceExit_Overload4(p0 interface{},p1 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(Logger_traceExit_overload4_id, xcall_params)  // call function pointer Logger_traceExit_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceExit_overload4. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) TraceExit_Overload5(p0 interface{},p1 interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(3, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsRet(Logger_traceExit_overload5_id, xcall_params)  // call function pointer Logger_traceExit_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.traceExit_overload5. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) Warn(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_id, xcall_params)  // call function pointer Logger_warn_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload1(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload1_id, xcall_params)  // call function pointer Logger_warn_overload1_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload1. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload2(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload2_id, xcall_params)  // call function pointer Logger_warn_overload2_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload2. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload3(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload3_id, xcall_params)  // call function pointer Logger_warn_overload3_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload3. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload4(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload4_id, xcall_params)  // call function pointer Logger_warn_overload4_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload4. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload5(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload5_id, xcall_params)  // call function pointer Logger_warn_overload5_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload5. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload6(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload6_id, xcall_params)  // call function pointer Logger_warn_overload6_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload6. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload7(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload7_id, xcall_params)  // call function pointer Logger_warn_overload7_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload7. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload8(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload8_id, xcall_params)  // call function pointer Logger_warn_overload8_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload8. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload9(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload9_id, xcall_params)  // call function pointer Logger_warn_overload9_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload9. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload10(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload10_id, xcall_params)  // call function pointer Logger_warn_overload10_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload10. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload11(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload11_id, xcall_params)  // call function pointer Logger_warn_overload11_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload11. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload12(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload12_id, xcall_params)  // call function pointer Logger_warn_overload12_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload12. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload13(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload13_id, xcall_params)  // call function pointer Logger_warn_overload13_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload13. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload14(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload14_id, xcall_params)  // call function pointer Logger_warn_overload14_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload14. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload15(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload15_id, xcall_params)  // call function pointer Logger_warn_overload15_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload15. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload16(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload16_id, xcall_params)  // call function pointer Logger_warn_overload16_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload16. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload17(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload17_id, xcall_params)  // call function pointer Logger_warn_overload17_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload17. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload18(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload18_id, xcall_params)  // call function pointer Logger_warn_overload18_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload18. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload19(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload19_id, xcall_params)  // call function pointer Logger_warn_overload19_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload19. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload20(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload20_id, xcall_params)  // call function pointer Logger_warn_overload20_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload20. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload21(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload21_id, xcall_params)  // call function pointer Logger_warn_overload21_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload21. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload22(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload22_id, xcall_params)  // call function pointer Logger_warn_overload22_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload22. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload23(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload23_id, xcall_params)  // call function pointer Logger_warn_overload23_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload23. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload24(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload24_id, xcall_params)  // call function pointer Logger_warn_overload24_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload24. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload25(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload25_id, xcall_params)  // call function pointer Logger_warn_overload25_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload25. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload26(p0 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(2, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload26_id, xcall_params)  // call function pointer Logger_warn_overload26_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload26. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload27(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload27_id, xcall_params)  // call function pointer Logger_warn_overload27_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload27. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload28(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload28_id, xcall_params)  // call function pointer Logger_warn_overload28_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload28. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload29(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload29_id, xcall_params)  // call function pointer Logger_warn_overload29_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload29. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload30(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload30_id, xcall_params)  // call function pointer Logger_warn_overload30_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload30. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload31(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload31_id, xcall_params)  // call function pointer Logger_warn_overload31_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload31. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload32(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload32_id, xcall_params)  // call function pointer Logger_warn_overload32_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload32. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload33(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload33_id, xcall_params)  // call function pointer Logger_warn_overload33_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload33. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload34(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload34_id, xcall_params)  // call function pointer Logger_warn_overload34_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload34. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload35(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload35_id, xcall_params)  // call function pointer Logger_warn_overload35_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload35. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload36(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload36_id, xcall_params)  // call function pointer Logger_warn_overload36_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload36. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload37(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{},p11 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(13, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	FromGoToCDT(p11, parametersCDTS, 12)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload37_id, xcall_params)  // call function pointer Logger_warn_overload37_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload37. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload38(p0 interface{},p1 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(3, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload38_id, xcall_params)  // call function pointer Logger_warn_overload38_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload38. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload39(p0 interface{},p1 interface{},p2 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(4, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload39_id, xcall_params)  // call function pointer Logger_warn_overload39_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload39. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload40(p0 interface{},p1 interface{},p2 interface{},p3 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(5, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload40_id, xcall_params)  // call function pointer Logger_warn_overload40_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload40. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload41(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(6, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload41_id, xcall_params)  // call function pointer Logger_warn_overload41_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload41. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload42(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload42_id, xcall_params)  // call function pointer Logger_warn_overload42_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload42. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload43(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(8, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload43_id, xcall_params)  // call function pointer Logger_warn_overload43_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload43. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload44(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(9, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload44_id, xcall_params)  // call function pointer Logger_warn_overload44_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload44. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload45(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(10, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload45_id, xcall_params)  // call function pointer Logger_warn_overload45_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload45. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload46(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(11, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload46_id, xcall_params)  // call function pointer Logger_warn_overload46_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload46. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) Warn_Overload47(p0 interface{},p1 interface{},p2 interface{},p3 interface{},p4 interface{},p5 interface{},p6 interface{},p7 interface{},p8 interface{},p9 interface{},p10 interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(12, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(p0, parametersCDTS, 1)
	
	FromGoToCDT(p1, parametersCDTS, 2)
	
	FromGoToCDT(p2, parametersCDTS, 3)
	
	FromGoToCDT(p3, parametersCDTS, 4)
	
	FromGoToCDT(p4, parametersCDTS, 5)
	
	FromGoToCDT(p5, parametersCDTS, 6)
	
	FromGoToCDT(p6, parametersCDTS, 7)
	
	FromGoToCDT(p7, parametersCDTS, 8)
	
	FromGoToCDT(p8, parametersCDTS, 9)
	
	FromGoToCDT(p9, parametersCDTS, 10)
	
	FromGoToCDT(p10, parametersCDTS, 11)
	
	

		err = XLLRXCallParamsNoRet(Logger_warn_overload47_id, xcall_params)  // call function pointer Logger_warn_overload47_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.warn_overload47. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) LogMessage(level interface{},marker interface{},fqcn interface{},location interface{},message interface{},throwable interface{}) ( err error){
	
	

	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(7, 0)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(level, parametersCDTS, 1)
	
	FromGoToCDT(marker, parametersCDTS, 2)
	
	FromGoToCDT(fqcn, parametersCDTS, 3)
	
	FromGoToCDT(location, parametersCDTS, 4)
	
	FromGoToCDT(message, parametersCDTS, 5)
	
	FromGoToCDT(throwable, parametersCDTS, 6)
	
	

		err = XLLRXCallParamsNoRet(Logger_logMessage_id, xcall_params)  // call function pointer Logger_logMessage_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.logMessage. Error: %v", err)
		return
	}

	
	

	return  nil
}

func (this *Logger) AtTrace() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_atTrace_id, xcall_params)  // call function pointer Logger_atTrace_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.atTrace. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) AtDebug() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_atDebug_id, xcall_params)  // call function pointer Logger_atDebug_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.atDebug. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) AtInfo() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_atInfo_id, xcall_params)  // call function pointer Logger_atInfo_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.atInfo. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) AtWarn() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_atWarn_id, xcall_params)  // call function pointer Logger_atWarn_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.atWarn. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) AtError() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_atError_id, xcall_params)  // call function pointer Logger_atError_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.atError. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) AtFatal() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_atFatal_id, xcall_params)  // call function pointer Logger_atFatal_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.atFatal. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) Always() (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(1, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	

		err = XLLRXCallParamsRet(Logger_always_id, xcall_params)  // call function pointer Logger_always_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.always. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}

func (this *Logger) AtLevel(level interface{}) (r0 interface{}, err error){
	
	

	xcall_params, parametersCDTS, return_valuesCDTS := XLLRAllocCDTSBuffer(2, 1)

	
	// parameters
	
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	
	FromGoToCDT(level, parametersCDTS, 1)
	
	

		err = XLLRXCallParamsRet(Logger_atLevel_id, xcall_params)  // call function pointer Logger_atLevel_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.atLevel. Error: %v", err)
		return
	}

	
	
	r0AsInterface := FromCDTToGo(return_valuesCDTS, 0)
	if r0AsInterface != nil{
		 		
		
		
		
		if obj, ok := r0AsInterface.(Handle); ok{ // None Go object			
			r0 = obj
		} else {
			r0 = interface{}(r0AsInterface.(interface{}))
		}
		

		
	}
	
	

	return r0, nil
}


func (this *Logger) ReleaseLogger( this_instance interface{}) ( err error){
	
	xcall_params, parametersCDTS, _ := XLLRAllocCDTSBuffer(1, 0)

	
	// parameters
	FromGoToCDT(this.h, parametersCDTS, 0) // object
	

		err = XLLRXCallParamsNoRet(Logger_ReleaseLogger_id, xcall_params)  // call function pointer Logger_ReleaseLogger_id via XLLR
	
	// check errors
	if err != nil{
		err = fmt.Errorf("Failed calling functionLogger.ReleaseLogger. Error: %v", err)
		return
	}

	
	

	return  nil
}





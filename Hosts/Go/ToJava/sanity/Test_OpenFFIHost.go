
// Code generated by OpenFFI. DO NOT EDIT.
// Host code for Test.proto
package sanity

import "fmt"
import "os"
import "unsafe"
import "github.com/golang/protobuf/proto"
import "runtime"
import "google.golang.org/protobuf/reflect/protoreflect"
import "google.golang.org/protobuf/runtime/protoimpl"
import "reflect"
import "sync"

/*
#cgo !windows LDFLAGS: -L. -ldl

#include <stdlib.h>
#include <stdint.h>
void* xllr_handle = NULL;
void (*pcall)(const char*, uint32_t,
			 const char*, uint32_t,
			 const char*, uint32_t,
			 unsigned char*, uint64_t,
			 unsigned char**, uint64_t*,
			 unsigned char**, uint64_t*,
			 uint8_t*) = NULL;

#ifdef _WIN32 //// --- START WINDOWS ---
#include <Windows.h>
void get_last_error_string(DWORD err, char** out_err_str)
{
    DWORD bufLen = FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |
                                 FORMAT_MESSAGE_FROM_SYSTEM |
							     FORMAT_MESSAGE_IGNORE_INSERTS,
							     NULL,
							     err,
						         MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
						         (LPTSTR) out_err_str,
						         0,
						         NULL );

    // TODO: out_err_str should get cleaned up!
}

void* load_library(const char* name, char** out_err)
{
	void* handle = LoadLibraryA(name);
	if(!handle)
	{
		get_last_error_string(GetLastError(), out_err);
	}

	return handle;
}

const char* free_library(void* lib) // return error string. null if no error.
{
	if(!lib)
	{
		return NULL;
	}

	if(!FreeLibrary(lib))
	{
		char* out_err;
		get_last_error_string(GetLastError(), &out_err);
		return out_err;
	}

	return NULL;
}

void* load_symbol(void* handle, const char* name, char** out_err)
{
	void* res = GetProcAddress(handle, name);
	if(!res)
	{
		get_last_error_string(GetLastError(), out_err);
		return NULL;
	}

	return res;
}

#else // ------ START POSIX ----
#include <dlfcn.h>
void* load_library(const char* name, char** out_err)
{
	void* handle = dlopen(name, RTLD_NOW);
	if(!handle)
	{
		*out_err = dlerror();
	}

	return handle;
}

const char* free_library(void* lib)
{
	if(dlclose(lib))
	{
		return dlerror();
	}

	return NULL;
}

void* load_symbol(void* handle, const char* name, char** out_err)
{
	void* res = dlsym(handle, name);
	if(!res)
	{
		*out_err = dlerror();
		return NULL;
	}

	return res;
}

#endif // ------- END POSIX -----

void call(
		const char* runtime_plugin, uint32_t runtime_plugin_len,
		const char* module_name, uint32_t module_name_len,
		const char* func_name, uint32_t func_name_len,
		unsigned char* in_params, uint64_t in_params_len,
		unsigned char** out_params, uint64_t* out_params_len,
		unsigned char** out_ret, uint64_t* out_ret_len,
		uint8_t* is_error
)
{
	pcall(runtime_plugin, runtime_plugin_len,
			module_name, module_name_len,
			func_name, func_name_len,
			in_params, in_params_len,
			out_params, out_params_len,
			out_ret, out_ret_len,
			is_error);
}

const char* load_xllr_api()
{
	char* out_err = NULL;
	pcall = load_symbol(xllr_handle, "call", &out_err);
	if(!pcall)
	{
		return out_err;
	}

	return NULL;
}

*/
import "C"

func freeXLLR() error{
	errstr := C.free_library(C.xllr_handle)

	if errstr != nil{
		return fmt.Errorf("Failed to free XLLR: %v", C.GoString(errstr))
	}

	return nil
}

// TODO: make sure it is called only once!
func loadXLLR() error{

	if C.xllr_handle != nil && C.pcall != nil{
        return nil
    }

	openffiHome := os.Getenv("OPENFFI_HOME")
    if openffiHome == ""{
    	return fmt.Errorf("OPENFFI_HOME is not set")
	}

	var name *C.char
	if runtime.GOOS == "darwin" {
		name = C.CString(openffiHome+"/xllr.dylib")
	}else if runtime.GOOS == "windows"{
		name = C.CString(openffiHome+"\\xllr.dll")
	} else {
		name = C.CString(openffiHome+"/xllr.so")
	}

	defer C.free(unsafe.Pointer(name))

	// TODO: load all other exported functions from XLLR
	var out_err *C.char
	if C.xllr_handle = C.load_library(name, &out_err)
	C.xllr_handle == nil{ // error has occurred
		return fmt.Errorf("Failed to load XLLR: %v", C.GoString(out_err))
	}

	callstr := C.CString("call")
    defer C.free(unsafe.Pointer(callstr))
    if cerr := C.load_xllr_api(); cerr != nil{
        return fmt.Errorf("Failed to load call function: %v", C.GoString(cerr))
    }

	return nil
}




// Code to call foreign functions in module Test via XLLR

// Call to foreign helloWorld
/*
prints hello_world.

*/

func HelloWorld() ( err error){

	// serialize parameters
	req := Void{}
	

	// load XLLR
	err = loadXLLR()
	if err != nil{
		err = fmt.Errorf("Failed to marshal return values into protobuf. Error: %v", err)
		return
	}
	
	// call function
	runtime_plugin := "xllr.openjdk"
	pruntime_plugin := C.CString(runtime_plugin)
	defer C.free(unsafe.Pointer(pruntime_plugin))

	module_name := "Test_OpenFFIGuest"
	pmodule_name := C.CString(module_name)
	defer C.free(unsafe.Pointer(pmodule_name))

	func_name := "EntryPoint_hello_world"
	pfunc_name := C.CString(func_name)
	defer C.free(unsafe.Pointer(pfunc_name))

	// in parameters
	in_params, err := proto.Marshal(&req)
	if err != nil{
		err = fmt.Errorf("Failed to marshal return values into protobuf. Error: %v", err)
		return
	}

	var pin_params *C.uchar
	var in_params_len C.uint64_t
	if len(in_params) > 0{
		pin_params = (*C.uchar)(unsafe.Pointer(&in_params[0]))
		in_params_len = C.uint64_t(len(in_params))
	} else {
		in_params_len = C.uint64_t(0)
	}

	var out_ret *C.uchar
	var out_ret_len C.uint64_t
	out_ret_len = C.uint64_t(0)

	var out_params *C.uchar
	var out_params_len C.uint64_t
	out_params_len = C.uint64_t(0)

	var out_is_error C.uchar
	out_is_error = C.uchar(0)

	C.call(pruntime_plugin, C.uint(len(runtime_plugin)),
			pmodule_name, C.uint(len(module_name)),
			pfunc_name, C.uint(len(func_name)),
			pin_params, in_params_len,
			&out_params, &out_params_len,
			&out_ret, &out_ret_len,
			&out_is_error)

	// check errors
	if out_is_error != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_ret), C.int(out_ret_len))))
		return
	}

	// deserialize result	
	ret := Void{}
	out_ret_buf := C.GoBytes(unsafe.Pointer(out_ret), C.int(out_ret_len))
	err = proto.Unmarshal(out_ret_buf, &ret)
	if err != nil{
		err = fmt.Errorf("Failed to unmarshal return values into protobuf. Error: %v", err)
		return
	}

	return  nil

}

// Call to foreign returnsAnError
/*
always returns an error.

*/

func ReturnsAnError() ( err error){

	// serialize parameters
	req := Void{}
	

	// load XLLR
	err = loadXLLR()
	if err != nil{
		err = fmt.Errorf("Failed to marshal return values into protobuf. Error: %v", err)
		return
	}
	
	// call function
	runtime_plugin := "xllr.openjdk"
	pruntime_plugin := C.CString(runtime_plugin)
	defer C.free(unsafe.Pointer(pruntime_plugin))

	module_name := "Test_OpenFFIGuest"
	pmodule_name := C.CString(module_name)
	defer C.free(unsafe.Pointer(pmodule_name))

	func_name := "EntryPoint_returns_an_error"
	pfunc_name := C.CString(func_name)
	defer C.free(unsafe.Pointer(pfunc_name))

	// in parameters
	in_params, err := proto.Marshal(&req)
	if err != nil{
		err = fmt.Errorf("Failed to marshal return values into protobuf. Error: %v", err)
		return
	}

	var pin_params *C.uchar
	var in_params_len C.uint64_t
	if len(in_params) > 0{
		pin_params = (*C.uchar)(unsafe.Pointer(&in_params[0]))
		in_params_len = C.uint64_t(len(in_params))
	} else {
		in_params_len = C.uint64_t(0)
	}

	var out_ret *C.uchar
	var out_ret_len C.uint64_t
	out_ret_len = C.uint64_t(0)

	var out_params *C.uchar
	var out_params_len C.uint64_t
	out_params_len = C.uint64_t(0)

	var out_is_error C.uchar
	out_is_error = C.uchar(0)

	C.call(pruntime_plugin, C.uint(len(runtime_plugin)),
			pmodule_name, C.uint(len(module_name)),
			pfunc_name, C.uint(len(func_name)),
			pin_params, in_params_len,
			&out_params, &out_params_len,
			&out_ret, &out_ret_len,
			&out_is_error)

	// check errors
	if out_is_error != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_ret), C.int(out_ret_len))))
		return
	}

	// deserialize result	
	ret := Void{}
	out_ret_buf := C.GoBytes(unsafe.Pointer(out_ret), C.int(out_ret_len))
	err = proto.Unmarshal(out_ret_buf, &ret)
	if err != nil{
		err = fmt.Errorf("Failed to unmarshal return values into protobuf. Error: %v", err)
		return
	}

	return  nil

}

// Call to foreign divIntegers
/*
divides two integers. If dividing in 0, return an error.

*/



func DivIntegers( x int32, y int32) (z float32, err error){

	// serialize parameters
	req := DivParams{}
	
	req.X = x
	
	req.Y = y
	

	// load XLLR
	err = loadXLLR()
	if err != nil{
		err = fmt.Errorf("Failed to marshal return values into protobuf. Error: %v", err)
		return
	}
	
	// call function
	runtime_plugin := "xllr.openjdk"
	pruntime_plugin := C.CString(runtime_plugin)
	defer C.free(unsafe.Pointer(pruntime_plugin))

	module_name := "Test_OpenFFIGuest"
	pmodule_name := C.CString(module_name)
	defer C.free(unsafe.Pointer(pmodule_name))

	func_name := "EntryPoint_div_integers"
	pfunc_name := C.CString(func_name)
	defer C.free(unsafe.Pointer(pfunc_name))

	// in parameters
	in_params, err := proto.Marshal(&req)
	if err != nil{
		err = fmt.Errorf("Failed to marshal return values into protobuf. Error: %v", err)
		return
	}

	var pin_params *C.uchar
	var in_params_len C.uint64_t
	if len(in_params) > 0{
		pin_params = (*C.uchar)(unsafe.Pointer(&in_params[0]))
		in_params_len = C.uint64_t(len(in_params))
	} else {
		in_params_len = C.uint64_t(0)
	}

	var out_ret *C.uchar
	var out_ret_len C.uint64_t
	out_ret_len = C.uint64_t(0)

	var out_params *C.uchar
	var out_params_len C.uint64_t
	out_params_len = C.uint64_t(0)

	var out_is_error C.uchar
	out_is_error = C.uchar(0)

	C.call(pruntime_plugin, C.uint(len(runtime_plugin)),
			pmodule_name, C.uint(len(module_name)),
			pfunc_name, C.uint(len(func_name)),
			pin_params, in_params_len,
			&out_params, &out_params_len,
			&out_ret, &out_ret_len,
			&out_is_error)

	// check errors
	if out_is_error != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_ret), C.int(out_ret_len))))
		return
	}

	// deserialize result	
	ret := DivReturn{}
	out_ret_buf := C.GoBytes(unsafe.Pointer(out_ret), C.int(out_ret_len))
	err = proto.Unmarshal(out_ret_buf, &ret)
	if err != nil{
		err = fmt.Errorf("Failed to unmarshal return values into protobuf. Error: %v", err)
		return
	}

	return ret.Z, nil

}

// Call to foreign joinStrings
/*
joins the strings using a comma separator

*/


func JoinStrings( strings []string) (result string, err error){

	// serialize parameters
	req := JoinStringsParams{}
	
	req.Strings = strings
	

	// load XLLR
	err = loadXLLR()
	if err != nil{
		err = fmt.Errorf("Failed to marshal return values into protobuf. Error: %v", err)
		return
	}
	
	// call function
	runtime_plugin := "xllr.openjdk"
	pruntime_plugin := C.CString(runtime_plugin)
	defer C.free(unsafe.Pointer(pruntime_plugin))

	module_name := "Test_OpenFFIGuest"
	pmodule_name := C.CString(module_name)
	defer C.free(unsafe.Pointer(pmodule_name))

	func_name := "EntryPoint_join_strings"
	pfunc_name := C.CString(func_name)
	defer C.free(unsafe.Pointer(pfunc_name))

	// in parameters
	in_params, err := proto.Marshal(&req)
	if err != nil{
		err = fmt.Errorf("Failed to marshal return values into protobuf. Error: %v", err)
		return
	}

	var pin_params *C.uchar
	var in_params_len C.uint64_t
	if len(in_params) > 0{
		pin_params = (*C.uchar)(unsafe.Pointer(&in_params[0]))
		in_params_len = C.uint64_t(len(in_params))
	} else {
		in_params_len = C.uint64_t(0)
	}

	var out_ret *C.uchar
	var out_ret_len C.uint64_t
	out_ret_len = C.uint64_t(0)

	var out_params *C.uchar
	var out_params_len C.uint64_t
	out_params_len = C.uint64_t(0)

	var out_is_error C.uchar
	out_is_error = C.uchar(0)

	C.call(pruntime_plugin, C.uint(len(runtime_plugin)),
			pmodule_name, C.uint(len(module_name)),
			pfunc_name, C.uint(len(func_name)),
			pin_params, in_params_len,
			&out_params, &out_params_len,
			&out_ret, &out_ret_len,
			&out_is_error)

	// check errors
	if out_is_error != 0{
		err = fmt.Errorf("Function failed. Error: %v", string(C.GoBytes(unsafe.Pointer(out_ret), C.int(out_ret_len))))
		return
	}

	// deserialize result	
	ret := JoinStringsReturn{}
	out_ret_buf := C.GoBytes(unsafe.Pointer(out_ret), C.int(out_ret_len))
	err = proto.Unmarshal(out_ret_buf, &ret)
	if err != nil{
		err = fmt.Errorf("Failed to unmarshal return values into protobuf. Error: %v", err)
		return
	}

	return ret.Result, nil

}



// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: Test



const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type DivParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	X int32 `protobuf:"varint,1,opt,name=x,proto3" json:"x,omitempty"`
	Y int32 `protobuf:"varint,2,opt,name=y,proto3" json:"y,omitempty"`
}

func (x *DivParams) Reset() {
	*x = DivParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivParams) ProtoMessage() {}

func (x *DivParams) ProtoReflect() protoreflect.Message {
	mi := &file_Test_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivParams.ProtoReflect.Descriptor instead.
func (*DivParams) Descriptor() ([]byte, []int) {
	return file_Test_rawDescGZIP(), []int{0}
}

func (x *DivParams) GetX() int32 {
	if x != nil {
		return x.X
	}
	return 0
}

func (x *DivParams) GetY() int32 {
	if x != nil {
		return x.Y
	}
	return 0
}

type DivReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Z float32 `protobuf:"fixed32,1,opt,name=z,proto3" json:"z,omitempty"`
}

func (x *DivReturn) Reset() {
	*x = DivReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DivReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DivReturn) ProtoMessage() {}

func (x *DivReturn) ProtoReflect() protoreflect.Message {
	mi := &file_Test_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DivReturn.ProtoReflect.Descriptor instead.
func (*DivReturn) Descriptor() ([]byte, []int) {
	return file_Test_rawDescGZIP(), []int{1}
}

func (x *DivReturn) GetZ() float32 {
	if x != nil {
		return x.Z
	}
	return 0
}

type JoinStringsParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Strings []string `protobuf:"bytes,1,rep,name=strings,proto3" json:"strings,omitempty"`
}

func (x *JoinStringsParams) Reset() {
	*x = JoinStringsParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinStringsParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinStringsParams) ProtoMessage() {}

func (x *JoinStringsParams) ProtoReflect() protoreflect.Message {
	mi := &file_Test_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinStringsParams.ProtoReflect.Descriptor instead.
func (*JoinStringsParams) Descriptor() ([]byte, []int) {
	return file_Test_rawDescGZIP(), []int{2}
}

func (x *JoinStringsParams) GetStrings() []string {
	if x != nil {
		return x.Strings
	}
	return nil
}

type JoinStringsReturn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *JoinStringsReturn) Reset() {
	*x = JoinStringsReturn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JoinStringsReturn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JoinStringsReturn) ProtoMessage() {}

func (x *JoinStringsReturn) ProtoReflect() protoreflect.Message {
	mi := &file_Test_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JoinStringsReturn.ProtoReflect.Descriptor instead.
func (*JoinStringsReturn) Descriptor() ([]byte, []int) {
	return file_Test_rawDescGZIP(), []int{3}
}

func (x *JoinStringsReturn) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

type Void struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Void) Reset() {
	*x = Void{}
	if protoimpl.UnsafeEnabled {
		mi := &file_Test_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Void) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Void) ProtoMessage() {}

func (x *Void) ProtoReflect() protoreflect.Message {
	mi := &file_Test_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Void.ProtoReflect.Descriptor instead.
func (*Void) Descriptor() ([]byte, []int) {
	return file_Test_rawDescGZIP(), []int{4}
}

var File_Test protoreflect.FileDescriptor

var file_Test_rawDesc = []byte{
	0x0a, 0x04, 0x54, 0x65, 0x73, 0x74, 0x22, 0x28, 0x0a, 0x0a, 0x64, 0x69, 0x76, 0x5f, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x0c, 0x0a, 0x01, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x01, 0x78, 0x12, 0x0c, 0x0a, 0x01, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x79,
	0x22, 0x1a, 0x0a, 0x0a, 0x64, 0x69, 0x76, 0x5f, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x12, 0x0c,
	0x0a, 0x01, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x01, 0x7a, 0x22, 0x2f, 0x0a, 0x13,
	0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x2d, 0x0a,
	0x13, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x5f, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x06, 0x0a, 0x04,
	0x56, 0x6f, 0x69, 0x64, 0x42, 0x06, 0x5a, 0x04, 0x6d, 0x61, 0x69, 0x6e, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_Test_rawDescOnce sync.Once
	file_Test_rawDescData = file_Test_rawDesc
)

func file_Test_rawDescGZIP() []byte {
	file_Test_rawDescOnce.Do(func() {
		file_Test_rawDescData = protoimpl.X.CompressGZIP(file_Test_rawDescData)
	})
	return file_Test_rawDescData
}

var file_Test_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_Test_goTypes = []interface{}{
	(*DivParams)(nil),         // 0: div_params
	(*DivReturn)(nil),         // 1: div_return
	(*JoinStringsParams)(nil), // 2: join_strings_params
	(*JoinStringsReturn)(nil), // 3: join_strings_return
	(*Void)(nil),              // 4: Void
}
var file_Test_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_Test_init() }
func file_Test_init() {
	if File_Test != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_Test_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DivReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinStringsParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JoinStringsReturn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_Test_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Void); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_Test_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_Test_goTypes,
		DependencyIndexes: file_Test_depIdxs,
		MessageInfos:      file_Test_msgTypes,
	}.Build()
	File_Test = out.File
	file_Test_rawDesc = nil
	file_Test_goTypes = nil
	file_Test_depIdxs = nil
}

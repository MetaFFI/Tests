
# Code generated by MetaFFI. DO NOT EDIT.
# Guest code for mcache.go

from ctypes import *
import ctypes.util
from typing import List
from typing import Any
from typing import Tuple
import platform
import os
from enum import Enum

xllr_handle = None
python_plugin_handle = None

def free_metaffi():
	global xllr_handle
	global runtime_plugin

	err = pointer((c_char * 1)(0))
	err_len = (c_ulonglong)(0)
	xllr_handle.free_runtime_plugin(runtime_plugin, len(runtime_plugin), byref(err), byref(err_len))

def load_xllr_and_python_plugin():
	global xllr_handle
	global python_plugin_handle
	
	if xllr_handle == None:
		xllr_handle = cdll.LoadLibrary(get_filename_to_load('xllr'))

	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))

		err = pointer((c_char * 1)(0))
		err_len = (c_ulonglong)(0)
		python_plugin_handle.load_runtime(byref(err), byref(err_len)) # in order to initialize python environment (e.g. define metaffi_handle class)

	# set restypes
	python_plugin_handle.convert_host_params_to_cdts.argstype = [py_object, py_object]
	python_plugin_handle.convert_host_params_to_cdts.restype = c_void_p
	python_plugin_handle.convert_host_return_values_from_cdts.argstype = [c_void_p, c_uint64]
	python_plugin_handle.convert_host_return_values_from_cdts.restype = py_object
	xllr_handle.alloc_cdts_buffer.restype = c_void_p
	xllr_handle.load_function.restype = CFUNCTYPE(None)

def get_filename_to_load(fname):
	osname = platform.system()
	if os.getenv('METAFFI_HOME') is None:
		raise RuntimeError('No METAFFI_HOME environment variable')
	elif fname is None:
		raise RuntimeError('fname is None')

	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so



cfunctype_params_ret = CFUNCTYPE(None)
cfunctype_params_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_params_no_ret = CFUNCTYPE(None)
cfunctype_params_no_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_no_params_ret = CFUNCTYPE(None)
cfunctype_no_params_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_no_params_no_ret = CFUNCTYPE(None)
cfunctype_no_params_no_ret.argtypes = [POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]

runtime_plugin = """xllr.go""".encode("utf-8")



GetTTL_FOREVER_id = c_void_p(0)










CacheDriver_StartInstance_id = c_void_p(0)

CacheDriver_New_id = c_void_p(0)



CacheDriver_Get_id = c_void_p(0)

CacheDriver_Set_id = c_void_p(0)

CacheDriver_Remove_id = c_void_p(0)

CacheDriver_Truncate_id = c_void_p(0)

CacheDriver_Len_id = c_void_p(0)

CacheDriver_GCBufferQueue_id = c_void_p(0)

CacheDriver_Close_id = c_void_p(0)

CacheDriver_SetPointer_id = c_void_p(0)

CacheDriver_GetPointer_id = c_void_p(0)


CacheDriver_ReleaseCacheDriver_id = c_void_p(0)



def load(module_path: str)->None:
	# load foreign functions
	load_xllr_and_python_plugin()

	
	
	global GetTTL_FOREVER_id
	
	

	

	

	

	
	global CacheDriver_StartInstance_id
	
	global CacheDriver_New_id
	

	
	global CacheDriver_Get_id
	
	global CacheDriver_Set_id
	
	global CacheDriver_Remove_id
	
	global CacheDriver_Truncate_id
	
	global CacheDriver_Len_id
	
	global CacheDriver_GCBufferQueue_id
	
	global CacheDriver_Close_id
	
	global CacheDriver_SetPointer_id
	
	global CacheDriver_GetPointer_id
	


	global CacheDriver_ReleaseCacheDriver_id

	
	

	err = POINTER(c_ubyte)()
	out_err = POINTER(POINTER(c_ubyte))(c_void_p(addressof(err)))
	err_len = c_uint32()
	out_err_len = POINTER(c_uint32)(c_void_p(addressof(err_len)))

	
	

	
	
	GetTTL_FOREVER_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_GetTTL_FOREVER,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_GetTTL_FOREVER,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), GetTTL_FOREVER_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(GetTTL_FOREVER_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	
	 

	

	
	
	CacheDriver_StartInstance_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_StartInstance,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_StartInstance,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_StartInstance_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(CacheDriver_StartInstance_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_New_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_New,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_New,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_New_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(CacheDriver_New_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	 

	
	CacheDriver_Get_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_Get,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_Get,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_Get_id, 2, 2, out_err, out_err_len), cfunctype_params_ret)
	if not bool(CacheDriver_Get_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_Set_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_Set,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_Set,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_Set_id, 4, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(CacheDriver_Set_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_Remove_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_Remove,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_Remove,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_Remove_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(CacheDriver_Remove_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_Truncate_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_Truncate,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_Truncate,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_Truncate_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(CacheDriver_Truncate_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_Len_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_Len,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_Len,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_Len_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(CacheDriver_Len_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_GCBufferQueue_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_GCBufferQueue,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_GCBufferQueue,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_GCBufferQueue_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(CacheDriver_GCBufferQueue_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_Close_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_Close,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_Close,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_Close_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(CacheDriver_Close_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_SetPointer_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_SetPointer,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_SetPointer,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_SetPointer_id, 4, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(CacheDriver_SetPointer_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	CacheDriver_GetPointer_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_GetPointer,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_GetPointer,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_GetPointer_id, 2, 2, out_err, out_err_len), cfunctype_params_ret)
	if not bool(CacheDriver_GetPointer_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	CacheDriver_ReleaseCacheDriver_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_CacheDriver_ReleaseCacheDriver,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8"), len('entrypoint_function=EntryPoint_CacheDriver_ReleaseCacheDriver,metaffi_guest_lib=mcache_MetaFFIGuest,module=github.com/OrlovEvgeny/go-mcache,package=mcache'.encode("utf-8")), CacheDriver_ReleaseCacheDriver_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(CacheDriver_ReleaseCacheDriver_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	
	


# Code to call foreign functions in module go via XLLR

# globals


def GetTTL_FOREVER():

	global xllr_handle
	global GetTTL_FOREVER_id
	global runtime_plugin
	global python_plugin_handle

	xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)

	# xcall function
	out_error = (c_char_p * 1)(0)
	out_error_len = (c_ulonglong)(0)
	GetTTL_FOREVER_id(c_void_p(xcall_params), out_error, byref(out_error_len))	
	if out_error is not None and out_error[0] is not None:
		err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
		raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))



	ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 0)
	return ret_vals[0]

 






# Class to call methods of foreign class CacheDriver
class CacheDriver:
	
	
	def __init__(self ):
		self.obj_handle = None
		
		global xllr_handle
		global CacheDriver_StartInstance_id
		global runtime_plugin
		global python_plugin_handle

		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)
	
		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_StartInstance_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


		# unpack results
	
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 0)

		self.obj_handle = ret_vals[0] # NOTICE: assuming first ret_val is the handle
	
	def __init__(self ):
		self.obj_handle = None
		
		global xllr_handle
		global CacheDriver_New_id
		global runtime_plugin
		global python_plugin_handle

		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)
	
		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_New_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


		# unpack results
	
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 0)

		self.obj_handle = ret_vals[0] # NOTICE: assuming first ret_val is the handle
	

	

	
	# released foreign object handle
	def __del__(self):
		
		global xllr_handle
		global CacheDriver_ReleaseCacheDriver_id
		global runtime_plugin
		global python_plugin_handle

		
		params = (self.obj_handle,)
		params_types = (32768,)
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_ReleaseCacheDriver_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	

	
	def Get(self,key:str)->Tuple[Any,bool]:
		
		global xllr_handle
		global CacheDriver_Get_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,key,)), py_object((32768,4096,)), 2)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_Get_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0],ret_vals[1]
	
	def Set(self,key:str,value:Any,ttl:int)->py_object:
		
		global xllr_handle
		global CacheDriver_Set_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,key,value,ttl,)), py_object((32768,4096,4194304,32,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_Set_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def Remove(self,key:str)->None:
		
		global xllr_handle
		global CacheDriver_Remove_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,key,)), py_object((32768,4096,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_Remove_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def Truncate(self)->None:
		
		global xllr_handle
		global CacheDriver_Truncate_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_Truncate_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def Len(self)->int:
		
		global xllr_handle
		global CacheDriver_Len_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_Len_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def GCBufferQueue(self)->int:
		
		global xllr_handle
		global CacheDriver_GCBufferQueue_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_GCBufferQueue_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def Close(self)->py_object:
		
		global xllr_handle
		global CacheDriver_Close_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_Close_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def SetPointer(self,key:str,value:Any,ttl:int)->py_object:
		
		global xllr_handle
		global CacheDriver_SetPointer_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,key,value,ttl,)), py_object((32768,4096,4194304,32,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_SetPointer_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def GetPointer(self,key:str)->Tuple[Any,bool]:
		
		global xllr_handle
		global CacheDriver_GetPointer_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,key,)), py_object((32768,4096,)), 2)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		CacheDriver_GetPointer_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0],ret_vals[1]
	






















 




# Code generated by MetaFFI. DO NOT EDIT.
# Guest code for TestFuncs.go

from ctypes import *
import ctypes.util
from typing import List
from typing import Any
from typing import Tuple
import platform
import os
from enum import Enum

xllr_handle = None
python_plugin_handle = None

def free_metaffi():
	global xllr_handle
	global runtime_plugin

	err = pointer((c_char * 1)(0))
	err_len = (c_ulonglong)(0)
	xllr_handle.free_runtime_plugin(runtime_plugin, len(runtime_plugin), byref(err), byref(err_len))

def load_xllr_and_python_plugin():
	global xllr_handle
	global python_plugin_handle
	
	if xllr_handle == None:
		xllr_handle = cdll.LoadLibrary(get_filename_to_load('xllr'))

	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))

		err = pointer((c_char * 1)(0))
		err_len = (c_ulonglong)(0)
		python_plugin_handle.load_runtime(byref(err), byref(err_len)) # in order to initialize python environment (e.g. define metaffi_handle class)

	# set restypes
	python_plugin_handle.convert_host_params_to_cdts.argstype = [py_object, py_object]
	python_plugin_handle.convert_host_params_to_cdts.restype = c_void_p
	python_plugin_handle.convert_host_return_values_from_cdts.argstype = [c_void_p, c_uint64]
	python_plugin_handle.convert_host_return_values_from_cdts.restype = py_object
	xllr_handle.alloc_cdts_buffer.restype = c_void_p
	xllr_handle.load_function.restype = CFUNCTYPE(None)

def get_filename_to_load(fname):
	osname = platform.system()
	if os.getenv('METAFFI_HOME') is None:
		raise RuntimeError('No METAFFI_HOME environment variable')
	elif fname is None:
		raise RuntimeError('fname is None')

	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so



cfunctype_params_ret = CFUNCTYPE(None)
cfunctype_params_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_params_no_ret = CFUNCTYPE(None)
cfunctype_params_no_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_no_params_ret = CFUNCTYPE(None)
cfunctype_no_params_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_no_params_no_ret = CFUNCTYPE(None)
cfunctype_no_params_no_ret.argtypes = [POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]

runtime_plugin = """xllr.go""".encode("utf-8")



GetFiveSeconds_id = c_void_p(0)




HelloWorld_id = c_void_p(0)

ReturnsAnError_id = c_void_p(0)

DivIntegers_id = c_void_p(0)

JoinStrings_id = c_void_p(0)

WaitABit_id = c_void_p(0)





TestMap_GetName_id = c_void_p(0)
TestMap_SetName_id = c_void_p(0)



TestMap_NewTestMap_id = c_void_p(0)



TestMap_Set_id = c_void_p(0)

TestMap_Get_id = c_void_p(0)

TestMap_Contains_id = c_void_p(0)


TestMap_ReleaseTestMap_id = c_void_p(0)



def load(module_path: str)->None:
	# load foreign functions
	load_xllr_and_python_plugin()

	
	
	global GetFiveSeconds_id
	
	

	
	global HelloWorld_id
	
	global ReturnsAnError_id
	
	global DivIntegers_id
	
	global JoinStrings_id
	
	global WaitABit_id
	

	

	
	global TestMap_GetName_id
	global TestMap_SetName_id
	

	
	global TestMap_NewTestMap_id
	

	
	global TestMap_Set_id
	
	global TestMap_Get_id
	
	global TestMap_Contains_id
	


	global TestMap_ReleaseTestMap_id

	
	

	err = POINTER(c_ubyte)()
	out_err = POINTER(POINTER(c_ubyte))(c_void_p(addressof(err)))
	err_len = c_uint32()
	out_err_len = POINTER(c_uint32)(c_void_p(addressof(err_len)))

	
	

	
	
	GetFiveSeconds_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_GetFiveSeconds,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_GetFiveSeconds,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), GetFiveSeconds_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(GetFiveSeconds_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	
	 

	
	HelloWorld_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_HelloWorld,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_HelloWorld,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), HelloWorld_id, 0, 0, out_err, out_err_len), cfunctype_no_params_no_ret)
	if not bool(HelloWorld_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	ReturnsAnError_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_ReturnsAnError,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_ReturnsAnError,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), ReturnsAnError_id, 0, 0, out_err, out_err_len), cfunctype_no_params_no_ret)
	if not bool(ReturnsAnError_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	DivIntegers_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_DivIntegers,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_DivIntegers,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), DivIntegers_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(DivIntegers_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	JoinStrings_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_JoinStrings,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_JoinStrings,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), JoinStrings_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(JoinStrings_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	WaitABit_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_WaitABit,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_WaitABit,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), WaitABit_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(WaitABit_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	
	TestMap_NewTestMap_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_TestMap_NewTestMap,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_TestMap_NewTestMap,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), TestMap_NewTestMap_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(TestMap_NewTestMap_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	
	TestMap_GetName_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_TestMap_GetName,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_TestMap_GetName,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), TestMap_GetName_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(TestMap_GetName_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	
	TestMap_SetName_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_TestMap_SetName,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_TestMap_SetName,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), TestMap_SetName_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(TestMap_SetName_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	 

	
	TestMap_Set_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_TestMap_Set,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_TestMap_Set,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), TestMap_Set_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(TestMap_Set_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	TestMap_Get_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_TestMap_Get,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_TestMap_Get,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), TestMap_Get_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(TestMap_Get_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	TestMap_Contains_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_TestMap_Contains,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_TestMap_Contains,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), TestMap_Contains_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(TestMap_Contains_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	TestMap_ReleaseTestMap_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), 'entrypoint_function=EntryPoint_TestMap_ReleaseTestMap,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_TestMap_ReleaseTestMap,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/mnt/c/src/github.com/MetaFFI/Tests/Hosts/Python3/ToGo/sanity,package=TestFuncs'.encode("utf-8")), TestMap_ReleaseTestMap_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(TestMap_ReleaseTestMap_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	
	


# Code to call foreign functions in module go via XLLR

# globals


def GetFiveSeconds():

	global xllr_handle
	global GetFiveSeconds_id
	global runtime_plugin
	global python_plugin_handle

	xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)

	# xcall function
	out_error = (c_char_p * 1)(0)
	out_error_len = (c_ulonglong)(0)
	GetFiveSeconds_id(c_void_p(xcall_params), out_error, byref(out_error_len))	
	if out_error is not None and out_error[0] is not None:
		err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
		raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))



	ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 0)
	return ret_vals[0]

 




# Call to foreign HelloWorld
def HelloWorld() -> ():

	global xllr_handle
	global HelloWorld_id
	global runtime_plugin
	global python_plugin_handle

	

	# xcall function
	out_error = (c_char_p * 1)(0)
	out_error_len = (c_ulonglong)(0)
	HelloWorld_id(out_error, byref(out_error_len))	
	if out_error is not None and out_error[0] is not None:
		err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
		raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


	
	return 

# Call to foreign ReturnsAnError
def ReturnsAnError() -> ():

	global xllr_handle
	global ReturnsAnError_id
	global runtime_plugin
	global python_plugin_handle

	

	# xcall function
	out_error = (c_char_p * 1)(0)
	out_error_len = (c_ulonglong)(0)
	ReturnsAnError_id(out_error, byref(out_error_len))	
	if out_error is not None and out_error[0] is not None:
		err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
		raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


	
	return 

# Call to foreign DivIntegers
def DivIntegers( x:int, y:int) -> (float):

	global xllr_handle
	global DivIntegers_id
	global runtime_plugin
	global python_plugin_handle

	xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((x,y,)), py_object((32,32,)), 1)

	# xcall function
	out_error = (c_char_p * 1)(0)
	out_error_len = (c_ulonglong)(0)
	DivIntegers_id(c_void_p(xcall_params), out_error, byref(out_error_len))	
	if out_error is not None and out_error[0] is not None:
		err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
		raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


	ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
	return ret_vals[0]

# Call to foreign JoinStrings
def JoinStrings( arrs:List[str]) -> (str):

	global xllr_handle
	global JoinStrings_id
	global runtime_plugin
	global python_plugin_handle

	xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((arrs,)), py_object((69632,)), 1)

	# xcall function
	out_error = (c_char_p * 1)(0)
	out_error_len = (c_ulonglong)(0)
	JoinStrings_id(c_void_p(xcall_params), out_error, byref(out_error_len))	
	if out_error is not None and out_error[0] is not None:
		err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
		raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


	ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
	return ret_vals[0]

# Call to foreign WaitABit
def WaitABit( d:int) -> (py_object):

	global xllr_handle
	global WaitABit_id
	global runtime_plugin
	global python_plugin_handle

	xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((d,)), py_object((32,)), 1)

	# xcall function
	out_error = (c_char_p * 1)(0)
	out_error_len = (c_ulonglong)(0)
	WaitABit_id(c_void_p(xcall_params), out_error, byref(out_error_len))	
	if out_error is not None and out_error[0] is not None:
		err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
		raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


	ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
	return ret_vals[0]



# Class to call methods of foreign class TestMap
class TestMap:
	
	
	def __init__(self ):
		self.obj_handle = None
		
		global xllr_handle
		global TestMap_NewTestMap_id
		global runtime_plugin
		global python_plugin_handle

		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)
	
		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		TestMap_NewTestMap_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


		# unpack results
	
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 0)

		self.obj_handle = ret_vals[0] # NOTICE: assuming first ret_val is the handle
	

	
	
	def GetName(self):
		
		global xllr_handle
		global TestMap_GetName_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)
	
		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		TestMap_GetName_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]


	 
	
	def SetName(self, Name ):
		
		global xllr_handle
		global TestMap_SetName_id
		global runtime_plugin
		global python_plugin_handle

		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,Name,)), py_object((32768,4096,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		TestMap_SetName_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


		
		return 
	
	

	
	# released foreign object handle
	def __del__(self):
		
		global xllr_handle
		global TestMap_ReleaseTestMap_id
		global runtime_plugin
		global python_plugin_handle

		
		params = (self.obj_handle,)
		params_types = (32768,)
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		TestMap_ReleaseTestMap_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	

	
	def Set(self,k:str,v:Any)->None:
		
		global xllr_handle
		global TestMap_Set_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,k,v,)), py_object((32768,4096,4194304,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		TestMap_Set_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def Get(self,k:str)->Any:
		
		global xllr_handle
		global TestMap_Get_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,k,)), py_object((32768,4096,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		TestMap_Get_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def Contains(self,k:str)->bool:
		
		global xllr_handle
		global TestMap_Contains_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,k,)), py_object((32768,4096,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		TestMap_Contains_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	










 




# Code generated by MetaFFI. DO NOT EDIT.
# Guest code for Logger

from ctypes import *
import ctypes.util
from typing import List
from typing import Any
from typing import Tuple
import platform
import os
from enum import Enum

xllr_handle = None
python_plugin_handle = None

def free_metaffi():
	global xllr_handle
	global runtime_plugin

	err = pointer((c_char * 1)(0))
	err_len = (c_ulonglong)(0)
	xllr_handle.free_runtime_plugin(runtime_plugin, len(runtime_plugin), byref(err), byref(err_len))


def dynamicTypeToMetaFFIType(obj):
	if isinstance(obj, float):
		return 1
	elif isinstance(obj, str):
		return 4096
	elif isinstance(obj, int):
		return 32
	elif isinstance(obj, bool):
		return 1024
	else:
		return 32768


def load_xllr_and_python_plugin():
	global xllr_handle
	global python_plugin_handle
	
	if xllr_handle == None:
		if platform.system()=='Windows':
			os.add_dll_directory(os.environ['METAFFI_HOME'])
			os.add_dll_directory(os.environ['METAFFI_HOME']+'\\bin')
		xllr_handle = cdll.LoadLibrary(get_filename_to_load('xllr'))

	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))

		err = pointer((c_char * 1)(0))
		err_len = (c_ulonglong)(0)
		python_plugin_handle.load_runtime(byref(err), byref(err_len)) # in order to initialize python environment (e.g. define metaffi_handle class)

	# set restypes
	python_plugin_handle.convert_host_params_to_cdts.argstype = [py_object, py_object]
	python_plugin_handle.convert_host_params_to_cdts.restype = c_void_p
	python_plugin_handle.convert_host_return_values_from_cdts.argstype = [c_void_p, c_uint64]
	python_plugin_handle.convert_host_return_values_from_cdts.restype = py_object
	xllr_handle.alloc_cdts_buffer.restype = c_void_p
	xllr_handle.load_function.restype = CFUNCTYPE(None)

def get_filename_to_load(fname):
	osname = platform.system()
	if os.getenv('METAFFI_HOME') is None:
		raise RuntimeError('No METAFFI_HOME environment variable')
	elif fname is None:
		raise RuntimeError('fname is None')

	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so



cfunctype_params_ret = CFUNCTYPE(None)
cfunctype_params_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_params_no_ret = CFUNCTYPE(None)
cfunctype_params_no_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_no_params_ret = CFUNCTYPE(None)
cfunctype_no_params_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_no_params_no_ret = CFUNCTYPE(None)
cfunctype_no_params_no_ret.argtypes = [POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]

runtime_plugin = """xllr.openjdk""".encode("utf-8")









LogManager_GetFACTORY_PROPERTY_NAME_id = c_void_p(0)


LogManager_GetROOT_LOGGER_NAME_id = c_void_p(0)






LogManager_exists_id = c_void_p(0)

LogManager_getContext_id = c_void_p(0)

LogManager_getContext_overload1_id = c_void_p(0)

LogManager_getContext_overload2_id = c_void_p(0)

LogManager_getContext_overload3_id = c_void_p(0)

LogManager_getContext_overload4_id = c_void_p(0)

LogManager_getContext_overload5_id = c_void_p(0)

LogManager_getContext_overload6_id = c_void_p(0)

LogManager_shutdown_id = c_void_p(0)

LogManager_shutdown_overload1_id = c_void_p(0)

LogManager_shutdown_overload2_id = c_void_p(0)

LogManager_shutdown_overload3_id = c_void_p(0)

LogManager_getFactory_id = c_void_p(0)

LogManager_setFactory_id = c_void_p(0)

LogManager_getFormatterLogger_id = c_void_p(0)

LogManager_getFormatterLogger_overload1_id = c_void_p(0)

LogManager_getFormatterLogger_overload2_id = c_void_p(0)

LogManager_getFormatterLogger_overload3_id = c_void_p(0)

LogManager_getLogger_id = c_void_p(0)

LogManager_getLogger_overload1_id = c_void_p(0)

LogManager_getLogger_overload2_id = c_void_p(0)

LogManager_getLogger_overload3_id = c_void_p(0)

LogManager_getLogger_overload4_id = c_void_p(0)

LogManager_getLogger_overload5_id = c_void_p(0)

LogManager_getLogger_overload6_id = c_void_p(0)

LogManager_getLogger_overload7_id = c_void_p(0)

LogManager_getRootLogger_id = c_void_p(0)


LogManager_ReleaseLogManager_id = c_void_p(0)








Logger_catching_id = c_void_p(0)

Logger_catching_overload1_id = c_void_p(0)

Logger_debug_id = c_void_p(0)

Logger_debug_overload1_id = c_void_p(0)

Logger_debug_overload2_id = c_void_p(0)

Logger_debug_overload3_id = c_void_p(0)

Logger_debug_overload4_id = c_void_p(0)

Logger_debug_overload5_id = c_void_p(0)

Logger_debug_overload6_id = c_void_p(0)

Logger_debug_overload7_id = c_void_p(0)

Logger_debug_overload8_id = c_void_p(0)

Logger_debug_overload9_id = c_void_p(0)

Logger_debug_overload10_id = c_void_p(0)

Logger_debug_overload11_id = c_void_p(0)

Logger_debug_overload12_id = c_void_p(0)

Logger_debug_overload13_id = c_void_p(0)

Logger_debug_overload14_id = c_void_p(0)

Logger_debug_overload15_id = c_void_p(0)

Logger_debug_overload16_id = c_void_p(0)

Logger_debug_overload17_id = c_void_p(0)

Logger_debug_overload18_id = c_void_p(0)

Logger_debug_overload19_id = c_void_p(0)

Logger_debug_overload20_id = c_void_p(0)

Logger_debug_overload21_id = c_void_p(0)

Logger_debug_overload22_id = c_void_p(0)

Logger_debug_overload23_id = c_void_p(0)

Logger_debug_overload24_id = c_void_p(0)

Logger_debug_overload25_id = c_void_p(0)

Logger_debug_overload26_id = c_void_p(0)

Logger_debug_overload27_id = c_void_p(0)

Logger_debug_overload28_id = c_void_p(0)

Logger_debug_overload29_id = c_void_p(0)

Logger_debug_overload30_id = c_void_p(0)

Logger_debug_overload31_id = c_void_p(0)

Logger_debug_overload32_id = c_void_p(0)

Logger_debug_overload33_id = c_void_p(0)

Logger_debug_overload34_id = c_void_p(0)

Logger_debug_overload35_id = c_void_p(0)

Logger_debug_overload36_id = c_void_p(0)

Logger_debug_overload37_id = c_void_p(0)

Logger_debug_overload38_id = c_void_p(0)

Logger_debug_overload39_id = c_void_p(0)

Logger_debug_overload40_id = c_void_p(0)

Logger_debug_overload41_id = c_void_p(0)

Logger_debug_overload42_id = c_void_p(0)

Logger_debug_overload43_id = c_void_p(0)

Logger_debug_overload44_id = c_void_p(0)

Logger_debug_overload45_id = c_void_p(0)

Logger_debug_overload46_id = c_void_p(0)

Logger_debug_overload47_id = c_void_p(0)

Logger_entry_id = c_void_p(0)

Logger_entry_overload1_id = c_void_p(0)

Logger_error_id = c_void_p(0)

Logger_error_overload1_id = c_void_p(0)

Logger_error_overload2_id = c_void_p(0)

Logger_error_overload3_id = c_void_p(0)

Logger_error_overload4_id = c_void_p(0)

Logger_error_overload5_id = c_void_p(0)

Logger_error_overload6_id = c_void_p(0)

Logger_error_overload7_id = c_void_p(0)

Logger_error_overload8_id = c_void_p(0)

Logger_error_overload9_id = c_void_p(0)

Logger_error_overload10_id = c_void_p(0)

Logger_error_overload11_id = c_void_p(0)

Logger_error_overload12_id = c_void_p(0)

Logger_error_overload13_id = c_void_p(0)

Logger_error_overload14_id = c_void_p(0)

Logger_error_overload15_id = c_void_p(0)

Logger_error_overload16_id = c_void_p(0)

Logger_error_overload17_id = c_void_p(0)

Logger_error_overload18_id = c_void_p(0)

Logger_error_overload19_id = c_void_p(0)

Logger_error_overload20_id = c_void_p(0)

Logger_error_overload21_id = c_void_p(0)

Logger_error_overload22_id = c_void_p(0)

Logger_error_overload23_id = c_void_p(0)

Logger_error_overload24_id = c_void_p(0)

Logger_error_overload25_id = c_void_p(0)

Logger_error_overload26_id = c_void_p(0)

Logger_error_overload27_id = c_void_p(0)

Logger_error_overload28_id = c_void_p(0)

Logger_error_overload29_id = c_void_p(0)

Logger_error_overload30_id = c_void_p(0)

Logger_error_overload31_id = c_void_p(0)

Logger_error_overload32_id = c_void_p(0)

Logger_error_overload33_id = c_void_p(0)

Logger_error_overload34_id = c_void_p(0)

Logger_error_overload35_id = c_void_p(0)

Logger_error_overload36_id = c_void_p(0)

Logger_error_overload37_id = c_void_p(0)

Logger_error_overload38_id = c_void_p(0)

Logger_error_overload39_id = c_void_p(0)

Logger_error_overload40_id = c_void_p(0)

Logger_error_overload41_id = c_void_p(0)

Logger_error_overload42_id = c_void_p(0)

Logger_error_overload43_id = c_void_p(0)

Logger_error_overload44_id = c_void_p(0)

Logger_error_overload45_id = c_void_p(0)

Logger_error_overload46_id = c_void_p(0)

Logger_error_overload47_id = c_void_p(0)

Logger_exit_id = c_void_p(0)

Logger_exit_overload1_id = c_void_p(0)

Logger_fatal_id = c_void_p(0)

Logger_fatal_overload1_id = c_void_p(0)

Logger_fatal_overload2_id = c_void_p(0)

Logger_fatal_overload3_id = c_void_p(0)

Logger_fatal_overload4_id = c_void_p(0)

Logger_fatal_overload5_id = c_void_p(0)

Logger_fatal_overload6_id = c_void_p(0)

Logger_fatal_overload7_id = c_void_p(0)

Logger_fatal_overload8_id = c_void_p(0)

Logger_fatal_overload9_id = c_void_p(0)

Logger_fatal_overload10_id = c_void_p(0)

Logger_fatal_overload11_id = c_void_p(0)

Logger_fatal_overload12_id = c_void_p(0)

Logger_fatal_overload13_id = c_void_p(0)

Logger_fatal_overload14_id = c_void_p(0)

Logger_fatal_overload15_id = c_void_p(0)

Logger_fatal_overload16_id = c_void_p(0)

Logger_fatal_overload17_id = c_void_p(0)

Logger_fatal_overload18_id = c_void_p(0)

Logger_fatal_overload19_id = c_void_p(0)

Logger_fatal_overload20_id = c_void_p(0)

Logger_fatal_overload21_id = c_void_p(0)

Logger_fatal_overload22_id = c_void_p(0)

Logger_fatal_overload23_id = c_void_p(0)

Logger_fatal_overload24_id = c_void_p(0)

Logger_fatal_overload25_id = c_void_p(0)

Logger_fatal_overload26_id = c_void_p(0)

Logger_fatal_overload27_id = c_void_p(0)

Logger_fatal_overload28_id = c_void_p(0)

Logger_fatal_overload29_id = c_void_p(0)

Logger_fatal_overload30_id = c_void_p(0)

Logger_fatal_overload31_id = c_void_p(0)

Logger_fatal_overload32_id = c_void_p(0)

Logger_fatal_overload33_id = c_void_p(0)

Logger_fatal_overload34_id = c_void_p(0)

Logger_fatal_overload35_id = c_void_p(0)

Logger_fatal_overload36_id = c_void_p(0)

Logger_fatal_overload37_id = c_void_p(0)

Logger_fatal_overload38_id = c_void_p(0)

Logger_fatal_overload39_id = c_void_p(0)

Logger_fatal_overload40_id = c_void_p(0)

Logger_fatal_overload41_id = c_void_p(0)

Logger_fatal_overload42_id = c_void_p(0)

Logger_fatal_overload43_id = c_void_p(0)

Logger_fatal_overload44_id = c_void_p(0)

Logger_fatal_overload45_id = c_void_p(0)

Logger_fatal_overload46_id = c_void_p(0)

Logger_fatal_overload47_id = c_void_p(0)

Logger_getLevel_id = c_void_p(0)

Logger_getMessageFactory_id = c_void_p(0)

Logger_getFlowMessageFactory_id = c_void_p(0)

Logger_getName_id = c_void_p(0)

Logger_info_id = c_void_p(0)

Logger_info_overload1_id = c_void_p(0)

Logger_info_overload2_id = c_void_p(0)

Logger_info_overload3_id = c_void_p(0)

Logger_info_overload4_id = c_void_p(0)

Logger_info_overload5_id = c_void_p(0)

Logger_info_overload6_id = c_void_p(0)

Logger_info_overload7_id = c_void_p(0)

Logger_info_overload8_id = c_void_p(0)

Logger_info_overload9_id = c_void_p(0)

Logger_info_overload10_id = c_void_p(0)

Logger_info_overload11_id = c_void_p(0)

Logger_info_overload12_id = c_void_p(0)

Logger_info_overload13_id = c_void_p(0)

Logger_info_overload14_id = c_void_p(0)

Logger_info_overload15_id = c_void_p(0)

Logger_info_overload16_id = c_void_p(0)

Logger_info_overload17_id = c_void_p(0)

Logger_info_overload18_id = c_void_p(0)

Logger_info_overload19_id = c_void_p(0)

Logger_info_overload20_id = c_void_p(0)

Logger_info_overload21_id = c_void_p(0)

Logger_info_overload22_id = c_void_p(0)

Logger_info_overload23_id = c_void_p(0)

Logger_info_overload24_id = c_void_p(0)

Logger_info_overload25_id = c_void_p(0)

Logger_info_overload26_id = c_void_p(0)

Logger_info_overload27_id = c_void_p(0)

Logger_info_overload28_id = c_void_p(0)

Logger_info_overload29_id = c_void_p(0)

Logger_info_overload30_id = c_void_p(0)

Logger_info_overload31_id = c_void_p(0)

Logger_info_overload32_id = c_void_p(0)

Logger_info_overload33_id = c_void_p(0)

Logger_info_overload34_id = c_void_p(0)

Logger_info_overload35_id = c_void_p(0)

Logger_info_overload36_id = c_void_p(0)

Logger_info_overload37_id = c_void_p(0)

Logger_info_overload38_id = c_void_p(0)

Logger_info_overload39_id = c_void_p(0)

Logger_info_overload40_id = c_void_p(0)

Logger_info_overload41_id = c_void_p(0)

Logger_info_overload42_id = c_void_p(0)

Logger_info_overload43_id = c_void_p(0)

Logger_info_overload44_id = c_void_p(0)

Logger_info_overload45_id = c_void_p(0)

Logger_info_overload46_id = c_void_p(0)

Logger_info_overload47_id = c_void_p(0)

Logger_isDebugEnabled_id = c_void_p(0)

Logger_isDebugEnabled_overload1_id = c_void_p(0)

Logger_isEnabled_id = c_void_p(0)

Logger_isEnabled_overload1_id = c_void_p(0)

Logger_isErrorEnabled_id = c_void_p(0)

Logger_isErrorEnabled_overload1_id = c_void_p(0)

Logger_isFatalEnabled_id = c_void_p(0)

Logger_isFatalEnabled_overload1_id = c_void_p(0)

Logger_isInfoEnabled_id = c_void_p(0)

Logger_isInfoEnabled_overload1_id = c_void_p(0)

Logger_isTraceEnabled_id = c_void_p(0)

Logger_isTraceEnabled_overload1_id = c_void_p(0)

Logger_isWarnEnabled_id = c_void_p(0)

Logger_isWarnEnabled_overload1_id = c_void_p(0)

Logger_log_id = c_void_p(0)

Logger_log_overload1_id = c_void_p(0)

Logger_log_overload2_id = c_void_p(0)

Logger_log_overload3_id = c_void_p(0)

Logger_log_overload4_id = c_void_p(0)

Logger_log_overload5_id = c_void_p(0)

Logger_log_overload6_id = c_void_p(0)

Logger_log_overload7_id = c_void_p(0)

Logger_log_overload8_id = c_void_p(0)

Logger_log_overload9_id = c_void_p(0)

Logger_log_overload10_id = c_void_p(0)

Logger_log_overload11_id = c_void_p(0)

Logger_log_overload12_id = c_void_p(0)

Logger_log_overload13_id = c_void_p(0)

Logger_log_overload14_id = c_void_p(0)

Logger_log_overload15_id = c_void_p(0)

Logger_log_overload16_id = c_void_p(0)

Logger_log_overload17_id = c_void_p(0)

Logger_log_overload18_id = c_void_p(0)

Logger_log_overload19_id = c_void_p(0)

Logger_log_overload20_id = c_void_p(0)

Logger_log_overload21_id = c_void_p(0)

Logger_log_overload22_id = c_void_p(0)

Logger_log_overload23_id = c_void_p(0)

Logger_log_overload24_id = c_void_p(0)

Logger_log_overload25_id = c_void_p(0)

Logger_log_overload26_id = c_void_p(0)

Logger_log_overload27_id = c_void_p(0)

Logger_log_overload28_id = c_void_p(0)

Logger_log_overload29_id = c_void_p(0)

Logger_log_overload30_id = c_void_p(0)

Logger_log_overload31_id = c_void_p(0)

Logger_log_overload32_id = c_void_p(0)

Logger_log_overload33_id = c_void_p(0)

Logger_log_overload34_id = c_void_p(0)

Logger_log_overload35_id = c_void_p(0)

Logger_log_overload36_id = c_void_p(0)

Logger_log_overload37_id = c_void_p(0)

Logger_log_overload38_id = c_void_p(0)

Logger_log_overload39_id = c_void_p(0)

Logger_log_overload40_id = c_void_p(0)

Logger_log_overload41_id = c_void_p(0)

Logger_log_overload42_id = c_void_p(0)

Logger_log_overload43_id = c_void_p(0)

Logger_log_overload44_id = c_void_p(0)

Logger_log_overload45_id = c_void_p(0)

Logger_log_overload46_id = c_void_p(0)

Logger_log_overload47_id = c_void_p(0)

Logger_printf_id = c_void_p(0)

Logger_printf_overload1_id = c_void_p(0)

Logger_throwing_id = c_void_p(0)

Logger_throwing_overload1_id = c_void_p(0)

Logger_trace_id = c_void_p(0)

Logger_trace_overload1_id = c_void_p(0)

Logger_trace_overload2_id = c_void_p(0)

Logger_trace_overload3_id = c_void_p(0)

Logger_trace_overload4_id = c_void_p(0)

Logger_trace_overload5_id = c_void_p(0)

Logger_trace_overload6_id = c_void_p(0)

Logger_trace_overload7_id = c_void_p(0)

Logger_trace_overload8_id = c_void_p(0)

Logger_trace_overload9_id = c_void_p(0)

Logger_trace_overload10_id = c_void_p(0)

Logger_trace_overload11_id = c_void_p(0)

Logger_trace_overload12_id = c_void_p(0)

Logger_trace_overload13_id = c_void_p(0)

Logger_trace_overload14_id = c_void_p(0)

Logger_trace_overload15_id = c_void_p(0)

Logger_trace_overload16_id = c_void_p(0)

Logger_trace_overload17_id = c_void_p(0)

Logger_trace_overload18_id = c_void_p(0)

Logger_trace_overload19_id = c_void_p(0)

Logger_trace_overload20_id = c_void_p(0)

Logger_trace_overload21_id = c_void_p(0)

Logger_trace_overload22_id = c_void_p(0)

Logger_trace_overload23_id = c_void_p(0)

Logger_trace_overload24_id = c_void_p(0)

Logger_trace_overload25_id = c_void_p(0)

Logger_trace_overload26_id = c_void_p(0)

Logger_trace_overload27_id = c_void_p(0)

Logger_trace_overload28_id = c_void_p(0)

Logger_trace_overload29_id = c_void_p(0)

Logger_trace_overload30_id = c_void_p(0)

Logger_trace_overload31_id = c_void_p(0)

Logger_trace_overload32_id = c_void_p(0)

Logger_trace_overload33_id = c_void_p(0)

Logger_trace_overload34_id = c_void_p(0)

Logger_trace_overload35_id = c_void_p(0)

Logger_trace_overload36_id = c_void_p(0)

Logger_trace_overload37_id = c_void_p(0)

Logger_trace_overload38_id = c_void_p(0)

Logger_trace_overload39_id = c_void_p(0)

Logger_trace_overload40_id = c_void_p(0)

Logger_trace_overload41_id = c_void_p(0)

Logger_trace_overload42_id = c_void_p(0)

Logger_trace_overload43_id = c_void_p(0)

Logger_trace_overload44_id = c_void_p(0)

Logger_trace_overload45_id = c_void_p(0)

Logger_trace_overload46_id = c_void_p(0)

Logger_trace_overload47_id = c_void_p(0)

Logger_traceEntry_id = c_void_p(0)

Logger_traceEntry_overload1_id = c_void_p(0)

Logger_traceEntry_overload2_id = c_void_p(0)

Logger_traceEntry_overload3_id = c_void_p(0)

Logger_traceEntry_overload4_id = c_void_p(0)

Logger_traceExit_id = c_void_p(0)

Logger_traceExit_overload1_id = c_void_p(0)

Logger_traceExit_overload2_id = c_void_p(0)

Logger_traceExit_overload3_id = c_void_p(0)

Logger_traceExit_overload4_id = c_void_p(0)

Logger_traceExit_overload5_id = c_void_p(0)

Logger_warn_id = c_void_p(0)

Logger_warn_overload1_id = c_void_p(0)

Logger_warn_overload2_id = c_void_p(0)

Logger_warn_overload3_id = c_void_p(0)

Logger_warn_overload4_id = c_void_p(0)

Logger_warn_overload5_id = c_void_p(0)

Logger_warn_overload6_id = c_void_p(0)

Logger_warn_overload7_id = c_void_p(0)

Logger_warn_overload8_id = c_void_p(0)

Logger_warn_overload9_id = c_void_p(0)

Logger_warn_overload10_id = c_void_p(0)

Logger_warn_overload11_id = c_void_p(0)

Logger_warn_overload12_id = c_void_p(0)

Logger_warn_overload13_id = c_void_p(0)

Logger_warn_overload14_id = c_void_p(0)

Logger_warn_overload15_id = c_void_p(0)

Logger_warn_overload16_id = c_void_p(0)

Logger_warn_overload17_id = c_void_p(0)

Logger_warn_overload18_id = c_void_p(0)

Logger_warn_overload19_id = c_void_p(0)

Logger_warn_overload20_id = c_void_p(0)

Logger_warn_overload21_id = c_void_p(0)

Logger_warn_overload22_id = c_void_p(0)

Logger_warn_overload23_id = c_void_p(0)

Logger_warn_overload24_id = c_void_p(0)

Logger_warn_overload25_id = c_void_p(0)

Logger_warn_overload26_id = c_void_p(0)

Logger_warn_overload27_id = c_void_p(0)

Logger_warn_overload28_id = c_void_p(0)

Logger_warn_overload29_id = c_void_p(0)

Logger_warn_overload30_id = c_void_p(0)

Logger_warn_overload31_id = c_void_p(0)

Logger_warn_overload32_id = c_void_p(0)

Logger_warn_overload33_id = c_void_p(0)

Logger_warn_overload34_id = c_void_p(0)

Logger_warn_overload35_id = c_void_p(0)

Logger_warn_overload36_id = c_void_p(0)

Logger_warn_overload37_id = c_void_p(0)

Logger_warn_overload38_id = c_void_p(0)

Logger_warn_overload39_id = c_void_p(0)

Logger_warn_overload40_id = c_void_p(0)

Logger_warn_overload41_id = c_void_p(0)

Logger_warn_overload42_id = c_void_p(0)

Logger_warn_overload43_id = c_void_p(0)

Logger_warn_overload44_id = c_void_p(0)

Logger_warn_overload45_id = c_void_p(0)

Logger_warn_overload46_id = c_void_p(0)

Logger_warn_overload47_id = c_void_p(0)

Logger_logMessage_id = c_void_p(0)

Logger_atTrace_id = c_void_p(0)

Logger_atDebug_id = c_void_p(0)

Logger_atInfo_id = c_void_p(0)

Logger_atWarn_id = c_void_p(0)

Logger_atError_id = c_void_p(0)

Logger_atFatal_id = c_void_p(0)

Logger_always_id = c_void_p(0)

Logger_atLevel_id = c_void_p(0)


Logger_ReleaseLogger_id = c_void_p(0)



def metaffi_load(module_path: str)->None:
	# load foreign functions
	load_xllr_and_python_plugin()

	
	

	

	

	
	global LogManager_GetFACTORY_PROPERTY_NAME_id
	
	
	global LogManager_GetROOT_LOGGER_NAME_id
	
	

	

	
	global LogManager_exists_id
	
	global LogManager_getContext_id
	
	global LogManager_getContext_overload1_id
	
	global LogManager_getContext_overload2_id
	
	global LogManager_getContext_overload3_id
	
	global LogManager_getContext_overload4_id
	
	global LogManager_getContext_overload5_id
	
	global LogManager_getContext_overload6_id
	
	global LogManager_shutdown_id
	
	global LogManager_shutdown_overload1_id
	
	global LogManager_shutdown_overload2_id
	
	global LogManager_shutdown_overload3_id
	
	global LogManager_getFactory_id
	
	global LogManager_setFactory_id
	
	global LogManager_getFormatterLogger_id
	
	global LogManager_getFormatterLogger_overload1_id
	
	global LogManager_getFormatterLogger_overload2_id
	
	global LogManager_getFormatterLogger_overload3_id
	
	global LogManager_getLogger_id
	
	global LogManager_getLogger_overload1_id
	
	global LogManager_getLogger_overload2_id
	
	global LogManager_getLogger_overload3_id
	
	global LogManager_getLogger_overload4_id
	
	global LogManager_getLogger_overload5_id
	
	global LogManager_getLogger_overload6_id
	
	global LogManager_getLogger_overload7_id
	
	global LogManager_getRootLogger_id
	


	global LogManager_ReleaseLogManager_id

	

	

	

	
	global Logger_catching_id
	
	global Logger_catching_overload1_id
	
	global Logger_debug_id
	
	global Logger_debug_overload1_id
	
	global Logger_debug_overload2_id
	
	global Logger_debug_overload3_id
	
	global Logger_debug_overload4_id
	
	global Logger_debug_overload5_id
	
	global Logger_debug_overload6_id
	
	global Logger_debug_overload7_id
	
	global Logger_debug_overload8_id
	
	global Logger_debug_overload9_id
	
	global Logger_debug_overload10_id
	
	global Logger_debug_overload11_id
	
	global Logger_debug_overload12_id
	
	global Logger_debug_overload13_id
	
	global Logger_debug_overload14_id
	
	global Logger_debug_overload15_id
	
	global Logger_debug_overload16_id
	
	global Logger_debug_overload17_id
	
	global Logger_debug_overload18_id
	
	global Logger_debug_overload19_id
	
	global Logger_debug_overload20_id
	
	global Logger_debug_overload21_id
	
	global Logger_debug_overload22_id
	
	global Logger_debug_overload23_id
	
	global Logger_debug_overload24_id
	
	global Logger_debug_overload25_id
	
	global Logger_debug_overload26_id
	
	global Logger_debug_overload27_id
	
	global Logger_debug_overload28_id
	
	global Logger_debug_overload29_id
	
	global Logger_debug_overload30_id
	
	global Logger_debug_overload31_id
	
	global Logger_debug_overload32_id
	
	global Logger_debug_overload33_id
	
	global Logger_debug_overload34_id
	
	global Logger_debug_overload35_id
	
	global Logger_debug_overload36_id
	
	global Logger_debug_overload37_id
	
	global Logger_debug_overload38_id
	
	global Logger_debug_overload39_id
	
	global Logger_debug_overload40_id
	
	global Logger_debug_overload41_id
	
	global Logger_debug_overload42_id
	
	global Logger_debug_overload43_id
	
	global Logger_debug_overload44_id
	
	global Logger_debug_overload45_id
	
	global Logger_debug_overload46_id
	
	global Logger_debug_overload47_id
	
	global Logger_entry_id
	
	global Logger_entry_overload1_id
	
	global Logger_error_id
	
	global Logger_error_overload1_id
	
	global Logger_error_overload2_id
	
	global Logger_error_overload3_id
	
	global Logger_error_overload4_id
	
	global Logger_error_overload5_id
	
	global Logger_error_overload6_id
	
	global Logger_error_overload7_id
	
	global Logger_error_overload8_id
	
	global Logger_error_overload9_id
	
	global Logger_error_overload10_id
	
	global Logger_error_overload11_id
	
	global Logger_error_overload12_id
	
	global Logger_error_overload13_id
	
	global Logger_error_overload14_id
	
	global Logger_error_overload15_id
	
	global Logger_error_overload16_id
	
	global Logger_error_overload17_id
	
	global Logger_error_overload18_id
	
	global Logger_error_overload19_id
	
	global Logger_error_overload20_id
	
	global Logger_error_overload21_id
	
	global Logger_error_overload22_id
	
	global Logger_error_overload23_id
	
	global Logger_error_overload24_id
	
	global Logger_error_overload25_id
	
	global Logger_error_overload26_id
	
	global Logger_error_overload27_id
	
	global Logger_error_overload28_id
	
	global Logger_error_overload29_id
	
	global Logger_error_overload30_id
	
	global Logger_error_overload31_id
	
	global Logger_error_overload32_id
	
	global Logger_error_overload33_id
	
	global Logger_error_overload34_id
	
	global Logger_error_overload35_id
	
	global Logger_error_overload36_id
	
	global Logger_error_overload37_id
	
	global Logger_error_overload38_id
	
	global Logger_error_overload39_id
	
	global Logger_error_overload40_id
	
	global Logger_error_overload41_id
	
	global Logger_error_overload42_id
	
	global Logger_error_overload43_id
	
	global Logger_error_overload44_id
	
	global Logger_error_overload45_id
	
	global Logger_error_overload46_id
	
	global Logger_error_overload47_id
	
	global Logger_exit_id
	
	global Logger_exit_overload1_id
	
	global Logger_fatal_id
	
	global Logger_fatal_overload1_id
	
	global Logger_fatal_overload2_id
	
	global Logger_fatal_overload3_id
	
	global Logger_fatal_overload4_id
	
	global Logger_fatal_overload5_id
	
	global Logger_fatal_overload6_id
	
	global Logger_fatal_overload7_id
	
	global Logger_fatal_overload8_id
	
	global Logger_fatal_overload9_id
	
	global Logger_fatal_overload10_id
	
	global Logger_fatal_overload11_id
	
	global Logger_fatal_overload12_id
	
	global Logger_fatal_overload13_id
	
	global Logger_fatal_overload14_id
	
	global Logger_fatal_overload15_id
	
	global Logger_fatal_overload16_id
	
	global Logger_fatal_overload17_id
	
	global Logger_fatal_overload18_id
	
	global Logger_fatal_overload19_id
	
	global Logger_fatal_overload20_id
	
	global Logger_fatal_overload21_id
	
	global Logger_fatal_overload22_id
	
	global Logger_fatal_overload23_id
	
	global Logger_fatal_overload24_id
	
	global Logger_fatal_overload25_id
	
	global Logger_fatal_overload26_id
	
	global Logger_fatal_overload27_id
	
	global Logger_fatal_overload28_id
	
	global Logger_fatal_overload29_id
	
	global Logger_fatal_overload30_id
	
	global Logger_fatal_overload31_id
	
	global Logger_fatal_overload32_id
	
	global Logger_fatal_overload33_id
	
	global Logger_fatal_overload34_id
	
	global Logger_fatal_overload35_id
	
	global Logger_fatal_overload36_id
	
	global Logger_fatal_overload37_id
	
	global Logger_fatal_overload38_id
	
	global Logger_fatal_overload39_id
	
	global Logger_fatal_overload40_id
	
	global Logger_fatal_overload41_id
	
	global Logger_fatal_overload42_id
	
	global Logger_fatal_overload43_id
	
	global Logger_fatal_overload44_id
	
	global Logger_fatal_overload45_id
	
	global Logger_fatal_overload46_id
	
	global Logger_fatal_overload47_id
	
	global Logger_getLevel_id
	
	global Logger_getMessageFactory_id
	
	global Logger_getFlowMessageFactory_id
	
	global Logger_getName_id
	
	global Logger_info_id
	
	global Logger_info_overload1_id
	
	global Logger_info_overload2_id
	
	global Logger_info_overload3_id
	
	global Logger_info_overload4_id
	
	global Logger_info_overload5_id
	
	global Logger_info_overload6_id
	
	global Logger_info_overload7_id
	
	global Logger_info_overload8_id
	
	global Logger_info_overload9_id
	
	global Logger_info_overload10_id
	
	global Logger_info_overload11_id
	
	global Logger_info_overload12_id
	
	global Logger_info_overload13_id
	
	global Logger_info_overload14_id
	
	global Logger_info_overload15_id
	
	global Logger_info_overload16_id
	
	global Logger_info_overload17_id
	
	global Logger_info_overload18_id
	
	global Logger_info_overload19_id
	
	global Logger_info_overload20_id
	
	global Logger_info_overload21_id
	
	global Logger_info_overload22_id
	
	global Logger_info_overload23_id
	
	global Logger_info_overload24_id
	
	global Logger_info_overload25_id
	
	global Logger_info_overload26_id
	
	global Logger_info_overload27_id
	
	global Logger_info_overload28_id
	
	global Logger_info_overload29_id
	
	global Logger_info_overload30_id
	
	global Logger_info_overload31_id
	
	global Logger_info_overload32_id
	
	global Logger_info_overload33_id
	
	global Logger_info_overload34_id
	
	global Logger_info_overload35_id
	
	global Logger_info_overload36_id
	
	global Logger_info_overload37_id
	
	global Logger_info_overload38_id
	
	global Logger_info_overload39_id
	
	global Logger_info_overload40_id
	
	global Logger_info_overload41_id
	
	global Logger_info_overload42_id
	
	global Logger_info_overload43_id
	
	global Logger_info_overload44_id
	
	global Logger_info_overload45_id
	
	global Logger_info_overload46_id
	
	global Logger_info_overload47_id
	
	global Logger_isDebugEnabled_id
	
	global Logger_isDebugEnabled_overload1_id
	
	global Logger_isEnabled_id
	
	global Logger_isEnabled_overload1_id
	
	global Logger_isErrorEnabled_id
	
	global Logger_isErrorEnabled_overload1_id
	
	global Logger_isFatalEnabled_id
	
	global Logger_isFatalEnabled_overload1_id
	
	global Logger_isInfoEnabled_id
	
	global Logger_isInfoEnabled_overload1_id
	
	global Logger_isTraceEnabled_id
	
	global Logger_isTraceEnabled_overload1_id
	
	global Logger_isWarnEnabled_id
	
	global Logger_isWarnEnabled_overload1_id
	
	global Logger_log_id
	
	global Logger_log_overload1_id
	
	global Logger_log_overload2_id
	
	global Logger_log_overload3_id
	
	global Logger_log_overload4_id
	
	global Logger_log_overload5_id
	
	global Logger_log_overload6_id
	
	global Logger_log_overload7_id
	
	global Logger_log_overload8_id
	
	global Logger_log_overload9_id
	
	global Logger_log_overload10_id
	
	global Logger_log_overload11_id
	
	global Logger_log_overload12_id
	
	global Logger_log_overload13_id
	
	global Logger_log_overload14_id
	
	global Logger_log_overload15_id
	
	global Logger_log_overload16_id
	
	global Logger_log_overload17_id
	
	global Logger_log_overload18_id
	
	global Logger_log_overload19_id
	
	global Logger_log_overload20_id
	
	global Logger_log_overload21_id
	
	global Logger_log_overload22_id
	
	global Logger_log_overload23_id
	
	global Logger_log_overload24_id
	
	global Logger_log_overload25_id
	
	global Logger_log_overload26_id
	
	global Logger_log_overload27_id
	
	global Logger_log_overload28_id
	
	global Logger_log_overload29_id
	
	global Logger_log_overload30_id
	
	global Logger_log_overload31_id
	
	global Logger_log_overload32_id
	
	global Logger_log_overload33_id
	
	global Logger_log_overload34_id
	
	global Logger_log_overload35_id
	
	global Logger_log_overload36_id
	
	global Logger_log_overload37_id
	
	global Logger_log_overload38_id
	
	global Logger_log_overload39_id
	
	global Logger_log_overload40_id
	
	global Logger_log_overload41_id
	
	global Logger_log_overload42_id
	
	global Logger_log_overload43_id
	
	global Logger_log_overload44_id
	
	global Logger_log_overload45_id
	
	global Logger_log_overload46_id
	
	global Logger_log_overload47_id
	
	global Logger_printf_id
	
	global Logger_printf_overload1_id
	
	global Logger_throwing_id
	
	global Logger_throwing_overload1_id
	
	global Logger_trace_id
	
	global Logger_trace_overload1_id
	
	global Logger_trace_overload2_id
	
	global Logger_trace_overload3_id
	
	global Logger_trace_overload4_id
	
	global Logger_trace_overload5_id
	
	global Logger_trace_overload6_id
	
	global Logger_trace_overload7_id
	
	global Logger_trace_overload8_id
	
	global Logger_trace_overload9_id
	
	global Logger_trace_overload10_id
	
	global Logger_trace_overload11_id
	
	global Logger_trace_overload12_id
	
	global Logger_trace_overload13_id
	
	global Logger_trace_overload14_id
	
	global Logger_trace_overload15_id
	
	global Logger_trace_overload16_id
	
	global Logger_trace_overload17_id
	
	global Logger_trace_overload18_id
	
	global Logger_trace_overload19_id
	
	global Logger_trace_overload20_id
	
	global Logger_trace_overload21_id
	
	global Logger_trace_overload22_id
	
	global Logger_trace_overload23_id
	
	global Logger_trace_overload24_id
	
	global Logger_trace_overload25_id
	
	global Logger_trace_overload26_id
	
	global Logger_trace_overload27_id
	
	global Logger_trace_overload28_id
	
	global Logger_trace_overload29_id
	
	global Logger_trace_overload30_id
	
	global Logger_trace_overload31_id
	
	global Logger_trace_overload32_id
	
	global Logger_trace_overload33_id
	
	global Logger_trace_overload34_id
	
	global Logger_trace_overload35_id
	
	global Logger_trace_overload36_id
	
	global Logger_trace_overload37_id
	
	global Logger_trace_overload38_id
	
	global Logger_trace_overload39_id
	
	global Logger_trace_overload40_id
	
	global Logger_trace_overload41_id
	
	global Logger_trace_overload42_id
	
	global Logger_trace_overload43_id
	
	global Logger_trace_overload44_id
	
	global Logger_trace_overload45_id
	
	global Logger_trace_overload46_id
	
	global Logger_trace_overload47_id
	
	global Logger_traceEntry_id
	
	global Logger_traceEntry_overload1_id
	
	global Logger_traceEntry_overload2_id
	
	global Logger_traceEntry_overload3_id
	
	global Logger_traceEntry_overload4_id
	
	global Logger_traceExit_id
	
	global Logger_traceExit_overload1_id
	
	global Logger_traceExit_overload2_id
	
	global Logger_traceExit_overload3_id
	
	global Logger_traceExit_overload4_id
	
	global Logger_traceExit_overload5_id
	
	global Logger_warn_id
	
	global Logger_warn_overload1_id
	
	global Logger_warn_overload2_id
	
	global Logger_warn_overload3_id
	
	global Logger_warn_overload4_id
	
	global Logger_warn_overload5_id
	
	global Logger_warn_overload6_id
	
	global Logger_warn_overload7_id
	
	global Logger_warn_overload8_id
	
	global Logger_warn_overload9_id
	
	global Logger_warn_overload10_id
	
	global Logger_warn_overload11_id
	
	global Logger_warn_overload12_id
	
	global Logger_warn_overload13_id
	
	global Logger_warn_overload14_id
	
	global Logger_warn_overload15_id
	
	global Logger_warn_overload16_id
	
	global Logger_warn_overload17_id
	
	global Logger_warn_overload18_id
	
	global Logger_warn_overload19_id
	
	global Logger_warn_overload20_id
	
	global Logger_warn_overload21_id
	
	global Logger_warn_overload22_id
	
	global Logger_warn_overload23_id
	
	global Logger_warn_overload24_id
	
	global Logger_warn_overload25_id
	
	global Logger_warn_overload26_id
	
	global Logger_warn_overload27_id
	
	global Logger_warn_overload28_id
	
	global Logger_warn_overload29_id
	
	global Logger_warn_overload30_id
	
	global Logger_warn_overload31_id
	
	global Logger_warn_overload32_id
	
	global Logger_warn_overload33_id
	
	global Logger_warn_overload34_id
	
	global Logger_warn_overload35_id
	
	global Logger_warn_overload36_id
	
	global Logger_warn_overload37_id
	
	global Logger_warn_overload38_id
	
	global Logger_warn_overload39_id
	
	global Logger_warn_overload40_id
	
	global Logger_warn_overload41_id
	
	global Logger_warn_overload42_id
	
	global Logger_warn_overload43_id
	
	global Logger_warn_overload44_id
	
	global Logger_warn_overload45_id
	
	global Logger_warn_overload46_id
	
	global Logger_warn_overload47_id
	
	global Logger_logMessage_id
	
	global Logger_atTrace_id
	
	global Logger_atDebug_id
	
	global Logger_atInfo_id
	
	global Logger_atWarn_id
	
	global Logger_atError_id
	
	global Logger_atFatal_id
	
	global Logger_always_id
	
	global Logger_atLevel_id
	


	global Logger_ReleaseLogger_id

	
	

	err = POINTER(c_ubyte)()
	out_err = POINTER(POINTER(c_ubyte))(c_void_p(addressof(err)))
	err_len = c_uint32()
	out_err_len = POINTER(c_uint32)(c_void_p(addressof(err_len)))

	
	

	 

	

	
	

	
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_get_GetFACTORY_PROPERTY_NAME,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_GetFACTORY_PROPERTY_NAME_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_GetFACTORY_PROPERTY_NAME_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(LogManager_GetFACTORY_PROPERTY_NAME_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	
	
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_get_GetROOT_LOGGER_NAME,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_GetROOT_LOGGER_NAME_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_GetROOT_LOGGER_NAME_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(LogManager_GetROOT_LOGGER_NAME_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	
	 

	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_exists,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_exists_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_exists_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_exists_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getContext_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getContext_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(LogManager_getContext_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getContext_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getContext_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getContext_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getContext_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getContext_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getContext_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getContext_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getContext_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getContext_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getContext_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getContext_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getContext_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getContext_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getContext_id, 4, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getContext_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getContext6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getContext_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getContext_id, 5, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getContext_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_shutdown,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_shutdown_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_shutdown_id, 0, 0, out_err, out_err_len), cfunctype_no_params_no_ret)
	if not bool(LogManager_shutdown_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_shutdown1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_shutdown_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_shutdown_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(LogManager_shutdown_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_shutdown2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_shutdown_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_shutdown_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(LogManager_shutdown_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_shutdown3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_shutdown_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_shutdown_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(LogManager_shutdown_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFactory,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getFactory_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getFactory_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(LogManager_getFactory_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_setFactory,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_setFactory_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_setFactory_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(LogManager_setFactory_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFormatterLogger,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getFormatterLogger_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getFormatterLogger_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(LogManager_getFormatterLogger_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFormatterLogger1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getFormatterLogger_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getFormatterLogger_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getFormatterLogger_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFormatterLogger2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getFormatterLogger_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getFormatterLogger_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getFormatterLogger_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getFormatterLogger3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getFormatterLogger_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getFormatterLogger_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getFormatterLogger_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getLogger_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getLogger_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(LogManager_getLogger_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getLogger_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getLogger_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getLogger_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getLogger_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getLogger_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getLogger_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getLogger_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getLogger_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getLogger_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getLogger_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getLogger_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getLogger_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getLogger_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getLogger_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getLogger_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getLogger_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getLogger_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getLogger_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getLogger7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getLogger_overload7_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getLogger_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(LogManager_getLogger_overload7_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_getRootLogger,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_getRootLogger_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_getRootLogger_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(LogManager_getRootLogger_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	function_path_str = r"""entrypoint_class=LogManager_Entrypoints,entrypoint_function=EntryPoint_LogManager_ReleaseLogManager,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	LogManager_ReleaseLogManager_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), LogManager_ReleaseLogManager_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(LogManager_ReleaseLogManager_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	

	 

	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_catching,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_catching_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_catching_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_catching_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_catching1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_catching_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_catching_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_catching_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload7_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload7_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload8_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload8_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload9_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload9_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload10_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload10_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload11_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload11_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload12_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload12_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload13_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload13_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload14_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload14_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload15_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload15_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload16_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload16_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload17_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload17_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload18_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload18_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload19_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload19_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload20_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload20_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload21_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload21_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload22_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload22_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload23_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload23_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload24_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload24_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload25_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload25_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload26_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload26_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload27_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload27_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload28_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload28_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload29_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload29_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload30_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload30_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload31_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload31_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload32_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload32_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload33_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload33_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload34_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload34_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload35_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload35_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload36_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload36_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload37_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 13, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload37_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload38_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload38_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload39_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload39_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload40_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload40_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload41_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload41_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload42_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload42_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload43_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload43_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload44_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload44_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload45_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload45_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload46_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload46_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_debug47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_debug_overload47_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_debug_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_debug_overload47_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_entry,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_entry_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_entry_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_entry_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_entry1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_entry_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_entry_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_entry_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload7_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload7_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload8_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload8_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload9_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload9_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload10_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload10_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload11_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload11_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload12_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload12_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload13_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload13_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload14_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload14_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload15_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload15_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload16_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload16_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload17_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload17_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload18_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload18_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload19_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload19_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload20_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload20_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload21_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload21_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload22_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload22_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload23_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload23_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload24_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload24_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload25_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload25_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload26_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload26_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload27_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload27_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload28_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload28_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload29_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload29_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload30_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload30_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload31_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload31_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload32_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload32_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload33_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload33_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload34_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload34_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload35_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload35_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload36_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload36_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload37_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 13, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload37_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload38_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload38_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload39_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload39_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload40_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload40_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload41_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload41_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload42_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload42_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload43_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload43_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload44_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload44_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload45_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload45_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload46_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload46_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_error47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_error_overload47_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_error_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_error_overload47_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_exit,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_exit_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_exit_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_exit_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_exit1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_exit_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_exit_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_exit_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload7_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload7_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload8_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload8_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload9_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload9_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload10_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload10_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload11_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload11_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload12_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload12_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload13_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload13_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload14_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload14_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload15_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload15_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload16_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload16_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload17_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload17_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload18_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload18_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload19_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload19_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload20_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload20_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload21_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload21_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload22_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload22_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload23_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload23_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload24_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload24_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload25_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload25_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload26_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload26_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload27_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload27_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload28_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload28_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload29_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload29_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload30_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload30_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload31_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload31_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload32_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload32_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload33_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload33_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload34_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload34_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload35_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload35_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload36_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload36_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload37_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 13, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload37_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload38_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload38_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload39_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload39_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload40_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload40_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload41_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload41_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload42_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload42_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload43_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload43_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload44_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload44_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload45_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload45_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload46_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload46_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_fatal47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_fatal_overload47_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_fatal_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_fatal_overload47_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_getLevel,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_getLevel_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_getLevel_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_getLevel_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_getMessageFactory,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_getMessageFactory_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_getMessageFactory_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_getMessageFactory_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_getFlowMessageFactory,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_getFlowMessageFactory_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_getFlowMessageFactory_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_getFlowMessageFactory_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_getName,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_getName_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_getName_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_getName_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload7_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload7_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload8_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload8_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload9_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload9_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload10_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload10_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload11_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload11_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload12_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload12_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload13_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload13_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload14_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload14_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload15_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload15_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload16_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload16_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload17_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload17_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload18_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload18_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload19_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload19_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload20_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload20_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload21_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload21_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload22_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload22_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload23_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload23_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload24_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload24_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload25_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload25_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload26_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload26_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload27_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload27_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload28_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload28_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload29_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload29_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload30_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload30_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload31_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload31_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload32_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload32_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload33_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload33_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload34_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload34_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload35_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload35_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload36_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload36_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload37_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 13, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload37_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload38_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload38_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload39_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload39_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload40_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload40_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload41_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload41_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload42_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload42_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload43_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload43_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload44_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload44_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload45_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload45_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload46_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload46_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_info47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_info_overload47_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_info_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_info_overload47_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isDebugEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isDebugEnabled_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isDebugEnabled_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isDebugEnabled_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isDebugEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isDebugEnabled_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isDebugEnabled_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isDebugEnabled_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isEnabled_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isEnabled_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isEnabled_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isEnabled_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isEnabled_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isEnabled_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isErrorEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isErrorEnabled_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isErrorEnabled_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isErrorEnabled_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isErrorEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isErrorEnabled_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isErrorEnabled_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isErrorEnabled_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isFatalEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isFatalEnabled_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isFatalEnabled_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isFatalEnabled_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isFatalEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isFatalEnabled_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isFatalEnabled_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isFatalEnabled_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isInfoEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isInfoEnabled_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isInfoEnabled_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isInfoEnabled_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isInfoEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isInfoEnabled_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isInfoEnabled_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isInfoEnabled_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isTraceEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isTraceEnabled_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isTraceEnabled_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isTraceEnabled_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isTraceEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isTraceEnabled_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isTraceEnabled_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isTraceEnabled_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isWarnEnabled,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isWarnEnabled_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isWarnEnabled_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isWarnEnabled_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_isWarnEnabled1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_isWarnEnabled_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_isWarnEnabled_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_isWarnEnabled_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload7_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload7_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload8_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload8_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload9_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload9_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload10_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload10_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload11_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload11_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload12_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload12_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload13_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload13_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload14_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload14_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload15_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload15_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload16_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload16_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload17_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload17_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload18_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload18_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload19_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload19_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload20_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload20_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload21_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload21_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload22_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload22_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload23_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload23_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload24_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload24_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload25_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload25_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload26_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload26_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload27_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload27_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload28_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload28_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload29_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload29_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload30_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload30_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload31_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload31_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload32_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload32_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload33_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload33_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload34_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload34_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload35_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload35_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload36_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 13, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload36_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload37_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 14, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload37_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload38_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload38_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload39_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload39_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload40_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload40_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload41_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload41_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload42_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload42_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload43_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload43_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload44_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload44_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload45_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload45_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload46_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload46_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_log47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_log_overload47_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_log_id, 13, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_log_overload47_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_printf,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_printf_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_printf_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_printf_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_printf1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_printf_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_printf_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_printf_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_throwing,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_throwing_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_throwing_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_throwing_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_throwing1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_throwing_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_throwing_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_throwing_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload7_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload7_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload8_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload8_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload9_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload9_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload10_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload10_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload11_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload11_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload12_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload12_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload13_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload13_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload14_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload14_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload15_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload15_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload16_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload16_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload17_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload17_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload18_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload18_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload19_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload19_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload20_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload20_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload21_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload21_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload22_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload22_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload23_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload23_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload24_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload24_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload25_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload25_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload26_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload26_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload27_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload27_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload28_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload28_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload29_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload29_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload30_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload30_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload31_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload31_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload32_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload32_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload33_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload33_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload34_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload34_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload35_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload35_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload36_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload36_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload37_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 13, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload37_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload38_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload38_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload39_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload39_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload40_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload40_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload41_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload41_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload42_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload42_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload43_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload43_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload44_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload44_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload45_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload45_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload46_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload46_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_trace47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_trace_overload47_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_trace_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_trace_overload47_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceEntry_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceEntry_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceEntry_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceEntry_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceEntry_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceEntry_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceEntry_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceEntry_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceEntry_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceEntry_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceEntry_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceEntry_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceEntry4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceEntry_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceEntry_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceEntry_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceExit_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceExit_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_traceExit_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceExit_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceExit_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceExit_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceExit_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceExit_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceExit_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceExit_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceExit_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_traceExit_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceExit_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceExit_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceExit_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_traceExit5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_traceExit_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_traceExit_id, 3, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_traceExit_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn1,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload1_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload1_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn2,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload2_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload2_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn3,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload3_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload3_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn4,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload4_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload4_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn5,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload5_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload5_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn6,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload6_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload6_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn7,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload7_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload7_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn8,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload8_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload8_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn9,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload9_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload9_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn10,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload10_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload10_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn11,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload11_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload11_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn12,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload12_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload12_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn13,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload13_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload13_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn14,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload14_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload14_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn15,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload15_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload15_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn16,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload16_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload16_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn17,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload17_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload17_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn18,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload18_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload18_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn19,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload19_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload19_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn20,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload20_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload20_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn21,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload21_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload21_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn22,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload22_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload22_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn23,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload23_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload23_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn24,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload24_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload24_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn25,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload25_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload25_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn26,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload26_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 2, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload26_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn27,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload27_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload27_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn28,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload28_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload28_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn29,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload29_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload29_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn30,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload30_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload30_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn31,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload31_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload31_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn32,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload32_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload32_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn33,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload33_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload33_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn34,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload34_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload34_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn35,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload35_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload35_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn36,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload36_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload36_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn37,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload37_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 13, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload37_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn38,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload38_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 3, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload38_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn39,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload39_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 4, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload39_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn40,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload40_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 5, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload40_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn41,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload41_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 6, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload41_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn42,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload42_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload42_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn43,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload43_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 8, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload43_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn44,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload44_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 9, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload44_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn45,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload45_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 10, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload45_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn46,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload46_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 11, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload46_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_warn47,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_warn_overload47_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_warn_id, 12, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_warn_overload47_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_logMessage,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_logMessage_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_logMessage_id, 7, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_logMessage_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atTrace,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_atTrace_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_atTrace_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_atTrace_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atDebug,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_atDebug_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_atDebug_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_atDebug_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atInfo,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_atInfo_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_atInfo_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_atInfo_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atWarn,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_atWarn_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_atWarn_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_atWarn_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atError,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_atError_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_atError_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_atError_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atFatal,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_atFatal_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_atFatal_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_atFatal_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_always,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_always_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_always_id, 1, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_always_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_atLevel,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_atLevel_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_atLevel_id, 2, 1, out_err, out_err_len), cfunctype_params_ret)
	if not bool(Logger_atLevel_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	function_path_str = r"""entrypoint_class=Logger_Entrypoints,entrypoint_function=EntryPoint_Logger_ReleaseLogger,metaffi_guest_lib=Logger_MetaFFIGuest,module=Logger,package=org.apache.logging.log4j""".encode("utf-8")
	Logger_ReleaseLogger_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Logger_ReleaseLogger_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Logger_ReleaseLogger_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	
	


# Code to call foreign functions in module Logger via XLLR

# globals





# Class to call methods of foreign class LogManager
class LogManager:

	
	
	# create from existing MetaFFI handle
	def __init__(self, handle=None):
		self.obj_handle = handle
	

	

	
	
	def GetFACTORY_PROPERTY_NAME_metaffi_getter(self):
		
		global xllr_handle
		global LogManager_GetFACTORY_PROPERTY_NAME_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)
	
		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_GetFACTORY_PROPERTY_NAME_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]


	 
	
	
	
	def GetROOT_LOGGER_NAME_metaffi_getter(self):
		
		global xllr_handle
		global LogManager_GetROOT_LOGGER_NAME_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)
	
		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_GetROOT_LOGGER_NAME_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]


	 
	
	

	
	# released foreign object handle
	def __del__(self):
		
		global xllr_handle
		global LogManager_ReleaseLogManager_id
		global runtime_plugin
		global python_plugin_handle

		
		params = (self.obj_handle,)
		params_types = (32768,)
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_ReleaseLogManager_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	

	
	def exists(p0:py_object)->bool:
		
		global xllr_handle
		global LogManager_exists_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_exists_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getContext()->py_object:
		
		global xllr_handle
		global LogManager_getContext_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getContext_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getContext(ex:bool)->py_object:
		
		global xllr_handle
		global LogManager_getContext_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((ex,)), py_object((1024,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getContext_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getContext(ex:py_object,loader:bool)->py_object:
		
		global xllr_handle
		global LogManager_getContext_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((ex,loader,)), py_object((32768,1024,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getContext_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getContext(ex:py_object,loader:bool,currentContext:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getContext_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((ex,loader,currentContext,)), py_object((32768,1024,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getContext_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getContext(ex:py_object,loader:bool,currentContext:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getContext_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((ex,loader,currentContext,)), py_object((32768,1024,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getContext_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getContext(ex:py_object,loader:bool,currentContext:py_object,externalContext:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getContext_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((ex,loader,currentContext,externalContext,)), py_object((32768,1024,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getContext_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getContext(ex:py_object,loader:bool,currentContext:py_object,externalContext:py_object,configLocation:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getContext_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((ex,loader,currentContext,externalContext,configLocation,)), py_object((32768,1024,32768,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getContext_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def shutdown()->None:
		
		global xllr_handle
		global LogManager_shutdown_id
		global runtime_plugin
		global python_plugin_handle
	
		

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_shutdown_id(out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def shutdown(p0:bool)->None:
		
		global xllr_handle
		global LogManager_shutdown_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((1024,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_shutdown_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def shutdown(allContexts:bool,p1:bool)->None:
		
		global xllr_handle
		global LogManager_shutdown_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((allContexts,p1,)), py_object((1024,1024,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_shutdown_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def shutdown(p0:py_object)->None:
		
		global xllr_handle
		global LogManager_shutdown_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_shutdown_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def getFactory()->py_object:
		
		global xllr_handle
		global LogManager_getFactory_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getFactory_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def setFactory(p0:py_object)->None:
		
		global xllr_handle
		global LogManager_setFactory_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_setFactory_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def getFormatterLogger()->py_object:
		
		global xllr_handle
		global LogManager_getFormatterLogger_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getFormatterLogger_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getFormatterLogger(p0:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getFormatterLogger_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getFormatterLogger_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getFormatterLogger(p0:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getFormatterLogger_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getFormatterLogger_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getFormatterLogger(p0:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getFormatterLogger_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getFormatterLogger_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getLogger()->py_object:
		
		global xllr_handle
		global LogManager_getLogger_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getLogger_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getLogger(cls:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getLogger_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((cls,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getLogger_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getLogger(messageFactory:py_object,cls:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getLogger_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((messageFactory,cls,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getLogger_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getLogger(p0:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getLogger_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getLogger_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getLogger(p0:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getLogger_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getLogger_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getLogger(messageFactory:py_object,p1:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getLogger_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((messageFactory,p1,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getLogger_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getLogger(p0:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getLogger_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((p0,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getLogger_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getLogger(messageFactory:py_object,p1:py_object)->py_object:
		
		global xllr_handle
		global LogManager_getLogger_overload7_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((messageFactory,p1,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getLogger_overload7_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getRootLogger()->py_object:
		
		global xllr_handle
		global LogManager_getRootLogger_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		LogManager_getRootLogger_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	




LogManager.exists = staticmethod(LogManager.exists)



LogManager.getContext = staticmethod(LogManager.getContext)



LogManager.getContext = staticmethod(LogManager.getContext)



LogManager.getContext = staticmethod(LogManager.getContext)



LogManager.getContext = staticmethod(LogManager.getContext)



LogManager.getContext = staticmethod(LogManager.getContext)



LogManager.getContext = staticmethod(LogManager.getContext)



LogManager.getContext = staticmethod(LogManager.getContext)



LogManager.shutdown = staticmethod(LogManager.shutdown)



LogManager.shutdown = staticmethod(LogManager.shutdown)



LogManager.shutdown = staticmethod(LogManager.shutdown)



LogManager.shutdown = staticmethod(LogManager.shutdown)



LogManager.getFactory = staticmethod(LogManager.getFactory)



LogManager.setFactory = staticmethod(LogManager.setFactory)



LogManager.getFormatterLogger = staticmethod(LogManager.getFormatterLogger)



LogManager.getFormatterLogger = staticmethod(LogManager.getFormatterLogger)



LogManager.getFormatterLogger = staticmethod(LogManager.getFormatterLogger)



LogManager.getFormatterLogger = staticmethod(LogManager.getFormatterLogger)



LogManager.getLogger = staticmethod(LogManager.getLogger)



LogManager.getLogger = staticmethod(LogManager.getLogger)



LogManager.getLogger = staticmethod(LogManager.getLogger)



LogManager.getLogger = staticmethod(LogManager.getLogger)



LogManager.getLogger = staticmethod(LogManager.getLogger)



LogManager.getLogger = staticmethod(LogManager.getLogger)



LogManager.getLogger = staticmethod(LogManager.getLogger)



LogManager.getLogger = staticmethod(LogManager.getLogger)



LogManager.getRootLogger = staticmethod(LogManager.getRootLogger)




# Class to call methods of foreign class Logger
class Logger:

	
	
	# create from existing MetaFFI handle
	def __init__(self, handle=None):
		self.obj_handle = handle
	

	

	

	
	# released foreign object handle
	def __del__(self):
		
		global xllr_handle
		global Logger_ReleaseLogger_id
		global runtime_plugin
		global python_plugin_handle

		
		params = (self.obj_handle,)
		params_types = (32768,)
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_ReleaseLogger_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	

	
	def catching(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_catching_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_catching_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def catching(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_catching_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_catching_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload7_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload7_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload8_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload8_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload9_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload9_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload10_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload10_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload11_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload11_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload12_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload12_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload13_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload13_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload14_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload14_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload15_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload15_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload16_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload16_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload17_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload17_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload18_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload18_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload19_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload19_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload20_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload20_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload21_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload21_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload22_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload22_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload23_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload23_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload24_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload24_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload25_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload25_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload26_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload26_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload27_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload27_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload28_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload28_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload29_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload29_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload30_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload30_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload31_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload31_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload32_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload32_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload33_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload33_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload34_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload34_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload35_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload35_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload36_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload36_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload37_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload37_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload38_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload38_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload39_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload39_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload40_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload40_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload41_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload41_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload42_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload42_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload43_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload43_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload44_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload44_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload45_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload45_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload46_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload46_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def debug(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_debug_overload47_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_debug_overload47_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def entry(self)->None:
		
		global xllr_handle
		global Logger_entry_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_entry_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def entry(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_entry_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_entry_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload7_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload7_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload8_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload8_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload9_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload9_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload10_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload10_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload11_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload11_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload12_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload12_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload13_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload13_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload14_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload14_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload15_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload15_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload16_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload16_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload17_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload17_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload18_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload18_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload19_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload19_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload20_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload20_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload21_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload21_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload22_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload22_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload23_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload23_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload24_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload24_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload25_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload25_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload26_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload26_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload27_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload27_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload28_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload28_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload29_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload29_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload30_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload30_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload31_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload31_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload32_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload32_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload33_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload33_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload34_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload34_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload35_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload35_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload36_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload36_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload37_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload37_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload38_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload38_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload39_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload39_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload40_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload40_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload41_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload41_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload42_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload42_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload43_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload43_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload44_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload44_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload45_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload45_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload46_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload46_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def error(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_error_overload47_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_error_overload47_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def exit(self)->None:
		
		global xllr_handle
		global Logger_exit_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_exit_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def exit(self,p0:py_object)->py_object:
		
		global xllr_handle
		global Logger_exit_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_exit_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload7_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload7_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload8_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload8_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload9_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload9_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload10_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload10_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload11_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload11_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload12_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload12_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload13_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload13_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload14_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload14_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload15_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload15_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload16_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload16_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload17_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload17_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload18_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload18_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload19_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload19_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload20_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload20_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload21_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload21_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload22_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload22_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload23_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload23_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload24_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload24_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload25_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload25_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload26_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload26_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload27_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload27_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload28_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload28_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload29_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload29_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload30_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload30_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload31_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload31_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload32_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload32_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload33_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload33_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload34_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload34_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload35_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload35_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload36_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload36_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload37_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload37_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload38_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload38_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload39_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload39_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload40_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload40_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload41_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload41_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload42_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload42_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload43_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload43_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload44_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload44_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload45_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload45_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload46_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload46_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def fatal(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_fatal_overload47_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_fatal_overload47_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def getLevel(self)->py_object:
		
		global xllr_handle
		global Logger_getLevel_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_getLevel_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getMessageFactory(self)->py_object:
		
		global xllr_handle
		global Logger_getMessageFactory_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_getMessageFactory_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getFlowMessageFactory(self)->py_object:
		
		global xllr_handle
		global Logger_getFlowMessageFactory_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_getFlowMessageFactory_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def getName(self)->py_object:
		
		global xllr_handle
		global Logger_getName_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_getName_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload7_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload7_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload8_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload8_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload9_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload9_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload10_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload10_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload11_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload11_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload12_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload12_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload13_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload13_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload14_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload14_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload15_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload15_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload16_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload16_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload17_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload17_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload18_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload18_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload19_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload19_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload20_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload20_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload21_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload21_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload22_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload22_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload23_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload23_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload24_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload24_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload25_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload25_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload26_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload26_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload27_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload27_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload28_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload28_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload29_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload29_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload30_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload30_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload31_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload31_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload32_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload32_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload33_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload33_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload34_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload34_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload35_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload35_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload36_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload36_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload37_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload37_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload38_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload38_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload39_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload39_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload40_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload40_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload41_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload41_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload42_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload42_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload43_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload43_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload44_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload44_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload45_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload45_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload46_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload46_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def info(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_info_overload47_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_info_overload47_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def isDebugEnabled(self)->bool:
		
		global xllr_handle
		global Logger_isDebugEnabled_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isDebugEnabled_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isDebugEnabled(self,p0:py_object)->bool:
		
		global xllr_handle
		global Logger_isDebugEnabled_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isDebugEnabled_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isEnabled(self,p0:py_object)->bool:
		
		global xllr_handle
		global Logger_isEnabled_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isEnabled_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isEnabled(self,p0:py_object,p1:py_object)->bool:
		
		global xllr_handle
		global Logger_isEnabled_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isEnabled_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isErrorEnabled(self)->bool:
		
		global xllr_handle
		global Logger_isErrorEnabled_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isErrorEnabled_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isErrorEnabled(self,p0:py_object)->bool:
		
		global xllr_handle
		global Logger_isErrorEnabled_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isErrorEnabled_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isFatalEnabled(self)->bool:
		
		global xllr_handle
		global Logger_isFatalEnabled_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isFatalEnabled_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isFatalEnabled(self,p0:py_object)->bool:
		
		global xllr_handle
		global Logger_isFatalEnabled_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isFatalEnabled_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isInfoEnabled(self)->bool:
		
		global xllr_handle
		global Logger_isInfoEnabled_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isInfoEnabled_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isInfoEnabled(self,p0:py_object)->bool:
		
		global xllr_handle
		global Logger_isInfoEnabled_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isInfoEnabled_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isTraceEnabled(self)->bool:
		
		global xllr_handle
		global Logger_isTraceEnabled_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isTraceEnabled_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isTraceEnabled(self,p0:py_object)->bool:
		
		global xllr_handle
		global Logger_isTraceEnabled_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isTraceEnabled_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isWarnEnabled(self)->bool:
		
		global xllr_handle
		global Logger_isWarnEnabled_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isWarnEnabled_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def isWarnEnabled(self,p0:py_object)->bool:
		
		global xllr_handle
		global Logger_isWarnEnabled_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_isWarnEnabled_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload7_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload7_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload8_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload8_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload9_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload9_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload10_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload10_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload11_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload11_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload12_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload12_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload13_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload13_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload14_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload14_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload15_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload15_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload16_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload16_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload17_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload17_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload18_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload18_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload19_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload19_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload20_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload20_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload21_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload21_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload22_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload22_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload23_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload23_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload24_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload24_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload25_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload25_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload26_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload26_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload27_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload27_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload28_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload28_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload29_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload29_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload30_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload30_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload31_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload31_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload32_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload32_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload33_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload33_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload34_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload34_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload35_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload35_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload36_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload36_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object,p12:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload37_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,p12,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload37_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload38_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload38_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload39_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload39_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload40_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload40_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload41_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload41_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload42_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload42_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload43_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload43_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload44_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload44_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload45_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload45_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload46_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload46_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def log(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object)->None:
		
		global xllr_handle
		global Logger_log_overload47_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_log_overload47_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def printf(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_printf_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_printf_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def printf(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_printf_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_printf_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def throwing(self,p0:py_object,p1:py_object)->py_object:
		
		global xllr_handle
		global Logger_throwing_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_throwing_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def throwing(self,p0:py_object)->py_object:
		
		global xllr_handle
		global Logger_throwing_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_throwing_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload7_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload7_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload8_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload8_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload9_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload9_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload10_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload10_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload11_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload11_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload12_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload12_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload13_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload13_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload14_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload14_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload15_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload15_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload16_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload16_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload17_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload17_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload18_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload18_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload19_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload19_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload20_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload20_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload21_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload21_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload22_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload22_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload23_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload23_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload24_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload24_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload25_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload25_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload26_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload26_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload27_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload27_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload28_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload28_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload29_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload29_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload30_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload30_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload31_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload31_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload32_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload32_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload33_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload33_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload34_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload34_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload35_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload35_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload36_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload36_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload37_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload37_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload38_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload38_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload39_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload39_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload40_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload40_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload41_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload41_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload42_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload42_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload43_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload43_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload44_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload44_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload45_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload45_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload46_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload46_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def trace(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_trace_overload47_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_trace_overload47_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def traceEntry(self)->py_object:
		
		global xllr_handle
		global Logger_traceEntry_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceEntry_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def traceEntry(self,p0:py_object,p1:py_object)->py_object:
		
		global xllr_handle
		global Logger_traceEntry_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceEntry_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def traceEntry(self,p0:py_object)->py_object:
		
		global xllr_handle
		global Logger_traceEntry_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceEntry_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def traceEntry(self,p0:py_object,p1:py_object)->py_object:
		
		global xllr_handle
		global Logger_traceEntry_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceEntry_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def traceEntry(self,p0:py_object)->py_object:
		
		global xllr_handle
		global Logger_traceEntry_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceEntry_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def traceExit(self)->None:
		
		global xllr_handle
		global Logger_traceExit_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceExit_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def traceExit(self,p0:py_object)->py_object:
		
		global xllr_handle
		global Logger_traceExit_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceExit_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def traceExit(self,p0:py_object,p1:py_object)->py_object:
		
		global xllr_handle
		global Logger_traceExit_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceExit_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def traceExit(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_traceExit_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceExit_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def traceExit(self,p0:py_object,p1:py_object)->py_object:
		
		global xllr_handle
		global Logger_traceExit_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceExit_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def traceExit(self,p0:py_object,p1:py_object)->py_object:
		
		global xllr_handle
		global Logger_traceExit_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_traceExit_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload1_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload1_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload2_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload2_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload3_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload3_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload4_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload4_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload5_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload5_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload6_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload6_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload7_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload7_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload8_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload8_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload9_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload9_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload10_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload10_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload11_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload11_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload12_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload12_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload13_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload13_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload14_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload14_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload15_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload15_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload16_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload16_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload17_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload17_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload18_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload18_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload19_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload19_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload20_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload20_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload21_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload21_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload22_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload22_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload23_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload23_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload24_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload24_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload25_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload25_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload26_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,)), py_object((32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload26_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload27_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload27_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload28_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload28_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload29_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload29_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload30_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload30_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload31_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload31_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload32_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload32_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload33_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload33_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload34_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload34_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload35_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload35_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload36_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload36_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object,p11:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload37_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,p11,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload37_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload38_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,)), py_object((32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload38_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload39_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,)), py_object((32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload39_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload40_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,)), py_object((32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload40_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload41_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,)), py_object((32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload41_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload42_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload42_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload43_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload43_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload44_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload44_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload45_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload45_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload46_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload46_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def warn(self,p0:py_object,p1:py_object,p2:py_object,p3:py_object,p4:py_object,p5:py_object,p6:py_object,p7:py_object,p8:py_object,p9:py_object,p10:py_object)->None:
		
		global xllr_handle
		global Logger_warn_overload47_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,p0,p1,p2,p3,p4,p5,p6,p7,p8,p9,p10,)), py_object((32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_warn_overload47_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def logMessage(self,level:py_object,marker:py_object,fqcn:py_object,location:py_object,message:py_object,throwable:py_object)->None:
		
		global xllr_handle
		global Logger_logMessage_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,level,marker,fqcn,location,message,throwable,)), py_object((32768,32768,32768,32768,32768,32768,32768,)), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_logMessage_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		
		return 
	
	def atTrace(self)->py_object:
		
		global xllr_handle
		global Logger_atTrace_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_atTrace_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def atDebug(self)->py_object:
		
		global xllr_handle
		global Logger_atDebug_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_atDebug_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def atInfo(self)->py_object:
		
		global xllr_handle
		global Logger_atInfo_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_atInfo_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def atWarn(self)->py_object:
		
		global xllr_handle
		global Logger_atWarn_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_atWarn_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def atError(self)->py_object:
		
		global xllr_handle
		global Logger_atError_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_atError_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def atFatal(self)->py_object:
		
		global xllr_handle
		global Logger_atFatal_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_atFatal_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def always(self)->py_object:
		
		global xllr_handle
		global Logger_always_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,)), py_object((32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_always_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	
	def atLevel(self,level:py_object)->py_object:
		
		global xllr_handle
		global Logger_atLevel_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object((self.obj_handle,level,)), py_object((32768,32768,)), 1)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Logger_atLevel_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	
		# unpack results
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]
	




































































































































































































































































































































































































































































































































































































































































































































































































 



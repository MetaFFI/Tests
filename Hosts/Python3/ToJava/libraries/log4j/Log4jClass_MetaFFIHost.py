
# Code generated by MetaFFI. DO NOT EDIT.
# Guest code for Log4jClass.java

from ctypes import *
import ctypes.util
from typing import List
from typing import Any
from typing import Tuple
import platform
import os
from enum import Enum

xllr_handle = None
python_plugin_handle = None

def free_metaffi():
	global xllr_handle
	global runtime_plugin

	err = pointer((c_char * 1)(0))
	err_len = (c_ulonglong)(0)
	xllr_handle.free_runtime_plugin(runtime_plugin, len(runtime_plugin), byref(err), byref(err_len))


def dynamicTypeToMetaFFIType(obj):
	if isinstance(obj, float):
		return 1
	elif isinstance(obj, str):
		return 4096
	elif isinstance(obj, int):
		return 32
	elif isinstance(obj, bool):
		return 1024
	else:
		return 32768


def load_xllr_and_python_plugin():
	global xllr_handle
	global python_plugin_handle
	
	if xllr_handle == None:
		if platform.system()=='Windows':
			os.add_dll_directory(os.environ['METAFFI_HOME'])
			os.add_dll_directory(os.environ['METAFFI_HOME']+'\\bin')
		xllr_handle = cdll.LoadLibrary(get_filename_to_load('xllr'))

	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))

		err = pointer((c_char * 1)(0))
		err_len = (c_ulonglong)(0)
		python_plugin_handle.load_runtime(byref(err), byref(err_len)) # in order to initialize python environment (e.g. define metaffi_handle class)

	# set restypes
	python_plugin_handle.convert_host_params_to_cdts.argstype = [py_object, py_object]
	python_plugin_handle.convert_host_params_to_cdts.restype = c_void_p
	python_plugin_handle.convert_host_return_values_from_cdts.argstype = [c_void_p, c_uint64]
	python_plugin_handle.convert_host_return_values_from_cdts.restype = py_object
	xllr_handle.alloc_cdts_buffer.restype = c_void_p
	xllr_handle.load_function.restype = CFUNCTYPE(None)

def get_filename_to_load(fname):
	osname = platform.system()
	if os.getenv('METAFFI_HOME') is None:
		raise RuntimeError('No METAFFI_HOME environment variable')
	elif fname is None:
		raise RuntimeError('fname is None')

	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so



cfunctype_params_ret = CFUNCTYPE(None)
cfunctype_params_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_params_no_ret = CFUNCTYPE(None)
cfunctype_params_no_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_no_params_ret = CFUNCTYPE(None)
cfunctype_no_params_ret.argtypes = [c_void_p, POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]
cfunctype_no_params_no_ret = CFUNCTYPE(None)
cfunctype_no_params_no_ret.argtypes = [POINTER(POINTER(c_ubyte)), POINTER(c_ulonglong)]

runtime_plugin = """xllr.openjdk""".encode("utf-8")









Log4jClass_Getlogger_id = c_void_p(0)







Log4jClass_ReleaseLog4jClass_id = c_void_p(0)



def metaffi_load(module_path: str)->None:
	# load foreign functions
	load_xllr_and_python_plugin()

	
	

	

	

	
	global Log4jClass_Getlogger_id
	
	

	

	


	global Log4jClass_ReleaseLog4jClass_id

	
	

	err = POINTER(c_ubyte)()
	out_err = POINTER(POINTER(c_ubyte))(c_void_p(addressof(err)))
	err_len = c_uint32()
	out_err_len = POINTER(c_uint32)(c_void_p(addressof(err_len)))

	
	

	 

	

	
	

	
	
	function_path_str = r"""entrypoint_class=Log4jClass_Entrypoints,entrypoint_function=EntryPoint_Log4jClass_get_Getlogger,metaffi_guest_lib=Log4jClass_MetaFFIGuest,module=C:\src\github.com\MetaFFI\Tests\Hosts\Python3\ToJava\libraries\log4j\Log4jClass,package=log4j""".encode("utf-8")
	Log4jClass_Getlogger_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Log4jClass_Getlogger_id, 0, 1, out_err, out_err_len), cfunctype_no_params_ret)
	if not bool(Log4jClass_Getlogger_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	
	
	 

	

	
	function_path_str = r"""entrypoint_class=Log4jClass_Entrypoints,entrypoint_function=EntryPoint_Log4jClass_ReleaseLog4jClass,metaffi_guest_lib=Log4jClass_MetaFFIGuest,module=C:\src\github.com\MetaFFI\Tests\Hosts\Python3\ToJava\libraries\log4j\Log4jClass,package=log4j""".encode("utf-8")
	Log4jClass_ReleaseLog4jClass_id = cast(xllr_handle.load_function(runtime_plugin, len(runtime_plugin), module_path.encode("utf-8"), len(module_path.encode("utf-8")), function_path_str, len(function_path_str), Log4jClass_ReleaseLog4jClass_id, 1, 0, out_err, out_err_len), cfunctype_params_no_ret)
	if not bool(Log4jClass_ReleaseLog4jClass_id): # failed to load function
		err_text = string_at(out_err.contents, out_err_len.contents.value)
		raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))
	

	
	
	


# Code to call foreign functions in module Log4jClass via XLLR

# globals





# Class to call methods of foreign class Log4jClass
class Log4jClass:

	
	
	# create from existing MetaFFI handle
	def __init__(self, handle=None):
		self.obj_handle = handle
	

	

	
	
	def Getlogger_metaffi_getter(self):
		
		global xllr_handle
		global Log4jClass_Getlogger_id
		global runtime_plugin
		global python_plugin_handle
	
		xcall_params = xllr_handle.alloc_cdts_buffer(0, 1)
	
		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Log4jClass_Getlogger_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))


		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(xcall_params), 1)
		return ret_vals[0]


	 
	
	

	
	# released foreign object handle
	def __del__(self):
		
		global xllr_handle
		global Log4jClass_ReleaseLog4jClass_id
		global runtime_plugin
		global python_plugin_handle

		
		params = (self.obj_handle,)
		params_types = (32768,)
		xcall_params = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types), 0)

		# xcall function
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		Log4jClass_ReleaseLog4jClass_id(c_void_p(xcall_params), out_error, byref(out_error_len))		
		if out_error is not None and out_error[0] is not None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	

	




 



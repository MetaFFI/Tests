
# Code generated by MetaFFI. DO NOT EDIT.
# Guest code for Main_test.py#TestFuncs.go

from ctypes import *
import ctypes.util
from typing import List
from typing import Any
import platform
import os
from enum import Enum

xllr_handle = None
python_plugin_handle = None

def free_metaffi():
	global xllr_handle
	global runtime_plugin

	err = pointer((c_char * 1)(0))
	err_len = (c_ulonglong)(0)
	xllr_handle.free_runtime_plugin(runtime_plugin, len(runtime_plugin), byref(err), byref(err_len))

def load_xllr_and_python_plugin():
	global xllr_handle
	global python_plugin_handle
	
	if xllr_handle == None:
		xllr_handle = cdll.LoadLibrary(get_filename_to_load('xllr'))

	if python_plugin_handle == None:
		python_plugin_handle = cdll.LoadLibrary(get_filename_to_load('xllr.python3'))

		err = pointer((c_char * 1)(0))
		err_len = (c_ulonglong)(0)
		python_plugin_handle.load_runtime(byref(err), byref(err_len)) # in order to initialize python environment (e.g. define metaffi_handle class)

	# set restypes
	python_plugin_handle.convert_host_params_to_cdts.argstype = [py_object, py_object]
	python_plugin_handle.convert_host_return_values_from_cdts.argstype = [c_void_p, c_uint64]
	python_plugin_handle.convert_host_return_values_from_cdts.restype = py_object

def get_filename_to_load(fname):
	osname = platform.system()
	if osname == 'Windows':
		return os.getenv('METAFFI_HOME')+'\\'+ fname + '.dll'
	elif osname == 'Darwin':
		return os.getenv('METAFFI_HOME')+'/' + fname + '.dylib'
	else:
		return os.getenv('METAFFI_HOME')+'/' + fname + '.so' # for everything that is not windows or mac, return .so

runtime_plugin = """xllr.go""".encode("utf-8")





HelloWorld_id = -1





GoDeque_GetName_id = -1
GoDeque_SetName_id = -1



GoDeque_NewGoDeque_id = -1



GoDeque_Push_id = -1

GoDeque_Pop_id = -1


GoDeque_ReleaseGoDeque_id = -1



# load foreign functions
load_xllr_and_python_plugin()

err = POINTER(c_ubyte)()
out_err = POINTER(POINTER(c_ubyte))(c_void_p(addressof(err)))
err_len = c_uint32()
out_err_len = POINTER(c_uint32)(c_void_p(addressof(err_len)))
	


 


HelloWorld_id = xllr_handle.load_function(runtime_plugin, len(runtime_plugin), 'entrypoint_function=EntryPoint_HelloWorld,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs'.encode("utf-8"), len('module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs,entrypoint_function=EntryPoint_HelloWorld,metaffi_guest_lib=TestFuncs_MetaFFIGuest'.encode("utf-8")), HelloWorld_id, out_err, out_err_len)
if HelloWorld_id == -1: # failed to load function
	err_text = string_at(out_err.contents, out_err_len.contents.value)
	raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))




GoDeque_NewGoDeque_id = xllr_handle.load_function(runtime_plugin, len(runtime_plugin), 'entrypoint_function=EntryPoint_GoDeque_NewGoDeque,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_GoDeque_NewGoDeque,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs'.encode("utf-8")), GoDeque_NewGoDeque_id, out_err, out_err_len)
if GoDeque_NewGoDeque_id == -1: # failed to load function
	err_text = string_at(out_err.contents, out_err_len.contents.value)
	raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))




GoDeque_GetName_id = xllr_handle.load_function(runtime_plugin, len(runtime_plugin), 'entrypoint_function=EntryPoint_GoDeque_GetName,metaffi_guest_lib=TestFuncs_MetaFFIGuest'.encode("utf-8"), len('entrypoint_function=EntryPoint_GoDeque_GetName,metaffi_guest_lib=TestFuncs_MetaFFIGuest'.encode("utf-8")), GoDeque_GetName_id, out_err, out_err_len)
if GoDeque_GetName_id == -1: # failed to load function
	err_text = string_at(out_err.contents, out_err_len.contents.value)
	raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))


GoDeque_SetName_id = xllr_handle.load_function(runtime_plugin, len(runtime_plugin), 'entrypoint_function=EntryPoint_GoDeque_SetName,metaffi_guest_lib=TestFuncs_MetaFFIGuest'.encode("utf-8"), len('entrypoint_function=EntryPoint_GoDeque_SetName,metaffi_guest_lib=TestFuncs_MetaFFIGuest'.encode("utf-8")), GoDeque_SetName_id, out_err, out_err_len)
if GoDeque_SetName_id == -1: # failed to load function
	err_text = string_at(out_err.contents, out_err_len.contents.value)
	raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))

 


GoDeque_Push_id = xllr_handle.load_function(runtime_plugin, len(runtime_plugin), 'entrypoint_class=GoDeque,entrypoint_function=EntryPoint_GoDeque_Push,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs'.encode("utf-8"), len('module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs,entrypoint_class=GoDeque,entrypoint_function=EntryPoint_GoDeque_Push,metaffi_guest_lib=TestFuncs_MetaFFIGuest'.encode("utf-8")), GoDeque_Push_id, out_err, out_err_len)
if GoDeque_Push_id == -1: # failed to load function
	err_text = string_at(out_err.contents, out_err_len.contents.value)
	raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))

GoDeque_Pop_id = xllr_handle.load_function(runtime_plugin, len(runtime_plugin), 'entrypoint_function=EntryPoint_GoDeque_Pop,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs,entrypoint_class=GoDeque'.encode("utf-8"), len('entrypoint_class=GoDeque,entrypoint_function=EntryPoint_GoDeque_Pop,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs'.encode("utf-8")), GoDeque_Pop_id, out_err, out_err_len)
if GoDeque_Pop_id == -1: # failed to load function
	err_text = string_at(out_err.contents, out_err_len.contents.value)
	raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))



GoDeque_ReleaseGoDeque_id = xllr_handle.load_function(runtime_plugin, len(runtime_plugin), 'entrypoint_function=EntryPoint_GoDeque_ReleaseGoDeque,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs'.encode("utf-8"), len('entrypoint_function=EntryPoint_GoDeque_ReleaseGoDeque,metaffi_guest_lib=TestFuncs_MetaFFIGuest,module=/home/tcs/src/github.com/MetaFFI/Tests/Embed/Python3/Deque,package=TestFuncs'.encode("utf-8")), GoDeque_ReleaseGoDeque_id, out_err, out_err_len)
if GoDeque_ReleaseGoDeque_id == -1: # failed to load function
	err_text = string_at(out_err.contents, out_err_len.contents.value)
	raise RuntimeError('\n'+str(err_text).replace("\\n", "\n"))


	

	


# Code to call foreign functions in module go via XLLR

# globals



# Call to foreign HelloWorld
def HelloWorld() -> ():

	global xllr_handle
	global HelloWorld_id
	global runtime_plugin
	global python_plugin_handle

	if python_plugin_handle is None:
		raise RuntimeError('handle is None')

	
	params = ()
	params_types = ()
	parameters_buffer = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types))
	return_values_buffer = xllr_handle.alloc_cdts_buffer(0)

	# call function
	
	out_error = (c_char_p * 1)(0)
	out_error_len = (c_ulonglong)(0)
	xllr_handle.xcall(c_char_p(runtime_plugin), c_ulonglong(len(runtime_plugin)), \
					c_ulonglong(HelloWorld_id), \
					c_void_p(parameters_buffer), c_ulonglong(0), \
					c_void_p(return_values_buffer), c_ulonglong(0), \
					out_error, byref(out_error_len))
	
	
	# check for error
	if out_error != None and out_error[0] != None:
		err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
		raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))

	# unpack results

	ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(return_values_buffer), 0)

	return 



# Class to call methods of foreign class GoDeque
class GoDeque:
	obj_handle = None
	
	
	def __init__(self ):
		global xllr_handle
		global GoDeque_NewGoDeque_id
		global runtime_plugin
		global python_plugin_handle
	
		
		params = ()
		params_types = ()
		parameters_buffer = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types))
		return_values_buffer = xllr_handle.alloc_cdts_buffer(1)
	
		# call function
		
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		xllr_handle.xcall(c_char_p(runtime_plugin), c_ulonglong(len(runtime_plugin)), \
						c_ulonglong(GoDeque_NewGoDeque_id), \
						c_void_p(parameters_buffer), c_ulonglong(0), \
						c_void_p(return_values_buffer), c_ulonglong(1), \
						out_error, byref(out_error_len))
		
		
		# check for error
		if out_error != None and out_error[0] != None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))
	
		# unpack results
	
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(return_values_buffer), 1)
		self.obj_handle = ret_vals[0] # NOTICE: assuming first ret_val is the handle
	

	
	
	def GetName(self):
		global xllr_handle
		global GoDeque_GetName_id
		global runtime_plugin
		global python_plugin_handle
	
		
		params = (self.obj_handle ,)
		params_types = ( 32768,)
		parameters_buffer = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types))
		return_values_buffer = xllr_handle.alloc_cdts_buffer(1)
	
		# call function
		
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		xllr_handle.xcall(c_char_p(runtime_plugin), c_ulonglong(len(runtime_plugin)), \
						c_ulonglong(GoDeque_GetName_id), \
						c_void_p(parameters_buffer), c_ulonglong(1), \
						c_void_p(return_values_buffer), c_ulonglong(1), \
						out_error, byref(out_error_len))
				
		# check for error
		if out_error != None and out_error[0] != None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))
	
		# unpack results
	
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(return_values_buffer), 1)

		return ret_vals[0]
	 
	
	def SetName(self, Name ):
		global xllr_handle
		global GoDeque_SetName_id
		global runtime_plugin
		global python_plugin_handle
	
		
		params = (self.obj_handle , Name)
		params_types = ( 32768, 4096)
		parameters_buffer = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types))
		return_values_buffer = xllr_handle.alloc_cdts_buffer(0)
	
		# call function
		
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		xllr_handle.xcall(c_char_p(runtime_plugin), c_ulonglong(len(runtime_plugin)), \
						c_ulonglong(GoDeque_SetName_id), \
						c_void_p(parameters_buffer), c_ulonglong(2), \
						c_void_p(return_values_buffer), c_ulonglong(0), \
						out_error, byref(out_error_len))
				
		# check for error
		if out_error != None and out_error[0] != None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))
	
		# unpack results
	
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(return_values_buffer), 0)

		return 
	
	

	
	# released foreign object handle
	def __del__(self):
		global xllr_handle
		global GoDeque_ReleaseGoDeque_id
		global runtime_plugin
		global python_plugin_handle
	
		
		params = (self.obj_handle,)
		params_types = (32768,)
		parameters_buffer = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types))
		return_values_buffer = xllr_handle.alloc_cdts_buffer(0)
	
		# call function
		
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		xllr_handle.xcall(c_char_p(runtime_plugin), c_ulonglong(len(runtime_plugin)), \
						c_ulonglong(GoDeque_ReleaseGoDeque_id), \
						c_void_p(parameters_buffer), c_ulonglong(1), \
						c_void_p(return_values_buffer), c_ulonglong(0), \
						out_error, byref(out_error_len))
		
		
		# check for error
		if out_error != None and out_error[0] != None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))
	

	
	def Push(self, v:Any):
		global xllr_handle
		global GoDeque_Push_id
		global runtime_plugin
		global python_plugin_handle
	
		
		params = (self.obj_handle , v)
		params_types = ( 32768, 4194304)
		parameters_buffer = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types))
		return_values_buffer = xllr_handle.alloc_cdts_buffer(0)
	
		# call function
		
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		xllr_handle.xcall(c_char_p(runtime_plugin), c_ulonglong(len(runtime_plugin)), \
						c_ulonglong(GoDeque_Push_id), \
						c_void_p(parameters_buffer), c_ulonglong(2), \
						c_void_p(return_values_buffer), c_ulonglong(0), \
						out_error, byref(out_error_len))
		
		
		# check for error
		if out_error != None and out_error[0] != None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))
	
		# unpack results
	
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(return_values_buffer), 0)

		return 
	
	def Pop(self):
		global xllr_handle
		global GoDeque_Pop_id
		global runtime_plugin
		global python_plugin_handle
	
		
		params = (self.obj_handle ,)
		params_types = ( 32768,)
		parameters_buffer = python_plugin_handle.convert_host_params_to_cdts(py_object(params), py_object(params_types))
		return_values_buffer = xllr_handle.alloc_cdts_buffer(1)
	
		# call function
		
		out_error = (c_char_p * 1)(0)
		out_error_len = (c_ulonglong)(0)
		xllr_handle.xcall(c_char_p(runtime_plugin), c_ulonglong(len(runtime_plugin)), \
						c_ulonglong(GoDeque_Pop_id), \
						c_void_p(parameters_buffer), c_ulonglong(1), \
						c_void_p(return_values_buffer), c_ulonglong(1), \
						out_error, byref(out_error_len))
		
		
		# check for error
		if out_error != None and out_error[0] != None:
			err_msg = string_at(out_error[0], out_error_len.value).decode('utf-8')
			raise RuntimeError('\n'+err_msg.replace("\\n", "\n"))
	
		# unpack results
	
		ret_vals = python_plugin_handle.convert_host_return_values_from_cdts(c_void_p(return_values_buffer), 1)

		return ret_vals[0]
	





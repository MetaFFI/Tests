
// Sanity tests
module GoSanity : go
{
	path += {"package":"$PWD"}
	tag package = "TestFuncs";

	type int : int64{}
	type float : float32{}
	type string : string8{}

	void HelloWorld(){} // prints hello_world
	function (void) ReturnsAnError(){} // always returns an error

	// divides two integers. If dividing in 0, return an error
	function float DivIntegers(int x, int y){}

	// joins the strings using a comma separator
	function (string result) JoinStrings (string[] strings)

	class TestMap
	{
		constructor *TestMap NewTestMap(){}
		method void SetKey(string key, any value){}
		method any GetKey(string key){}
		method bool ContainsKey(string key){}
	}
}

// testing go utils function
module GoUtils : go
{
	path += {"package":"github.com/Masterminds/goutils"}
	function (string8 res) Initials(string8 input){}
}

module MCache : go
{
	path += {"package":"github.com/OrlovEvgeny/go-mcache"}

	type Duration : int64
	{
		path += {"package": "time"}
	}

	constructor MCache* New(){}
	method void Set(string8 key, any obj, Duration duration){}

	method (any obj, bool found) Get(string8 key){}
}

module PySanity : python3
{
	path += {"module":"TestFuncs"}

	type string : string8{}

	function void hello_world(){} // prints hello_world

	function (void) returns_an_error(){} // always returns an error

	// divides two integers. If dividing in 0, return an error
	function float div_integers(int x, int y){}

	// joins the strings using a comma separator
	function (string result) join_strings (string[] strings)

	class TestMap
	{
		constructor TestMap new_map(){}
		method void set_key(string key, any value){}
		method any get_key(string key){}
		method bool contains_key(string key){}
	}
}

module deque : python3
{
	path += {"module":"collections"}

	class deque
	{
		constructor deque deque(){}
		method void append(any input){}
		method any pop()
	}
}
syntax = "proto3";

// openffi_target_language: "python3"

// openffi_function_path: "module=TestFuncs"
service Test
{
	rpc hello_world (Void) returns (Void); // prints hello_world. openffi_function_path: "function=hello_world"
	rpc returns_an_error (Void) returns (Void); // always returns an error. openffi_function_path: "function=returns_an_error"
	rpc div_integers (div_params) returns (div_return); // divides two integers. If dividing in 0, return an error. openffi_function_path: "function=div_integers"
	rpc join_strings (join_strings_params) returns (join_strings_return); // joins the strings using a comma separator openffi_function_path: "function=join_strings"
}

message Void {}

message div_params
{
	int32 x = 1;
	int32 y = 2;
}
message div_return
{
	float z = 1;
}

message join_strings_params
{
	repeated string strings = 1;
}
message join_strings_return
{
	string result = 1;
}

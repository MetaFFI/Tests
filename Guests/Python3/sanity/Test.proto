syntax = "proto3";

// metaffi_target_language: "python3"

// metaffi_function_path: "module=TestFuncs"
service Test
{
	rpc hello_world (Void) returns (Void); // prints hello_world. metaffi_function_path: "function=hello_world"
	rpc returns_an_error (Void) returns (Void); // always returns an error. metaffi_function_path: "function=returns_an_error"
	rpc div_integers (div_params) returns (div_return); // divides two integers. If dividing in 0, return an error. metaffi_function_path: "function=div_integers"
	rpc join_strings (join_strings_params) returns (join_strings_return); // joins the strings using a comma separator metaffi_function_path: "function=join_strings"

	// creates new map. metaffi_function_path: "function=testmap"
	// metaffi_function_type: "constructor"
	rpc new_map(Void) returns (new_map_return);

	// sets value. metaffi_function_path: "function=set_key"
	// metaffi_function_type: "method"
	rpc set_key(set_key_params) returns (Void);

	// get value. metaffi_function_path: "function=get_key"
	// metaffi_function_type: "method"
	rpc get_key(get_key_params) returns (get_key_return);

	// verifies key exists in map. metaffi_function_path: "function=contains_key"
	// metaffi_function_type: "method"
	rpc contains_key(contains_key_params) returns (contains_key_return);

}

message Void {}
//--------------------------------------------------------------------
message div_params
{
	int32 x = 1;
	int32 y = 2;
}
message div_return
{
	float z = 1;
}
//--------------------------------------------------------------------
message join_strings_params
{
	repeated string strings = 1;
}
message join_strings_return
{
	string result = 1;
}
//--------------------------------------------------------------------
message new_map_return
{
	handle instance = 1;
}
message set_key_params
{
	handle instance = 1;
	string key = 2;
	any value = 3;
}
message get_key_params
{
	handle instance = 1;
	string key = 2;
}
message get_key_return
{
	any value = 1;
}
message contains_key_params
{
	handle instance = 1;
	string key = 2;
}
message contains_key_return
{
	bool exists = 1;
}
//--------------------------------------------------------------------